{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/AzureDevops_CreatePipline_yml.png","path":"img/AzureDevops_CreatePipline_yml.png","modified":0,"renderable":0},{"_id":"source/img/blog_qcloud_cloudBase_CreateHttp.png","path":"img/blog_qcloud_cloudBase_CreateHttp.png","modified":0,"renderable":0},{"_id":"source/img/brickclick.png","path":"img/brickclick.png","modified":0,"renderable":0},{"_id":"source/img/007_blog_logo.png","path":"img/007_blog_logo.png","modified":0,"renderable":0},{"_id":"source/img/bricktable.png","path":"img/bricktable.png","modified":0,"renderable":0},{"_id":"source/img/cloudflare_workers_cname.png","path":"img/cloudflare_workers_cname.png","modified":0,"renderable":0},{"_id":"source/img/cloudflare_workers_router.png","path":"img/cloudflare_workers_router.png","modified":0,"renderable":0},{"_id":"source/img/devexpress_DevReportDesigner_v18.1.4.0.png","path":"img/devexpress_DevReportDesigner_v18.1.4.0.png","modified":0,"renderable":0},{"_id":"source/img/devexpress_saveCSToRepx.png","path":"img/devexpress_saveCSToRepx.png","modified":0,"renderable":0},{"_id":"source/img/AzureDevops_createTencentyun_DockerRegistry.png","path":"img/AzureDevops_createTencentyun_DockerRegistry.png","modified":0,"renderable":0},{"_id":"source/img/devextreme_assign_to_readonly_property.png","path":"img/devextreme_assign_to_readonly_property.png","modified":0,"renderable":0},{"_id":"source/img/dev_PropertyGridControl_customCollectionExpand.png","path":"img/dev_PropertyGridControl_customCollectionExpand.png","modified":0,"renderable":0},{"_id":"source/img/dev_PropertyGridControl_customCollectionExpand_officeView.png","path":"img/dev_PropertyGridControl_customCollectionExpand_officeView.png","modified":0,"renderable":0},{"_id":"source/img/dev_PropertyGridControl_customExpandableObjectConverter.png","path":"img/dev_PropertyGridControl_customExpandableObjectConverter.png","modified":0,"renderable":0},{"_id":"source/img/dev_PropertyGridControl_defaultDictionaryEditor.png","path":"img/dev_PropertyGridControl_defaultDictionaryEditor.png","modified":0,"renderable":0},{"_id":"source/img/dev_PropertyGridControl_GenericDictUiTypeEditor.png","path":"img/dev_PropertyGridControl_GenericDictUiTypeEditor.png","modified":0,"renderable":0},{"_id":"source/img/dev_PropertyGridControl_hideCollection_officeView.png","path":"img/dev_PropertyGridControl_hideCollection_officeView.png","modified":0,"renderable":0},{"_id":"source/img/dev_PropertyGridControl_hideDicRow.png","path":"img/dev_PropertyGridControl_hideDicRow.png","modified":0,"renderable":0},{"_id":"source/img/fastreport_debug.png","path":"img/fastreport_debug.png","modified":0,"renderable":0},{"_id":"source/img/fastreport_doublepass.png","path":"img/fastreport_doublepass.png","modified":0,"renderable":0},{"_id":"source/img/dev_PropertyGridControl_defaultCollectionExpand.png","path":"img/dev_PropertyGridControl_defaultCollectionExpand.png","modified":0,"renderable":0},{"_id":"source/img/fastreport_GroupSetResetPageNumber.png","path":"img/fastreport_GroupSetResetPageNumber.png","modified":0,"renderable":0},{"_id":"source/img/fastreport_saveAsCSharpfile.png","path":"img/fastreport_saveAsCSharpfile.png","modified":0,"renderable":0},{"_id":"source/img/home-bg-art.jpg","path":"img/home-bg-art.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-geek.jpg","path":"img/home-bg-geek.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/octopus_add_variableSets","path":"img/octopus_add_variableSets","modified":0,"renderable":0},{"_id":"source/img/octopus_use_variableSets.png","path":"img/octopus_use_variableSets.png","modified":0,"renderable":0},{"_id":"source/img/post-bg-qrcode-blogURL.jpg","path":"img/post-bg-qrcode-blogURL.jpg","modified":0,"renderable":0},{"_id":"source/img/printpreviewbase0.png","path":"img/printpreviewbase0.png","modified":0,"renderable":0},{"_id":"source/img/qcloud_images_guid.png","path":"img/qcloud_images_guid.png","modified":0,"renderable":0},{"_id":"source/img/qcloud_images_list.png","path":"img/qcloud_images_list.png","modified":0,"renderable":0},{"_id":"source/img/qrcode_studio_link_zhidao.png","path":"img/qrcode_studio_link_zhidao.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-icon-144x144.png","path":"img/favicon/android-icon-144x144.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-icon-192x192.png","path":"img/favicon/android-icon-192x192.png","modified":0,"renderable":0},{"_id":"source/img/qrcode_studio_link_zhidao_custom.png","path":"img/qrcode_studio_link_zhidao_custom.png","modified":0,"renderable":0},{"_id":"source/img/qrcode_studio_link_zoom_moduleShape.png","path":"img/qrcode_studio_link_zoom_moduleShape.png","modified":0,"renderable":0},{"_id":"source/img/report1.png","path":"img/report1.png","modified":0,"renderable":0},{"_id":"source/img/reportPreview.gif","path":"img/reportPreview.gif","modified":0,"renderable":0},{"_id":"source/img/spacial.png","path":"img/spacial.png","modified":0,"renderable":0},{"_id":"source/img/tencenyun_aspnet_core_repository.png","path":"img/tencenyun_aspnet_core_repository.png","modified":0,"renderable":0},{"_id":"source/img/travis-ci_setEnv.png","path":"img/travis-ci_setEnv.png","modified":0,"renderable":0},{"_id":"source/img/travis-ci_Trigger_Custom_Build.png","path":"img/travis-ci_Trigger_Custom_Build.png","modified":0,"renderable":0},{"_id":"source/img/travis-ci_wait_job_result.png","path":"img/travis-ci_wait_job_result.png","modified":0,"renderable":0},{"_id":"source/img/tye_dashboard.png","path":"img/tye_dashboard.png","modified":0,"renderable":0},{"_id":"source/img/wechat_qrcode_businesscard.png","path":"img/wechat_qrcode_businesscard.png","modified":0,"renderable":0},{"_id":"source/img/导出选中行.png","path":"img/导出选中行.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-icon-36x36.png","path":"img/favicon/android-icon-36x36.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-icon-48x48.png","path":"img/favicon/android-icon-48x48.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-icon-72x72.png","path":"img/favicon/android-icon-72x72.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-icon-96x96.png","path":"img/favicon/android-icon-96x96.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-114x114.png","path":"img/favicon/apple-icon-114x114.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-120x120.png","path":"img/favicon/apple-icon-120x120.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-144x144.png","path":"img/favicon/apple-icon-144x144.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-152x152.png","path":"img/favicon/apple-icon-152x152.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-180x180.png","path":"img/favicon/apple-icon-180x180.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-57x57.png","path":"img/favicon/apple-icon-57x57.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-60x60.png","path":"img/favicon/apple-icon-60x60.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-76x76.png","path":"img/favicon/apple-icon-76x76.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-72x72.png","path":"img/favicon/apple-icon-72x72.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-precomposed.png","path":"img/favicon/apple-icon-precomposed.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon.png","path":"img/favicon/apple-icon.png","modified":0,"renderable":0},{"_id":"source/img/favicon/browserconfig.xml","path":"img/favicon/browserconfig.xml","modified":0,"renderable":0},{"_id":"source/img/favicon/favicon-32x32.png","path":"img/favicon/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/img/favicon/favicon-16x16.png","path":"img/favicon/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/img/favicon/favicon.ico","path":"img/favicon/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/favicon/favicon-96x96.png","path":"img/favicon/favicon-96x96.png","modified":0,"renderable":0},{"_id":"source/img/favicon/ms-icon-144x144.png","path":"img/favicon/ms-icon-144x144.png","modified":0,"renderable":0},{"_id":"source/img/favicon/ms-icon-150x150.png","path":"img/favicon/ms-icon-150x150.png","modified":0,"renderable":0},{"_id":"source/img/favicon/ms-icon-310x310.png","path":"img/favicon/ms-icon-310x310.png","modified":0,"renderable":0},{"_id":"source/img/favicon/ms-icon-70x70.png","path":"img/favicon/ms-icon-70x70.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":499162500000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":499162500000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":499162500000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":499162500000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":499162500000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":499162500000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":499162500000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":499162500000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":499162500000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":499162500000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":499162500000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":499162500000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":499162500000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":499162500000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":499162500000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":499162500000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":499162500000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":499162500000},{"_id":"public/2022/10/05/hello-world/index.html","hash":"794c29fc7e4f9e01289eeeb9b26f042e6303f97d","modified":1664958805404},{"_id":"public/archives/index.html","hash":"75fc782ca719510fde3a0c393e7202d5ef8a238e","modified":1664959968216},{"_id":"public/archives/2022/index.html","hash":"4ddd18b3c6eab6e1948c9ed51c8d80b2fd01b82b","modified":1664959968216},{"_id":"public/archives/2022/10/index.html","hash":"19e5631a68aeba1a35041a53625148e21d41d5a7","modified":1664958805404},{"_id":"public/index.html","hash":"635716da60bf65c04e758845f70d40a01fe0d972","modified":1664959968216},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1664953157133},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1664953157133},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1664953157133},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1664953157133},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1664953157133},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1664953157133},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1664953157133},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1664953157133},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1664953157133},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1664953157133},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1664953157133},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1664953157133},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1664953157133},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1664953157133},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1664953157133},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1664953157133},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1664953157133},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1664953157133},{"_id":"public/css/style.css","hash":"3986ef4b1f56bf0ac3bc45aab261e0278794c3f1","modified":1664953157133},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1664953157133},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1664953157133},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1664953157133},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1664953157133},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663049159000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1663049159000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1663049159000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1663049159000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1663049159000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1663049159000},{"_id":"themes/fluid/package.json","hash":"167c6a0729a9286a7f508c1dd6a9c689e8799008","modified":1663049159000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1663049159000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1663049159000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1663049159000},{"_id":"themes/fluid/_config.yml","hash":"a6818529d753698e8fedbfc3c16be44e7bb769d1","modified":1664956134238},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1663049159000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1663049159000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1663049159000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1663049159000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1663049159000},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1663049159000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1663049159000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1663049159000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1663049159000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1663049159000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1663049159000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1663049159000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1663049159000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1663049159000},{"_id":"themes/fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1663049159000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1663049159000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1663049159000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1663049159000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1663049159000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1663049159000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1663049159000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1663049159000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1663049159000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1663049159000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1663049159000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1663049159000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1663049159000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1663049159000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1663049159000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1663049159000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1663049159000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1663049159000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1663049159000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1663049159000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1663049159000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1663049159000},{"_id":"themes/fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1663049159000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1663049159000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"97e003371b76911522fb93c5180c9fdceed29488","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"0aa512c21a4b74ef2e70009786a1858d7c2fae9c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1663049159000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1663049159000},{"_id":"public/local-search.xml","hash":"de718eec7ccb635f3cc478faf3d6e3c97efd62d3","modified":1664959968216},{"_id":"public/404.html","hash":"6e5b01c901d9c1ef296a3c6052e7a359516eede9","modified":1664959968216},{"_id":"public/links/index.html","hash":"c0a45a41c1959c97830c3752ee199a85440f3b21","modified":1664959968216},{"_id":"public/tags/index.html","hash":"3365b50570dd03296b073e2453b08e9b18c7f335","modified":1664959968216},{"_id":"public/categories/index.html","hash":"f409bda36c310927c44c509009b8d8dbcfe8504a","modified":1664959968216},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1664953586108},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1664953586108},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1664953586108},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1664953586108},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1664953586108},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1664953586108},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1664953586108},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1664953586108},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1664953586108},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1664953586108},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1664953586108},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1664953586108},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1664953586108},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1664953586108},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1664953586108},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1664953586108},{"_id":"public/css/main.css","hash":"d3b6eb3ef0e222271f1453d3d1214f3ba053792d","modified":1664953586108},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1664953586108},{"_id":"source/_posts/2022-03-23-如何简单的启动一组dotnet服务(powershell).md","hash":"6551c52fc16b3c8ff1b12bb2151e41c7d28bf7d5","modified":1652964476603},{"_id":"source/about/index.md","hash":"2717097961127d6027d8666812960a98c09ac30c","modified":1664958530722},{"_id":"source/_posts/2022-05-7-octopus_deploy_使用XML_配置变量功能设置nlog日志.md","hash":"e94f212a72d4c21f4eece3ccf618a5100c23ee3c","modified":1652965316083},{"_id":"source/_posts/2022-07-03-如何解决devextreme-angular错误TypeError.md","hash":"85358174a6f549c2b997c819915ddd86e13b2339","modified":1658472232611},{"_id":"public/about/index.html","hash":"bd4b714218ddbc0bc1d337ff4d7f324c65914b58","modified":1664959968216},{"_id":"public/tags/powershell/index.html","hash":"4166f54a0613ab449526b9997b16c55dbe45bea3","modified":1664959968216},{"_id":"public/tags/server/index.html","hash":"6215b2a0c3bde894107f360b5c21ef6284041238","modified":1664959968216},{"_id":"public/tags/dotnet/index.html","hash":"c4cef533694588c108e0b223091bf0c5c327ab2c","modified":1664959968216},{"_id":"public/tags/tye/index.html","hash":"8c6864b95f50aaf0438b2b45003875b30379c3a9","modified":1664959968216},{"_id":"public/tags/octopus/index.html","hash":"3b37713dc6ffe6e63e9465d8ae807dce6e8f0227","modified":1664959968216},{"_id":"public/tags/nlog/index.html","hash":"a390df586d9d99dd78d9c71026448d3eb87a5366","modified":1664959968216},{"_id":"public/tags/config/index.html","hash":"dd81561fea8e79913f7aa4c889e53361fca24fc3","modified":1664959968216},{"_id":"public/tags/xml/index.html","hash":"7607a379949955e54df30ab5d3a1dc310a3c6f16","modified":1664959968216},{"_id":"public/archives/2022/03/index.html","hash":"a600173a732ef5a90097d758da30e46920b35182","modified":1664959968216},{"_id":"public/archives/2022/05/index.html","hash":"358b7ddb1f2244c5cde7e04864572aa27f516941","modified":1664959968216},{"_id":"public/2022/05/07/2022-05-7-octopus_deploy_使用XML_配置变量功能设置nlog日志/index.html","hash":"2ec79a09226d8324fbff6db8bb7c5f91ebcafd66","modified":1664958805404},{"_id":"public/2022/03/23/2022-03-23-如何简单的启动一组dotnet服务(powershell)/index.html","hash":"498e44ba151aa38f4603a1956bbff1587e72fdad","modified":1664959036599},{"_id":"source/_posts/2022-07-03-如何解决devextreme-angular错误typeError.md","hash":"5ba118c3c9dec4bbfe5fb483453142d6eb8694eb","modified":1664954494239},{"_id":"public/archives/2022/07/index.html","hash":"b77c44e0fcb6d944571eeedf8745a5b4a7605493","modified":1664959968216},{"_id":"public/tags/devextreme/index.html","hash":"229dfc2e738a93fb5b60e2cc59650d59dab4b19b","modified":1664959968216},{"_id":"public/tags/angular/index.html","hash":"40eeccdd588ea813f824ac74bc9bd00015aa1144","modified":1664959968216},{"_id":"public/2022/07/03/2022-07-03-如何解决devextreme-angular错误typeError/index.html","hash":"fe8b89af65853e7424da5f20ebb30b9e2f8fdf69","modified":1664959036599},{"_id":"source/img/favicon/android-icon-144x144.png","hash":"41cb1209f1db68ff2a12f23436f863558584fa48","modified":1584375417227},{"_id":"source/img/favicon/android-icon-192x192.png","hash":"f2fee6b299fab5728262058f4b978a910a0fa044","modified":1584375417230},{"_id":"source/img/007_blog_logo.png","hash":"5c30e6e4bbcde0b7fde1d5fd901fe8150a1c0f55","modified":1584375417206},{"_id":"source/img/blog_qcloud_cloudBase_CreateHttp.png","hash":"98421a7375fa589b3c404fe5586cbd1e44d0f1e2","modified":1600745604444},{"_id":"source/img/brickclick.png","hash":"170eab33f7330f9321a81af96945d42a22f9be5b","modified":1584375417210},{"_id":"source/img/bricktable.png","hash":"a64689f235f846a16753ea059499f69a053b1349","modified":1584375417213},{"_id":"source/img/cloudflare_workers_cname.png","hash":"c33f653f3f70af3b750628ed94579cff276f471d","modified":1658469139012},{"_id":"source/img/dev_PropertyGridControl_customCollectionExpand_officeView.png","hash":"05e232545ac7857f774cd1a323345bcd0037b89b","modified":1632903557177},{"_id":"source/img/dev_PropertyGridControl_defaultDictionaryEditor.png","hash":"1e05a2fb21f23971af416b593ff9b4651905767a","modified":1632472574851},{"_id":"source/img/fastreport_GroupSetResetPageNumber.png","hash":"be5620288dbbf73577a1450d4029ed1a555faffd","modified":1584375417215},{"_id":"source/img/fastreport_debug.png","hash":"65459b64450fc93a0351c3ffeb036068e758a21e","modified":1584375417218},{"_id":"source/img/devexpress_saveCSToRepx.png","hash":"a25a3df1f4918058f0edd9f61492baf905c16151","modified":1618537560766},{"_id":"source/img/fastreport_saveAsCSharpfile.png","hash":"29cb39a2660d701702d68a82c45155e3d290f9b5","modified":1584375417224},{"_id":"source/img/fastreport_doublepass.png","hash":"567f3b1bce6ab14bf0aceb227a01c9e5e0463bc0","modified":1584375417221},{"_id":"source/img/devextreme_assign_to_readonly_property.png","hash":"3b88bd9393915ca37acd24e1c9ccc53aed68c349","modified":1656816699311},{"_id":"source/img/home-bg-geek.jpg","hash":"2a6ef408e65acb8ced303649cdea976cea87cd79","modified":1583254200939},{"_id":"source/img/octopus_add_variableSets","hash":"68918ab330915577771b7214c9387a227608a4fa","modified":1652965077448},{"_id":"source/img/printpreviewbase0.png","hash":"39742a0b4b7f189b9a8f2a6782d87545b6632a80","modified":1584375417343},{"_id":"source/img/report1.png","hash":"de90cf873e8ad42a10b7360fcb4c8c297ce14a0d","modified":1584375417353},{"_id":"source/img/spacial.png","hash":"0fca9b4403ea744241d792002d9d4a54830cd935","modified":1584375417366},{"_id":"source/img/tencenyun_aspnet_core_repository.png","hash":"146016b56e29a836ffb499181575e49f730ae207","modified":1586932197581},{"_id":"source/img/favicon/android-icon-36x36.png","hash":"bad4c622a0b2b02d3dd08bd14b547e72d7b12dd7","modified":1584375417233},{"_id":"source/img/favicon/android-icon-72x72.png","hash":"12ae3c4ccd55853f34a0e3e8b21730f388690453","modified":1584375417237},{"_id":"source/img/favicon/android-icon-96x96.png","hash":"4f4805664fa46e70b57572dd35855b10d710cb69","modified":1584375417239},{"_id":"source/img/favicon/android-icon-48x48.png","hash":"7719eec3266a3f02aaa3113ee137f9a8f2879839","modified":1584375417235},{"_id":"source/img/favicon/apple-icon-114x114.png","hash":"4ed96b07257fff1387815a78354b431b327e8b0a","modified":1584375417243},{"_id":"source/img/favicon/apple-icon-120x120.png","hash":"33b06c91f00276afd152d9b9a37e9e89bf7eea79","modified":1584375417246},{"_id":"source/img/favicon/apple-icon-144x144.png","hash":"41cb1209f1db68ff2a12f23436f863558584fa48","modified":1584375417248},{"_id":"source/img/favicon/apple-icon-152x152.png","hash":"e0c352b91e0b7eb370bff5d5532a72924049a482","modified":1584375417250},{"_id":"source/img/favicon/apple-icon-72x72.png","hash":"12ae3c4ccd55853f34a0e3e8b21730f388690453","modified":1584375417262},{"_id":"source/img/favicon/apple-icon-180x180.png","hash":"81ad9f351de9428a23127c937998adfd18aca120","modified":1584375417252},{"_id":"source/img/favicon/apple-icon-57x57.png","hash":"74c5ba9db1dc4c16ced06d889b81f12631079b67","modified":1584375417255},{"_id":"source/img/favicon/apple-icon-60x60.png","hash":"e3f417e0fb8f3ac1ee3ec0337728b23d709440fc","modified":1584375417258},{"_id":"source/img/favicon/browserconfig.xml","hash":"ce58ec7b540ac612622639f316e24560cc002778","modified":1584375417275},{"_id":"source/img/favicon/apple-icon-76x76.png","hash":"54fbba28737dd4e2fb9d1e93eec68db6d5673cba","modified":1584375417267},{"_id":"source/img/favicon/favicon-16x16.png","hash":"6123650387d34436766874083dcec78344616175","modified":1584375417322},{"_id":"source/img/favicon/apple-icon-precomposed.png","hash":"e5963f901dc3d1efded23c0e9c638dadd120a6a5","modified":1584375417268},{"_id":"source/img/favicon/favicon.ico","hash":"552db2b724d99fba4c61f4057858318a2cedd2fb","modified":1584375417329},{"_id":"source/img/favicon/favicon-32x32.png","hash":"85552d7753fa04b379031688e6d5088f08371e55","modified":1584375417325},{"_id":"source/img/favicon/apple-icon.png","hash":"e5963f901dc3d1efded23c0e9c638dadd120a6a5","modified":1584375417271},{"_id":"source/img/favicon/favicon-96x96.png","hash":"4f4805664fa46e70b57572dd35855b10d710cb69","modified":1584375417327},{"_id":"source/img/favicon/manifest.json","hash":"0710389449000093f668c39f5c5c39568946df0a","modified":1584375417331},{"_id":"source/img/favicon/ms-icon-144x144.png","hash":"41cb1209f1db68ff2a12f23436f863558584fa48","modified":1584375417333},{"_id":"source/img/favicon/ms-icon-150x150.png","hash":"06dcf9d3877754dad7e8fc0aabc9697e3e3c9cd6","modified":1584375417336},{"_id":"source/img/favicon/ms-icon-310x310.png","hash":"7fe02b2db4145e41deea50069537abff28c1ad70","modified":1584375417339},{"_id":"source/img/favicon/ms-icon-70x70.png","hash":"474bdfb57d22bdaf5a4f2fd3e31bab93a118da32","modified":1584375417341},{"_id":"source/img/AzureDevops_createTencentyun_DockerRegistry.png","hash":"e649e27d878b05237897c34717a0c4575ad1ac95","modified":1586920775091},{"_id":"source/img/cloudflare_workers_router.png","hash":"bc2ee40d49dd854312bec8ec768592297b2ecdb0","modified":1658468677199},{"_id":"source/img/dev_PropertyGridControl_GenericDictUiTypeEditor.png","hash":"1f0cc71130e6742ced42e69a5d3510dcbe2514ee","modified":1632473684891},{"_id":"source/img/dev_PropertyGridControl_hideCollection_officeView.png","hash":"fe95991c6f8af158aab23bd113855a3004f714f0","modified":1632904209146},{"_id":"source/img/dev_PropertyGridControl_defaultCollectionExpand.png","hash":"69cff68d9efb4e94faadc135c33bb31187063c36","modified":1632644238273},{"_id":"source/img/home-bg-art.jpg","hash":"a8a46a06f566e13a919d9cbca6a66ae5a3b78b1e","modified":1583254200937},{"_id":"source/img/home-bg-o.jpg","hash":"fc4bdf7fa98346ea35115151e4914cd1e5a946d9","modified":1583254200944},{"_id":"source/img/octopus_use_variableSets.png","hash":"627f48b5222611be09a29d5ac284481fef81cc98","modified":1652965203463},{"_id":"source/img/post-bg-qrcode-blogURL.jpg","hash":"63db3b6f8ccb4298d4646e0f2e45950860e98c13","modified":1596703302538},{"_id":"source/img/qcloud_images_guid.png","hash":"c24533f65b964f86ea732216982c117503a2a35a","modified":1584375417348},{"_id":"source/img/qrcode_studio_link_zoom_moduleShape.png","hash":"5c87be8fa9c3ea4c432361b35bb0976fd4df626d","modified":1596614237286},{"_id":"source/img/qcloud_images_list.png","hash":"81efd762a2f5f1ba149b38f3d328cd530fb14523","modified":1584375417352},{"_id":"source/img/travis-ci_wait_job_result.png","hash":"38363eb55a72b997f1206b55122ca2a30f2ecc89","modified":1584375417374},{"_id":"source/img/tye_dashboard.png","hash":"b98b9be79cb8121be1fe2b8c64bd67c0ad2a51c7","modified":1652964130892},{"_id":"source/img/travis-ci_setEnv.png","hash":"f52a24b14ebab8a131569ef7a15878b79ab35f03","modified":1586489775294},{"_id":"source/img/导出选中行.png","hash":"8bebe5ac3252bec9c9977302b5af1147fd848549","modified":1584375417377},{"_id":"source/img/AzureDevops_CreatePipline_yml.png","hash":"dddaf45a3bc28e6a3cb3e56be85ed60d4944f733","modified":1586930379584},{"_id":"source/img/404-bg.jpg","hash":"dded479a06d5165d1f87c63677442aecdf1ac748","modified":1583254200912},{"_id":"source/img/dev_PropertyGridControl_customExpandableObjectConverter.png","hash":"490c43b5b5d07de89f610f0daf60f58c4333c867","modified":1632645921293},{"_id":"source/img/dev_PropertyGridControl_customCollectionExpand.png","hash":"62f609124c9777cea77f1035fe68c925486e370b","modified":1632644535561},{"_id":"source/img/devexpress_DevReportDesigner_v18.1.4.0.png","hash":"527ee08c269621fcdfe64b480261d25453ccb126","modified":1634026912730},{"_id":"source/img/qrcode_studio_link_zhidao.png","hash":"68c1c4c69f402fc1b1b76f7f9809b38ac6595ac3","modified":1596613325027},{"_id":"source/img/qrcode_studio_link_zhidao_custom.png","hash":"7c0fb6070a3e414ea7063d65f695a5ea92805b16","modified":1596696178341},{"_id":"source/img/travis-ci_Trigger_Custom_Build.png","hash":"ebaf5623aeb0e3cd36cfa5655f205984792ca41c","modified":1584375417370},{"_id":"source/img/dev_PropertyGridControl_hideDicRow.png","hash":"1c590f31b0fc52a31d1024d444cd70efebc761e9","modified":1632722629469},{"_id":"source/img/wechat_qrcode_businesscard.png","hash":"edb106d8685e1d02f3b5319ed2fe21b9a1985b9a","modified":1596612192222},{"_id":"source/img/home-bg.jpg","hash":"35131c8b7ab3943c9fe4577329cd1c412d1c4fac","modified":1583254200949},{"_id":"source/img/reportPreview.gif","hash":"318b513d3e908d218cb18e583aa67d522b23897f","modified":1584375417363},{"_id":"public/img/favicon/manifest.json","hash":"aebdc9d6447e8b045dccf52f3b6b4000442d927f","modified":1664958805404},{"_id":"public/img/blog_qcloud_cloudBase_CreateHttp.png","hash":"98421a7375fa589b3c404fe5586cbd1e44d0f1e2","modified":1664958805404},{"_id":"public/img/brickclick.png","hash":"170eab33f7330f9321a81af96945d42a22f9be5b","modified":1664958805404},{"_id":"public/img/007_blog_logo.png","hash":"5c30e6e4bbcde0b7fde1d5fd901fe8150a1c0f55","modified":1664958805404},{"_id":"public/img/bricktable.png","hash":"a64689f235f846a16753ea059499f69a053b1349","modified":1664958805404},{"_id":"public/img/cloudflare_workers_cname.png","hash":"c33f653f3f70af3b750628ed94579cff276f471d","modified":1664958805404},{"_id":"public/img/devexpress_saveCSToRepx.png","hash":"a25a3df1f4918058f0edd9f61492baf905c16151","modified":1664958805404},{"_id":"public/img/devextreme_assign_to_readonly_property.png","hash":"3b88bd9393915ca37acd24e1c9ccc53aed68c349","modified":1664958805404},{"_id":"public/img/dev_PropertyGridControl_customCollectionExpand_officeView.png","hash":"05e232545ac7857f774cd1a323345bcd0037b89b","modified":1664958805404},{"_id":"public/img/dev_PropertyGridControl_defaultDictionaryEditor.png","hash":"1e05a2fb21f23971af416b593ff9b4651905767a","modified":1664958805404},{"_id":"public/img/fastreport_debug.png","hash":"65459b64450fc93a0351c3ffeb036068e758a21e","modified":1664958805404},{"_id":"public/img/fastreport_doublepass.png","hash":"567f3b1bce6ab14bf0aceb227a01c9e5e0463bc0","modified":1664958805404},{"_id":"public/img/fastreport_saveAsCSharpfile.png","hash":"29cb39a2660d701702d68a82c45155e3d290f9b5","modified":1664958805404},{"_id":"public/img/fastreport_GroupSetResetPageNumber.png","hash":"be5620288dbbf73577a1450d4029ed1a555faffd","modified":1664958805404},{"_id":"public/img/home-bg-geek.jpg","hash":"2a6ef408e65acb8ced303649cdea976cea87cd79","modified":1664958805404},{"_id":"public/img/octopus_add_variableSets","hash":"68918ab330915577771b7214c9387a227608a4fa","modified":1664958805404},{"_id":"public/img/printpreviewbase0.png","hash":"39742a0b4b7f189b9a8f2a6782d87545b6632a80","modified":1664958805404},{"_id":"public/img/report1.png","hash":"de90cf873e8ad42a10b7360fcb4c8c297ce14a0d","modified":1664958805404},{"_id":"public/img/spacial.png","hash":"0fca9b4403ea744241d792002d9d4a54830cd935","modified":1664958805404},{"_id":"public/img/tencenyun_aspnet_core_repository.png","hash":"146016b56e29a836ffb499181575e49f730ae207","modified":1664958805404},{"_id":"public/img/favicon/android-icon-144x144.png","hash":"41cb1209f1db68ff2a12f23436f863558584fa48","modified":1664958805404},{"_id":"public/img/favicon/android-icon-192x192.png","hash":"f2fee6b299fab5728262058f4b978a910a0fa044","modified":1664958805404},{"_id":"public/img/favicon/android-icon-36x36.png","hash":"bad4c622a0b2b02d3dd08bd14b547e72d7b12dd7","modified":1664958805404},{"_id":"public/img/favicon/android-icon-48x48.png","hash":"7719eec3266a3f02aaa3113ee137f9a8f2879839","modified":1664958805404},{"_id":"public/img/favicon/android-icon-72x72.png","hash":"12ae3c4ccd55853f34a0e3e8b21730f388690453","modified":1664958805404},{"_id":"public/img/favicon/android-icon-96x96.png","hash":"4f4805664fa46e70b57572dd35855b10d710cb69","modified":1664958805404},{"_id":"public/img/favicon/apple-icon-114x114.png","hash":"4ed96b07257fff1387815a78354b431b327e8b0a","modified":1664958805404},{"_id":"public/img/favicon/apple-icon-120x120.png","hash":"33b06c91f00276afd152d9b9a37e9e89bf7eea79","modified":1664958805404},{"_id":"public/img/favicon/apple-icon-144x144.png","hash":"41cb1209f1db68ff2a12f23436f863558584fa48","modified":1664958805404},{"_id":"public/img/favicon/apple-icon-152x152.png","hash":"e0c352b91e0b7eb370bff5d5532a72924049a482","modified":1664958805404},{"_id":"public/img/favicon/apple-icon-57x57.png","hash":"74c5ba9db1dc4c16ced06d889b81f12631079b67","modified":1664958805404},{"_id":"public/img/favicon/apple-icon-180x180.png","hash":"81ad9f351de9428a23127c937998adfd18aca120","modified":1664958805404},{"_id":"public/img/favicon/apple-icon-60x60.png","hash":"e3f417e0fb8f3ac1ee3ec0337728b23d709440fc","modified":1664958805404},{"_id":"public/img/favicon/apple-icon-72x72.png","hash":"12ae3c4ccd55853f34a0e3e8b21730f388690453","modified":1664958805404},{"_id":"public/img/favicon/apple-icon-76x76.png","hash":"54fbba28737dd4e2fb9d1e93eec68db6d5673cba","modified":1664958805404},{"_id":"public/img/favicon/apple-icon-precomposed.png","hash":"e5963f901dc3d1efded23c0e9c638dadd120a6a5","modified":1664958805404},{"_id":"public/img/favicon/browserconfig.xml","hash":"ce58ec7b540ac612622639f316e24560cc002778","modified":1664958805404},{"_id":"public/img/favicon/apple-icon.png","hash":"e5963f901dc3d1efded23c0e9c638dadd120a6a5","modified":1664958805404},{"_id":"public/img/favicon/favicon-32x32.png","hash":"85552d7753fa04b379031688e6d5088f08371e55","modified":1664958805404},{"_id":"public/img/favicon/favicon-16x16.png","hash":"6123650387d34436766874083dcec78344616175","modified":1664958805404},{"_id":"public/img/favicon/favicon.ico","hash":"552db2b724d99fba4c61f4057858318a2cedd2fb","modified":1664958805404},{"_id":"public/img/favicon/favicon-96x96.png","hash":"4f4805664fa46e70b57572dd35855b10d710cb69","modified":1664958805404},{"_id":"public/img/favicon/ms-icon-144x144.png","hash":"41cb1209f1db68ff2a12f23436f863558584fa48","modified":1664958805404},{"_id":"public/img/favicon/ms-icon-150x150.png","hash":"06dcf9d3877754dad7e8fc0aabc9697e3e3c9cd6","modified":1664958805404},{"_id":"public/img/favicon/ms-icon-310x310.png","hash":"7fe02b2db4145e41deea50069537abff28c1ad70","modified":1664958805404},{"_id":"public/img/favicon/ms-icon-70x70.png","hash":"474bdfb57d22bdaf5a4f2fd3e31bab93a118da32","modified":1664958805404},{"_id":"public/img/cloudflare_workers_router.png","hash":"bc2ee40d49dd854312bec8ec768592297b2ecdb0","modified":1664958805404},{"_id":"public/img/AzureDevops_createTencentyun_DockerRegistry.png","hash":"e649e27d878b05237897c34717a0c4575ad1ac95","modified":1664958805404},{"_id":"public/img/dev_PropertyGridControl_GenericDictUiTypeEditor.png","hash":"1f0cc71130e6742ced42e69a5d3510dcbe2514ee","modified":1664958805404},{"_id":"public/img/dev_PropertyGridControl_hideCollection_officeView.png","hash":"fe95991c6f8af158aab23bd113855a3004f714f0","modified":1664958805404},{"_id":"public/img/dev_PropertyGridControl_defaultCollectionExpand.png","hash":"69cff68d9efb4e94faadc135c33bb31187063c36","modified":1664958805404},{"_id":"public/img/home-bg-art.jpg","hash":"a8a46a06f566e13a919d9cbca6a66ae5a3b78b1e","modified":1664958805404},{"_id":"public/img/home-bg-o.jpg","hash":"fc4bdf7fa98346ea35115151e4914cd1e5a946d9","modified":1664958805404},{"_id":"public/img/octopus_use_variableSets.png","hash":"627f48b5222611be09a29d5ac284481fef81cc98","modified":1664958805404},{"_id":"public/img/post-bg-qrcode-blogURL.jpg","hash":"63db3b6f8ccb4298d4646e0f2e45950860e98c13","modified":1664958805404},{"_id":"public/img/qcloud_images_guid.png","hash":"c24533f65b964f86ea732216982c117503a2a35a","modified":1664958805404},{"_id":"public/img/qcloud_images_list.png","hash":"81efd762a2f5f1ba149b38f3d328cd530fb14523","modified":1664958805404},{"_id":"public/img/qrcode_studio_link_zoom_moduleShape.png","hash":"5c87be8fa9c3ea4c432361b35bb0976fd4df626d","modified":1664958805404},{"_id":"public/img/travis-ci_setEnv.png","hash":"f52a24b14ebab8a131569ef7a15878b79ab35f03","modified":1664958805404},{"_id":"public/img/travis-ci_wait_job_result.png","hash":"38363eb55a72b997f1206b55122ca2a30f2ecc89","modified":1664958805404},{"_id":"public/img/tye_dashboard.png","hash":"b98b9be79cb8121be1fe2b8c64bd67c0ad2a51c7","modified":1664958805404},{"_id":"public/img/导出选中行.png","hash":"8bebe5ac3252bec9c9977302b5af1147fd848549","modified":1664958805404},{"_id":"public/img/AzureDevops_CreatePipline_yml.png","hash":"dddaf45a3bc28e6a3cb3e56be85ed60d4944f733","modified":1664958805404},{"_id":"public/img/404-bg.jpg","hash":"dded479a06d5165d1f87c63677442aecdf1ac748","modified":1664958805404},{"_id":"public/img/devexpress_DevReportDesigner_v18.1.4.0.png","hash":"527ee08c269621fcdfe64b480261d25453ccb126","modified":1664958805404},{"_id":"public/img/dev_PropertyGridControl_customCollectionExpand.png","hash":"62f609124c9777cea77f1035fe68c925486e370b","modified":1664958805404},{"_id":"public/img/dev_PropertyGridControl_customExpandableObjectConverter.png","hash":"490c43b5b5d07de89f610f0daf60f58c4333c867","modified":1664958805404},{"_id":"public/img/qrcode_studio_link_zhidao.png","hash":"68c1c4c69f402fc1b1b76f7f9809b38ac6595ac3","modified":1664958805404},{"_id":"public/img/qrcode_studio_link_zhidao_custom.png","hash":"7c0fb6070a3e414ea7063d65f695a5ea92805b16","modified":1664958805404},{"_id":"public/img/travis-ci_Trigger_Custom_Build.png","hash":"ebaf5623aeb0e3cd36cfa5655f205984792ca41c","modified":1664958805404},{"_id":"public/img/home-bg.jpg","hash":"35131c8b7ab3943c9fe4577329cd1c412d1c4fac","modified":1664958805404},{"_id":"public/img/dev_PropertyGridControl_hideDicRow.png","hash":"1c590f31b0fc52a31d1024d444cd70efebc761e9","modified":1664958805404},{"_id":"public/img/wechat_qrcode_businesscard.png","hash":"edb106d8685e1d02f3b5319ed2fe21b9a1985b9a","modified":1664958805404},{"_id":"public/img/reportPreview.gif","hash":"318b513d3e908d218cb18e583aa67d522b23897f","modified":1664958805404},{"_id":"source/_posts/2017-09-19-Devexpress自定义导出(Export)选定行数据到Excel简易版.md","hash":"20d04862b5f2e066c3227b3eea94943aac8555ca","modified":1584375417145},{"_id":"source/_posts/2017-10-7-Devexpress打印预览(PrintPreview)时修改打印数据.md","hash":"d416fc01a644c9594bd5f19686bb8a8016c8e056","modified":1584375417146},{"_id":"source/_posts/2020-01-17-无需VPS，使用重新打tag的方式，拉取、转存mcr.microsoft.com的镜像.md","hash":"5348e6c6100fbd9e140d270ef909ad878f505e36","modified":1587651043047},{"_id":"source/_posts/2020-03-09-官方支持，解决国内docker pull mcr.microsoft.com 镜像过慢的问题.md","hash":"0916641b1966300282976fadd29fedd5037f9ffe","modified":1586483245035},{"_id":"source/_posts/2020-03-12-fastreport显示带[] 方括号的文本.md","hash":"76e067d5f53df2b8113585f8848a9b525fb581c1","modified":1584375417154},{"_id":"source/_posts/2020-03-13-fastreport-debug 调试frx文件.md","hash":"3e7b889d1fafea935c4650557ce5f735ab672d6a","modified":1584375417155},{"_id":"source/_posts/2020-03-16-fastreport查询系统变量总页数 Report.GetVariableValue(TotalPages)总是返回1.md","hash":"68031f639be52dc027ea6f8957d412f53a2de20c","modified":1584375417157},{"_id":"source/_posts/2020-04-10-查看mcr.microsoft.com中所有的Tag.md","hash":"3125179f80716edda7237d5297be1c092053697d","modified":1622438942719},{"_id":"source/_posts/2020-04-6-单元测试CommandLineUtils中的命令.md","hash":"0fbe82d7bccafdc7d6c619e3c7688ce0398e05c6","modified":1586178966789},{"_id":"source/_posts/2020-06-26-使用PowerShell查看使用RDP登录到远程服务器的客户端IP.md","hash":"b2408315b00686710942e466ddc945c742b7b2b9","modified":1593188788883},{"_id":"source/_posts/2020-08-05-使用Zxing.Net 创建透明背景艺术二维码.md","hash":"06c7bba3bf5e700ad3d0d5052efce46afd2604c0","modified":1596703312800},{"_id":"source/_posts/2020-09-05-通过路由器监控家中是否停电.md","hash":"d27ee71eef2e91de4f64e90bf05d4aac1bba0a03","modified":1600830155512},{"_id":"source/_posts/2021-03-18-fastreport每页显示固定行数.md","hash":"c0b4c5771a3c45074d21320a30dc047ad2901b1a","modified":1616986683097},{"_id":"source/_posts/2021-04-16-devexpress使用设计器编辑报表模板.md","hash":"64a3511d25bf7772f2244b1b912ea2a7c890ecc1","modified":1634028121068},{"_id":"source/_posts/2021-05-27-devexpress使用模板打印报表.md","hash":"e147c5cc26aa04db8eb44eee03aa346b7bb36616","modified":1622446674286},{"_id":"source/_posts/2021-09-24-devexpress如何使用PropertyGridControl编辑字典(Dictionary).md","hash":"f86c5a431d5125a994e2788aaf023afe5c69c14c","modified":1632647730940},{"_id":"source/_posts/2021-09-26-devexpress如何在PropertyGridControl中直接编辑集合成员 .md","hash":"8667f95f6db4860eff5073df5af5b325016b29cd","modified":1632647746046},{"_id":"source/_posts/2021-09-27-devexpress如何隐藏PropertyGridControl中的行.md","hash":"8fdc07940e942782dfad4c83734e297d7ce1c39e","modified":1632905999320},{"_id":"source/_posts/2021-09-29-devexpress如何隐藏PropertyGridControl中的编辑器(Editor).md","hash":"0387239e691de7f27f283fab3931746ff77174ed","modified":1632906575461},{"_id":"source/_posts/2022-07-22-使用非80端口部署微信公众号后台.md","hash":"145a4e78b22577946ebdb5de0a5fc9883b1860d3","modified":1663739037485},{"_id":"source/_posts/2022-09-21-任天堂各区最新实时会员价格.md","hash":"7b5b0a82d8b6562639e8179436e38b3aa3c598e6","modified":1663858124419},{"_id":"source/_posts/文章待写目录.md","hash":"85c9c19ad637e2f6f90c01204813a7703181211a","modified":1663952108156},{"_id":"public/2022/09/21/2022-09-21-任天堂各区最新实时会员价格/index.html","hash":"9a848c55e75c466554cca25a47fa12f96ccfd09c","modified":1664959036599},{"_id":"public/2022/07/22/2022-07-22-使用非80端口部署微信公众号后台/index.html","hash":"e8e67d0b58d1f43fac7691517417dc0375791288","modified":1664959036599},{"_id":"public/2021/09/29/2021-09-29-devexpress如何隐藏PropertyGridControl中的编辑器(Editor)/index.html","hash":"5a698ab2cd1175b691d11950aeffa92c11d5108a","modified":1664959036599},{"_id":"public/2021/09/27/2021-09-27-devexpress如何隐藏PropertyGridControl中的行/index.html","hash":"c1e918e53491c1c1c77cb6f2b960a7e7dffe0c3b","modified":1664959036599},{"_id":"public/2021/09/26/2021-09-26-devexpress如何在PropertyGridControl中直接编辑集合成员 /index.html","hash":"e29d22a3075e187f841386d11376c6a5ebc963e0","modified":1664959036599},{"_id":"public/2021/09/24/2021-09-24-devexpress如何使用PropertyGridControl编辑字典(Dictionary)/index.html","hash":"f7b8053e10a708300d2a8787e476839789b294d0","modified":1664959036599},{"_id":"public/2021/05/27/2021-05-27-devexpress使用模板打印报表/index.html","hash":"b6d83e17d7bdad8611c210c2ab85bdab4c171431","modified":1664959036599},{"_id":"public/2021/04/16/2021-04-16-devexpress使用设计器编辑报表模板/index.html","hash":"12db6a6bcbac6a7daf79e7fd2e9e7167257d277e","modified":1664959036599},{"_id":"public/2021/03/18/2021-03-18-fastreport每页显示固定行数/index.html","hash":"1b20514b7faa9d5a7c759b815ca46149e05b8b62","modified":1664959036599},{"_id":"public/2020/09/05/2020-09-05-通过路由器监控家中是否停电/index.html","hash":"b381dc9fea00ad892fda6bf619cdf28780611695","modified":1664959036599},{"_id":"public/2020/08/05/2020-08-05-使用Zxing.Net 创建透明背景艺术二维码/index.html","hash":"8bc1d16e64f482b24c396d180c8e0f460ff529f6","modified":1664959036599},{"_id":"public/2020/06/26/2020-06-26-使用PowerShell查看使用RDP登录到远程服务器的客户端IP/index.html","hash":"0304532d2b208361c9c7f6761c5c405159cf83ed","modified":1664959036599},{"_id":"public/2020/04/10/文章待写目录/index.html","hash":"915122226aa8ab1e1242739f7f77c008b7677e94","modified":1664959036599},{"_id":"public/2020/04/10/2020-04-10-查看mcr.microsoft.com中所有的Tag/index.html","hash":"012f5e87892eff364933b9e9e365a1d1a70b7692","modified":1664959036599},{"_id":"public/2020/04/06/2020-04-6-单元测试CommandLineUtils中的命令/index.html","hash":"2d5caeee9ee28a620af2f47eca0e7e68d229fec4","modified":1664959036599},{"_id":"public/2020/03/16/2020-03-16-fastreport查询系统变量总页数 Report.GetVariableValue(TotalPages)总是返回1/index.html","hash":"770adb4a81565181341a5de8d2545f5cc103d82d","modified":1664959036599},{"_id":"public/2020/03/13/2020-03-13-fastreport-debug 调试frx文件/index.html","hash":"4d15116d3fd20181860cc7f343233724e1a608ea","modified":1664959036599},{"_id":"public/2020/03/12/2020-03-12-fastreport显示带[] 方括号的文本/index.html","hash":"dc379dedb4ec4de9cc71c373387bed914b5e993e","modified":1664959036599},{"_id":"public/archives/page/2/index.html","hash":"1f3d119313c9b6ea5fc25fd1edeb4395034cec44","modified":1664959968216},{"_id":"public/archives/page/3/index.html","hash":"ab860dae4ab6234a61e16524bedc614ab4b5c578","modified":1664959968216},{"_id":"public/archives/2017/index.html","hash":"fd5dccf29da983e1b221a6817e8c7d5e4d829f60","modified":1664959968216},{"_id":"public/archives/2017/09/index.html","hash":"b77d29e67871f3d76d76cfb3cf3a485a6c7e2994","modified":1664959968216},{"_id":"public/archives/2017/10/index.html","hash":"f821d7fed9b42e72e45141bc9e608cc08a1242f6","modified":1664959968216},{"_id":"public/archives/2020/index.html","hash":"2d8b6705785ca11692d6b0b8f7c1e9de0be1b2f6","modified":1664959968216},{"_id":"public/archives/2020/page/2/index.html","hash":"ae65c1a41ea43a58e66a1f57e99837721dbd62b3","modified":1664959968216},{"_id":"public/archives/2020/01/index.html","hash":"03c7bc955ac03d4c9e1761d596f77d50d6f7d0eb","modified":1664959968216},{"_id":"public/archives/2020/03/index.html","hash":"9c5a50e6101115b32298a96a72fa65570f9ca623","modified":1664959968216},{"_id":"public/archives/2020/04/index.html","hash":"52f3d40aeedd5108fdac61dd41be18e90f862e1c","modified":1664959968216},{"_id":"public/archives/2020/06/index.html","hash":"9cfd4828472ef7fcd69432c174c5d157f2147566","modified":1664959968216},{"_id":"public/archives/2020/08/index.html","hash":"fab3d2ba793751baeed94d4fe6c7870ffdca705b","modified":1664959968216},{"_id":"public/archives/2020/09/index.html","hash":"1aadf79eddb95375356ef151d75d9ffc84e0a013","modified":1664959968216},{"_id":"public/archives/2021/index.html","hash":"a82ac3429519faf9f9800b52d71c063e5ecd9c44","modified":1664959968216},{"_id":"public/archives/2021/03/index.html","hash":"82aab08fab232523fef3d8db47c7380bdb79119d","modified":1664959968216},{"_id":"public/archives/2021/04/index.html","hash":"42051db39e1250a2a6bcc73d9481310d52512d6b","modified":1664959968216},{"_id":"public/archives/2021/05/index.html","hash":"567af9ec473368f7fdf0a099cdc8ea2ad70fe263","modified":1664959968216},{"_id":"public/archives/2021/09/index.html","hash":"c1875075d55fdea0cf0756ddae1cd9b49356e20e","modified":1664959968216},{"_id":"public/archives/2022/09/index.html","hash":"34b7d9d6e78f5c67307178c39cd296e094424145","modified":1664959968216},{"_id":"public/tags/weixin/index.html","hash":"b533583c628ec5114b3b882983a60df507610e36","modified":1664959968216},{"_id":"public/tags/cloudflare/index.html","hash":"44b3b28b3c5622a52cd66a0e37d5d4797f5f0cc9","modified":1664959968216},{"_id":"public/tags/workers/index.html","hash":"c4018f2c173d6ed5b8d0f080e2c851a87deed9b4","modified":1664959968216},{"_id":"public/tags/javascript/index.html","hash":"01a0a63c13489415c95a29070d0900db44e3f127","modified":1664959968216},{"_id":"public/tags/docker/index.html","hash":"de075084e62945da42b793b0f98111bc0b81c582","modified":1664959968216},{"_id":"public/tags/Tags/index.html","hash":"90e5cd66f765546a9f0b2053b153ea98dcce8b1f","modified":1664959968216},{"_id":"public/tags/frp/index.html","hash":"561e8255204a352d7aa0ecb90454e8aa265ce8d5","modified":1664959968216},{"_id":"public/tags/images/index.html","hash":"2630941ee48607fa7ce63298201151d3d0476687","modified":1664959968216},{"_id":"public/tags/Devexpress/index.html","hash":"3966f9a809d37be24746fec4884224b0e26cb8a2","modified":1664959968216},{"_id":"public/tags/Excel/index.html","hash":"3b049f9c25ed84278cba66c743161459fceced6c","modified":1664959968216},{"_id":"public/tags/winform/index.html","hash":"96b99cb0a44ae276ebdea13436c2e1c29f5004a2","modified":1664959968216},{"_id":"public/tags/Print/index.html","hash":"a59db935397dac0c1598376ca73560bf7f2b2ad5","modified":1664959968216},{"_id":"public/tags/Azure-Devops/index.html","hash":"dfd7f19581b3c2de85d12a04a8da849f53aa760c","modified":1664959968216},{"_id":"public/tags/mirror/index.html","hash":"1172dea3e513243380a784f7eaf9f9aa1efdc845","modified":1664959968216},{"_id":"public/tags/tag/index.html","hash":"be4065a6a83b8bdaf5c1b4402a482726897ab397","modified":1664959968216},{"_id":"public/tags/travis-ci/index.html","hash":"66f8e25a75d7908b26b6986b41a7dc46c29e0577","modified":1664959968216},{"_id":"public/tags/docker-images/index.html","hash":"37eebec3f936d1870454045109c4108dea50f786","modified":1664959968216},{"_id":"public/tags/nintendo/index.html","hash":"50d273bfcddc95583f0400aa19662ae29210f532","modified":1664959968216},{"_id":"public/tags/nintendo-switch-online/index.html","hash":"598891c483f9b1e06c3e2a267e025bb7d78597ca","modified":1664959968216},{"_id":"public/tags/fastreport/index.html","hash":"7f60ade9112cd4c855b2a73ef881e636d2817382","modified":1664959968216},{"_id":"public/tags/winfrom/index.html","hash":"740e63eaabf58b7d484c0a841444e4420db00253","modified":1664959968216},{"_id":"public/tags/Brackets/index.html","hash":"a71a175eb12830aba216d191021568bbb8ea5197","modified":1664959968216},{"_id":"public/tags/Debug/index.html","hash":"9cf71528df0edffacf49788d33790362e5ccb6c8","modified":1664959968216},{"_id":"public/tags/CommandLineUtils/index.html","hash":"9ae57e2a395a8f525c15512ae444ceab37479343","modified":1664959968216},{"_id":"public/tags/UnitTests/index.html","hash":"60f354deebfc9d7a6e973242bf8adfaa2172adf3","modified":1664959968216},{"_id":"public/tags/dotnet-tool/index.html","hash":"091b33ecd0454a09deebfc31542cdcca6a6f7c45","modified":1664959968216},{"_id":"public/tags/RDP/index.html","hash":"a3cd045e457cb6dc2161c2bd429d1d422bb17055","modified":1664959968216},{"_id":"public/tags/mstsc/index.html","hash":"554e6a62369bb195a12c5d95f6a145c9c29e828f","modified":1664959968216},{"_id":"public/tags/ip/index.html","hash":"7af1cac0b774749cfe6505cc3cf5f72535903ab4","modified":1664959968216},{"_id":"public/tags/Zxing-Net/index.html","hash":"1418976f25380a5ae3ea15ff6098e5f4956ed21b","modified":1664959968216},{"_id":"public/tags/PowerShell/index.html","hash":"4a6ceafa1a75733a4b085796d77754138bd81080","modified":1664959968216},{"_id":"public/tags/Transparent-background/index.html","hash":"8216509e2805ce49486619c06df7ac2927e3ef3c","modified":1664959968216},{"_id":"public/tags/透明背景/index.html","hash":"3a277947d7b4f293543e5486d9671cd94b93a4a0","modified":1664959968216},{"_id":"public/tags/艺术二维码/index.html","hash":"48c262b28e9230f799f252a5dcf3b8d03f1c7f9e","modified":1664959968216},{"_id":"public/tags/C/index.html","hash":"def10453c4f1a56bcf5a47f6c624807a0c987906","modified":1664959968216},{"_id":"public/tags/merlin/index.html","hash":"08eaecc04a062a6f7884fb6f745538fde140d978","modified":1664959968216},{"_id":"public/tags/CloudBase/index.html","hash":"0ab8281491eb6b492d73169c132de88c31f6503a","modified":1664959968216},{"_id":"public/tags/devexpress/index.html","hash":"17c7edfcaae994e6d3311146595e9ad8cbea3ead","modified":1664959968216},{"_id":"public/tags/report/index.html","hash":"d889d93259a855e57868e3a55b449c07619a40f9","modified":1664959968216},{"_id":"public/tags/XtraReport/index.html","hash":"2c9c84699a0c196809903e80ddfa05bde48cf31c","modified":1664959968216},{"_id":"public/tags/propertyGridControl/index.html","hash":"90053f6fec8c4979f9e96e00c10d1742817ce317","modified":1664959968216},{"_id":"public/tags/QR-code/index.html","hash":"4ba1f42df6a6b8be2fd903184a73ed45aac5b31a","modified":1664959968216},{"_id":"public/tags/propertyGrid/index.html","hash":"c4f276b25a6b50302620f03ba9a79414b22f8557","modified":1664959968216},{"_id":"public/tags/VerticalGrid/index.html","hash":"f381538219c05930e7c4d31825b0dbdca543daad","modified":1664959968216},{"_id":"public/2020/03/09/2020-03-09-官方支持，解决国内docker pull mcr.microsoft.com 镜像过慢的问题/index.html","hash":"6eba1e4c4889897fb7b791ecbd32b8c4b8f175d5","modified":1664959036599},{"_id":"public/2020/01/17/2020-01-17-无需VPS，使用重新打tag的方式，拉取、转存mcr.microsoft.com的镜像/index.html","hash":"d4898b74e9de3022e9fb6fbb16a344e77d2d7738","modified":1664959036599},{"_id":"public/2017/10/07/2017-10-7-Devexpress打印预览(PrintPreview)时修改打印数据/index.html","hash":"f9a5952b8a41c2f83a6c1c29645410660e3c7bd4","modified":1664959036599},{"_id":"public/2017/09/19/2017-09-19-Devexpress自定义导出(Export)选定行数据到Excel简易版/index.html","hash":"b4ab34533d6053847b9f4ea583377c66efce97c8","modified":1664959036599},{"_id":"public/page/2/index.html","hash":"53af6c62cc3a1018c0751eed57f05d8a37b9cadc","modified":1664959968216},{"_id":"public/page/3/index.html","hash":"6b44de0b71e4106b8e7352dd4c8fabdaba5104d0","modified":1664959968216},{"_id":"public/baidusitemap.xml","hash":"36a02c3e422983fa72955c87bfe3b381db319b57","modified":1664959968216},{"_id":"public/sitemap.xml","hash":"f3f0e502dbd60969b6d22d48b47c76abd267e4e0","modified":1664959968216},{"_id":"public/2022-09-21-任天堂各区最新实时会员价格/index.html","hash":"9d1c77a5ec8b3d40f7c2725b09f832974df46f11","modified":1664959968216},{"_id":"public/2022-07-22-使用非80端口部署微信公众号后台/index.html","hash":"53bcbaa26a932b6e9104d136c2d613fa81b48d7b","modified":1664959968216},{"_id":"public/2022-07-03-如何解决devextreme-angular错误typeError/index.html","hash":"06c015918ebdcb507bc4d8e4c384827856e72fe9","modified":1664959968216},{"_id":"public/2022-05-7-octopus_deploy_使用XML_配置变量功能设置nlog日志/index.html","hash":"b9993939d226f4a92c40b3d3c2cfed6ec9f5cb27","modified":1664959968216},{"_id":"public/2022-03-23-如何简单的启动一组dotnet服务(powershell)/index.html","hash":"ea71cb4da197ffd2a4dc165c2770b9cd37ec0851","modified":1664959968216},{"_id":"public/2021-09-29-devexpress如何隐藏PropertyGridControl中的编辑器(Editor)/index.html","hash":"a05ebdb911e229855bb1a14ad5b3452257c469b5","modified":1664959968216},{"_id":"public/2021-09-27-devexpress如何隐藏PropertyGridControl中的行/index.html","hash":"b20a2e251b32b9c4bf9d10e0881b5b964324610a","modified":1664959968216},{"_id":"public/2021-09-26-devexpress如何在PropertyGridControl中直接编辑集合成员 /index.html","hash":"05ab4bf8ee8e7b0c9a1d8dc3018f570ce7b0c4ec","modified":1664959968216},{"_id":"public/2021-09-24-devexpress如何使用PropertyGridControl编辑字典(Dictionary)/index.html","hash":"5133bab6f5df99685da0ffadcd37fc8ac25b6971","modified":1664959968216},{"_id":"public/2021-05-27-devexpress使用模板打印报表/index.html","hash":"ec58932ab0605d4f7bd5b8883628c0ffc70a948e","modified":1664959968216},{"_id":"public/2021-04-16-devexpress使用设计器编辑报表模板/index.html","hash":"29ab5812dba31ac1a444fbbf96b1373f6bdbc49f","modified":1664959968216},{"_id":"public/2021-03-18-fastreport每页显示固定行数/index.html","hash":"9d03125d5ca95a8ed08bb2281ed82696048401dd","modified":1664959968216},{"_id":"public/2020-09-05-通过路由器监控家中是否停电/index.html","hash":"72b73ac12b046f320be63544927960bd7082f585","modified":1664959968216},{"_id":"public/2020-08-05-使用Zxing.Net 创建透明背景艺术二维码/index.html","hash":"dca55bb026dec3a679d7dc0ba6e7f958a74afa4a","modified":1664959968216},{"_id":"public/2020-06-26-使用PowerShell查看使用RDP登录到远程服务器的客户端IP/index.html","hash":"7e921a7e60095ef47ebdd513d8fdcedb5f2ebc84","modified":1664959968216},{"_id":"public/文章待写目录/index.html","hash":"f16f610ea63a5521865584af1d7c9441bcb4b46b","modified":1664959968216},{"_id":"public/2020-04-10-查看mcr.microsoft.com中所有的Tag/index.html","hash":"11e6e89e8c21ea0596aa3e70e8c4b94aa93e4b45","modified":1664959968216},{"_id":"public/2020-04-6-单元测试CommandLineUtils中的命令/index.html","hash":"16b8b35fb9543a73f6bcc5aeb42e26df29530db4","modified":1664959968216},{"_id":"public/2020-03-16-fastreport查询系统变量总页数 Report.GetVariableValue(TotalPages)总是返回1/index.html","hash":"d94193ae770b45164a986633afbe321ea98db8fd","modified":1664959968216},{"_id":"public/2020-03-13-fastreport-debug 调试frx文件/index.html","hash":"72760c05469ebe9ac41d735c762474ed4a5cbbd3","modified":1664959968216},{"_id":"public/2020-03-12-fastreport显示带[] 方括号的文本/index.html","hash":"e45596ea96c4e76f91ee86b0e96c19fe8cfc5a98","modified":1664959968216},{"_id":"public/2020-03-09-官方支持，解决国内docker pull mcr.microsoft.com 镜像过慢的问题/index.html","hash":"c76f82352016ea504fcaaee2beaa86ef67369cec","modified":1664959968216},{"_id":"public/2020-01-17-无需VPS，使用重新打tag的方式，拉取、转存mcr.microsoft.com的镜像/index.html","hash":"7e86387db12f59f6883bceb45a10f5dcd9711a1b","modified":1664959968216},{"_id":"public/2017-10-7-Devexpress打印预览(PrintPreview)时修改打印数据/index.html","hash":"87f0548eab2c39167955e608e415d6eb8f15e369","modified":1664959968216},{"_id":"public/2017-09-19-Devexpress自定义导出(Export)选定行数据到Excel简易版/index.html","hash":"86b72be33957cf71da03b9d7aa51e07bf2f22989","modified":1664959968216}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2022-10-05T07:07:58.000Z","layout":"about","_content":"\nHey，我是 **王帅(WangShuai)** ，一只.NET程序猿，现在在南京工作。\n\n这是我的利用 [GitHub Pages](https://pages.github.com/) 与 [Hexo](https://github.com/iissnan/hexo-theme-next) 搭建的 个人博客\n\n\n\n##### Talks\n\n- [GitHub](https://github.com/)\n- [Hexo](https://github.com/iissnan/hexo-theme-next)\n- [Google Analytics](https://analytics.google.com/analytics)\n- [百度统计](https://tongji.baidu.com/)\n- [clarity](https://clarity.microsoft.com/)\n- [Submit URL](https://www.oukohou.wang/2018/11/01/sereral_search_engines_urls/)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-10-05 15:07:58\nlayout: about\n---\n\nHey，我是 **王帅(WangShuai)** ，一只.NET程序猿，现在在南京工作。\n\n这是我的利用 [GitHub Pages](https://pages.github.com/) 与 [Hexo](https://github.com/iissnan/hexo-theme-next) 搭建的 个人博客\n\n\n\n##### Talks\n\n- [GitHub](https://github.com/)\n- [Hexo](https://github.com/iissnan/hexo-theme-next)\n- [Google Analytics](https://analytics.google.com/analytics)\n- [百度统计](https://tongji.baidu.com/)\n- [clarity](https://clarity.microsoft.com/)\n- [Submit URL](https://www.oukohou.wang/2018/11/01/sereral_search_engines_urls/)\n","updated":"2022-10-05T08:28:50.722Z","path":"about/index.html","_id":"cl8vash8q0000jko22xe1eitw","comments":1,"content":"<p>Hey，我是 <strong>王帅(WangShuai)</strong> ，一只.NET程序猿，现在在南京工作。</p>\n<p>这是我的利用 <a href=\"https://pages.github.com/\">GitHub Pages</a> 与 <a href=\"https://github.com/iissnan/hexo-theme-next\">Hexo</a> 搭建的 个人博客</p>\n<h5 id=\"Talks\"><a href=\"#Talks\" class=\"headerlink\" title=\"Talks\"></a>Talks</h5><ul>\n<li><a href=\"https://github.com/\">GitHub</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">Hexo</a></li>\n<li><a href=\"https://analytics.google.com/analytics\">Google Analytics</a></li>\n<li><a href=\"https://tongji.baidu.com/\">百度统计</a></li>\n<li><a href=\"https://clarity.microsoft.com/\">clarity</a></li>\n<li><a href=\"https://www.oukohou.wang/2018/11/01/sereral_search_engines_urls/\">Submit URL</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Hey，我是 <strong>王帅(WangShuai)</strong> ，一只.NET程序猿，现在在南京工作。</p>\n<p>这是我的利用 <a href=\"https://pages.github.com/\">GitHub Pages</a> 与 <a href=\"https://github.com/iissnan/hexo-theme-next\">Hexo</a> 搭建的 个人博客</p>\n<h5 id=\"Talks\"><a href=\"#Talks\" class=\"headerlink\" title=\"Talks\"></a>Talks</h5><ul>\n<li><a href=\"https://github.com/\">GitHub</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">Hexo</a></li>\n<li><a href=\"https://analytics.google.com/analytics\">Google Analytics</a></li>\n<li><a href=\"https://tongji.baidu.com/\">百度统计</a></li>\n<li><a href=\"https://clarity.microsoft.com/\">clarity</a></li>\n<li><a href=\"https://www.oukohou.wang/2018/11/01/sereral_search_engines_urls/\">Submit URL</a></li>\n</ul>\n"},{"_content":"{\n \"name\": \"App\",\n \"icons\": [\n  {\n   \"src\": \"\\/android-icon-36x36.png\",\n   \"sizes\": \"36x36\",\n   \"type\": \"image\\/png\",\n   \"density\": \"0.75\"\n  },\n  {\n   \"src\": \"\\/android-icon-48x48.png\",\n   \"sizes\": \"48x48\",\n   \"type\": \"image\\/png\",\n   \"density\": \"1.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-72x72.png\",\n   \"sizes\": \"72x72\",\n   \"type\": \"image\\/png\",\n   \"density\": \"1.5\"\n  },\n  {\n   \"src\": \"\\/android-icon-96x96.png\",\n   \"sizes\": \"96x96\",\n   \"type\": \"image\\/png\",\n   \"density\": \"2.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-144x144.png\",\n   \"sizes\": \"144x144\",\n   \"type\": \"image\\/png\",\n   \"density\": \"3.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-192x192.png\",\n   \"sizes\": \"192x192\",\n   \"type\": \"image\\/png\",\n   \"density\": \"4.0\"\n  }\n ]\n}","source":"img/favicon/manifest.json","raw":"{\n \"name\": \"App\",\n \"icons\": [\n  {\n   \"src\": \"\\/android-icon-36x36.png\",\n   \"sizes\": \"36x36\",\n   \"type\": \"image\\/png\",\n   \"density\": \"0.75\"\n  },\n  {\n   \"src\": \"\\/android-icon-48x48.png\",\n   \"sizes\": \"48x48\",\n   \"type\": \"image\\/png\",\n   \"density\": \"1.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-72x72.png\",\n   \"sizes\": \"72x72\",\n   \"type\": \"image\\/png\",\n   \"density\": \"1.5\"\n  },\n  {\n   \"src\": \"\\/android-icon-96x96.png\",\n   \"sizes\": \"96x96\",\n   \"type\": \"image\\/png\",\n   \"density\": \"2.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-144x144.png\",\n   \"sizes\": \"144x144\",\n   \"type\": \"image\\/png\",\n   \"density\": \"3.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-192x192.png\",\n   \"sizes\": \"192x192\",\n   \"type\": \"image\\/png\",\n   \"density\": \"4.0\"\n  }\n ]\n}","date":"2022-09-21T06:06:07.225Z","updated":"2020-03-16T16:16:57.331Z","path":"img/favicon/manifest.json","layout":"false","_id":"cl8vdegnk0000qso27dis2zwd","title":"","comments":1,"content":"{\"name\":\"App\",\"icons\":[{\"src\":\"/android-icon-36x36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\",\"density\":\"0.75\"},{\"src\":\"/android-icon-48x48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\",\"density\":\"1.0\"},{\"src\":\"/android-icon-72x72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\",\"density\":\"1.5\"},{\"src\":\"/android-icon-96x96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\",\"density\":\"2.0\"},{\"src\":\"/android-icon-144x144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\",\"density\":\"3.0\"},{\"src\":\"/android-icon-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\",\"density\":\"4.0\"}]}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"App\",\"icons\":[{\"src\":\"/android-icon-36x36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\",\"density\":\"0.75\"},{\"src\":\"/android-icon-48x48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\",\"density\":\"1.0\"},{\"src\":\"/android-icon-72x72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\",\"density\":\"1.5\"},{\"src\":\"/android-icon-96x96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\",\"density\":\"2.0\"},{\"src\":\"/android-icon-144x144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\",\"density\":\"3.0\"},{\"src\":\"/android-icon-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\",\"density\":\"4.0\"}]}"}],"Post":[{"layout":"post","title":"如何简单的启动一组dotnet服务,powershell?","subtitle":"start a group dotnet server with powershell or tye","date":"2022-03-22T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\n\n我们知道使用`dotnet`命令可以方便的启动c#程序，假如我有一组相互关联的服务，一般在测试的时候可以打开多个visual studio启动新实例\n\n不过这只在需要调试它们的时候才有必要，一般也只需要分别在`bin\\debug`中启动命令就行\n\n每天写代码的时候都去启动这些服务未免有些麻烦,因此有了这篇文章.\n\n\n\n### 解决方案\n\n##### 复杂的解决方案\n\n要用命令行启动这些服务是要解决一些问题的,最关键的是状态检测;因为你直接用`dotnet`命令启动的是一个`dotnet`命令行窗口\n\n一旦有多个服务启动了,且每个服务有很多的日志你就不知道哪些服务没启动成功;下面放出我写的一个示例\n\n```powershell\n# 确保管理员权限运行脚本\nif (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\"))  \n{  \n  $arguments = \"& '\" +$myinvocation.mycommand.definition + \"'\"\n  Start-Process powershell -Verb runAs -ArgumentList $arguments\n  Break\n}\n\n$version=\"net5.0\"\n# 相对路径启动dll\n$dlls=@(\n    \"XXXX.XXXX\"\n    \"YYYY.YYYY\"\n)\n\n# $dlls | ForEach-Object { &()}\nfor ( $index = 0; $index -lt $dlls.count; $index++)\n{\n    # $path=\" $PSScriptRoot\\{0}\\bin\\Debug\\$version\\{0}.dll\" -f $dlls[$index]\n    $dllName=$dlls[$index];\n\n    $path=\" $PSScriptRoot\\{0}\\bin\\Debug\\$version\\\" -f $dllName\n\n    $cmd='cd '+ $path;\n    Invoke-Expression $cmd\n\n    $file=$path+$dllName+\".dll\"\n\n    cmd.exe /c \"start  \"\"$dllName\"\" powershell.exe -NoExit -Command  \"\"dotnet .\\$dllName.dll\"\"\"\n\n    \"$dllName execed\"\n}\n\n# 绝对路径启动dll\n$exes=@(\n    \"D:ZZZZ\\bin\\Debug\\$version\",\n    \"D:XXXX\\bin\\Debug\\$version\"\n)\nfor ( $index = 0; $index -lt $exes.count; $index++)\n{\n    # $path=\" $PSScriptRoot\\{0}\\bin\\Debug\\$version\\{0}.dll\" -f $dlls[$index]\n    $path=$exes[$index]\n\n    $cmd='cd '+ $exes[$index];\n    Invoke-Expression $cmd\n\n    $name=Get-ChildItem -filter *.exe -name\n    $name=[System.IO.Path]::GetFileNameWithoutExtension($name)\n    $file=$path+$name\n\n    cmd.exe /c \"start  \"\"$file\"\" powershell.exe -NoExit -Command  \"\"dotnet .\\$name.dll\"\"\"\n\n\n    \"$file execed\"\n}\n\n\"all server started.\"\n```\n\n这里还推荐使用[Seq](https://datalust.co/seq),方便在启用这些服务后查看日志。\n\n-------\n\n以上为文章原文：\n\n下面放出简单的解决方案：\n\n##### 简单的解决方案\n\n那就是[Tye](https://github.com/dotnet/tye)\n\n使用Tye,只需要:\n\n* 安装`tye`命令行工具\n\n ```powershell\n dotnet tool install -g Microsoft.Tye --version \"0.11.0-alpha.22111.1\"\n ```\n\n* 编写程序启动`yaml`配置文件\n\n```yaml\nname: servername\nservices:\n- name: identityService\n  project: .\\InterFace\\xxxx.IdentityService.csproj\n  build: false #不编译项目直接启动\n  bindings:\n  - port: 8080\n- name: xxxxService\n  project: .\\InterFace\\xxxxService.csproj\n  build: false\n  bindings:\n  - port: 8088  \n```\n\n* 使用`tye run D:\\test\\tye.yml`或直接使用`tye run`启动工具\n* 打开`localhost:8000`查看服务启动情况\n\n![tye dashboard](/img/tye_dashboard.png)\n\n现在,你的服务都由`tye`帮你接管了\n\n### 参考资料\n* [tye documentation](https://github.com/dotnet/tye/tree/main/docs)\n* [https://thecloudblog.net/post/distributed-tracing-in-asp.net-core-with-jaeger-and-tye-part-2-project-tye/](https://thecloudblog.net/post/distributed-tracing-in-asp.net-core-with-jaeger-and-tye-part-2-project-tye/)\n* [https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait](https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait)\n* [https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows](https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows)\n* [https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell](https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell)\n* [https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646](https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646)\n\n","source":"_posts/2022-03-23-如何简单的启动一组dotnet服务(powershell).md","raw":"---\nlayout:     post\ntitle:      如何简单的启动一组dotnet服务,powershell?\nsubtitle:   start a group dotnet server with powershell or tye\ndate:       2022-3-23\nauthor:     王帅\ncatalog: true\ntags:\n    - powershell\n    - server\n    - dotnet\n    - tye\ntypora-root-url: ..\n---\n\n### 引言\n\n我们知道使用`dotnet`命令可以方便的启动c#程序，假如我有一组相互关联的服务，一般在测试的时候可以打开多个visual studio启动新实例\n\n不过这只在需要调试它们的时候才有必要，一般也只需要分别在`bin\\debug`中启动命令就行\n\n每天写代码的时候都去启动这些服务未免有些麻烦,因此有了这篇文章.\n\n\n\n### 解决方案\n\n##### 复杂的解决方案\n\n要用命令行启动这些服务是要解决一些问题的,最关键的是状态检测;因为你直接用`dotnet`命令启动的是一个`dotnet`命令行窗口\n\n一旦有多个服务启动了,且每个服务有很多的日志你就不知道哪些服务没启动成功;下面放出我写的一个示例\n\n```powershell\n# 确保管理员权限运行脚本\nif (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\"))  \n{  \n  $arguments = \"& '\" +$myinvocation.mycommand.definition + \"'\"\n  Start-Process powershell -Verb runAs -ArgumentList $arguments\n  Break\n}\n\n$version=\"net5.0\"\n# 相对路径启动dll\n$dlls=@(\n    \"XXXX.XXXX\"\n    \"YYYY.YYYY\"\n)\n\n# $dlls | ForEach-Object { &()}\nfor ( $index = 0; $index -lt $dlls.count; $index++)\n{\n    # $path=\" $PSScriptRoot\\{0}\\bin\\Debug\\$version\\{0}.dll\" -f $dlls[$index]\n    $dllName=$dlls[$index];\n\n    $path=\" $PSScriptRoot\\{0}\\bin\\Debug\\$version\\\" -f $dllName\n\n    $cmd='cd '+ $path;\n    Invoke-Expression $cmd\n\n    $file=$path+$dllName+\".dll\"\n\n    cmd.exe /c \"start  \"\"$dllName\"\" powershell.exe -NoExit -Command  \"\"dotnet .\\$dllName.dll\"\"\"\n\n    \"$dllName execed\"\n}\n\n# 绝对路径启动dll\n$exes=@(\n    \"D:ZZZZ\\bin\\Debug\\$version\",\n    \"D:XXXX\\bin\\Debug\\$version\"\n)\nfor ( $index = 0; $index -lt $exes.count; $index++)\n{\n    # $path=\" $PSScriptRoot\\{0}\\bin\\Debug\\$version\\{0}.dll\" -f $dlls[$index]\n    $path=$exes[$index]\n\n    $cmd='cd '+ $exes[$index];\n    Invoke-Expression $cmd\n\n    $name=Get-ChildItem -filter *.exe -name\n    $name=[System.IO.Path]::GetFileNameWithoutExtension($name)\n    $file=$path+$name\n\n    cmd.exe /c \"start  \"\"$file\"\" powershell.exe -NoExit -Command  \"\"dotnet .\\$name.dll\"\"\"\n\n\n    \"$file execed\"\n}\n\n\"all server started.\"\n```\n\n这里还推荐使用[Seq](https://datalust.co/seq),方便在启用这些服务后查看日志。\n\n-------\n\n以上为文章原文：\n\n下面放出简单的解决方案：\n\n##### 简单的解决方案\n\n那就是[Tye](https://github.com/dotnet/tye)\n\n使用Tye,只需要:\n\n* 安装`tye`命令行工具\n\n ```powershell\n dotnet tool install -g Microsoft.Tye --version \"0.11.0-alpha.22111.1\"\n ```\n\n* 编写程序启动`yaml`配置文件\n\n```yaml\nname: servername\nservices:\n- name: identityService\n  project: .\\InterFace\\xxxx.IdentityService.csproj\n  build: false #不编译项目直接启动\n  bindings:\n  - port: 8080\n- name: xxxxService\n  project: .\\InterFace\\xxxxService.csproj\n  build: false\n  bindings:\n  - port: 8088  \n```\n\n* 使用`tye run D:\\test\\tye.yml`或直接使用`tye run`启动工具\n* 打开`localhost:8000`查看服务启动情况\n\n![tye dashboard](/img/tye_dashboard.png)\n\n现在,你的服务都由`tye`帮你接管了\n\n### 参考资料\n* [tye documentation](https://github.com/dotnet/tye/tree/main/docs)\n* [https://thecloudblog.net/post/distributed-tracing-in-asp.net-core-with-jaeger-and-tye-part-2-project-tye/](https://thecloudblog.net/post/distributed-tracing-in-asp.net-core-with-jaeger-and-tye-part-2-project-tye/)\n* [https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait](https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait)\n* [https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows](https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows)\n* [https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell](https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell)\n* [https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646](https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646)\n\n","slug":"2022-03-23-如何简单的启动一组dotnet服务(powershell)","published":1,"updated":"2022-05-19T12:47:56.603Z","comments":1,"photos":[],"link":"","_id":"cl8vash8v0001jko2e7925311","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>我们知道使用<code>dotnet</code>命令可以方便的启动c#程序，假如我有一组相互关联的服务，一般在测试的时候可以打开多个visual studio启动新实例</p>\n<p>不过这只在需要调试它们的时候才有必要，一般也只需要分别在<code>bin\\debug</code>中启动命令就行</p>\n<p>每天写代码的时候都去启动这些服务未免有些麻烦,因此有了这篇文章.</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h5 id=\"复杂的解决方案\"><a href=\"#复杂的解决方案\" class=\"headerlink\" title=\"复杂的解决方案\"></a>复杂的解决方案</h5><p>要用命令行启动这些服务是要解决一些问题的,最关键的是状态检测;因为你直接用<code>dotnet</code>命令启动的是一个<code>dotnet</code>命令行窗口</p>\n<p>一旦有多个服务启动了,且每个服务有很多的日志你就不知道哪些服务没启动成功;下面放出我写的一个示例</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\"># 确保管理员权限运行脚本</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-operator\">-NOT</span> ([<span class=\"hljs-type\">Security.Principal.WindowsPrincipal</span>][<span class=\"hljs-type\">Security.Principal.WindowsIdentity</span>]::GetCurrent()).IsInRole([<span class=\"hljs-type\">Security.Principal.WindowsBuiltInRole</span>] <span class=\"hljs-string\">&quot;Administrator&quot;</span>))  <br>&#123;  <br>  <span class=\"hljs-variable\">$arguments</span> = <span class=\"hljs-string\">&quot;&amp; &#x27;&quot;</span> +<span class=\"hljs-variable\">$myinvocation</span>.mycommand.definition + <span class=\"hljs-string\">&quot;&#x27;&quot;</span><br>  <span class=\"hljs-built_in\">Start-Process</span> powershell <span class=\"hljs-literal\">-Verb</span> runAs <span class=\"hljs-literal\">-ArgumentList</span> <span class=\"hljs-variable\">$arguments</span><br>  <span class=\"hljs-keyword\">Break</span><br>&#125;<br><br><span class=\"hljs-variable\">$version</span>=<span class=\"hljs-string\">&quot;net5.0&quot;</span><br><span class=\"hljs-comment\"># 相对路径启动dll</span><br><span class=\"hljs-variable\">$dlls</span>=<span class=\"hljs-selector-tag\">@</span>(<br>    <span class=\"hljs-string\">&quot;XXXX.XXXX&quot;</span><br>    <span class=\"hljs-string\">&quot;YYYY.YYYY&quot;</span><br>)<br><br><span class=\"hljs-comment\"># $dlls | ForEach-Object &#123; &amp;()&#125;</span><br><span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-variable\">$index</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$index</span> <span class=\"hljs-operator\">-lt</span> <span class=\"hljs-variable\">$dlls</span>.count; <span class=\"hljs-variable\">$index</span>++)<br>&#123;<br>    <span class=\"hljs-comment\"># $path=&quot; $PSScriptRoot\\&#123;0&#125;\\bin\\Debug\\$version\\&#123;0&#125;.dll&quot; -f $dlls[$index]</span><br>    <span class=\"hljs-variable\">$dllName</span>=<span class=\"hljs-variable\">$dlls</span>[<span class=\"hljs-variable\">$index</span>];<br><br>    <span class=\"hljs-variable\">$path</span>=<span class=\"hljs-string\">&quot; <span class=\"hljs-variable\">$PSScriptRoot</span>\\&#123;0&#125;\\bin\\Debug\\<span class=\"hljs-variable\">$version</span>\\&quot;</span> <span class=\"hljs-operator\">-f</span> <span class=\"hljs-variable\">$dllName</span><br><br>    <span class=\"hljs-variable\">$cmd</span>=<span class=\"hljs-string\">&#x27;cd &#x27;</span>+ <span class=\"hljs-variable\">$path</span>;<br>    <span class=\"hljs-built_in\">Invoke-Expression</span> <span class=\"hljs-variable\">$cmd</span><br><br>    <span class=\"hljs-variable\">$file</span>=<span class=\"hljs-variable\">$path</span>+<span class=\"hljs-variable\">$dllName</span>+<span class=\"hljs-string\">&quot;.dll&quot;</span><br><br>    cmd.exe /c <span class=\"hljs-string\">&quot;start  &quot;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$dllName</span>&quot;</span><span class=\"hljs-string\">&quot; powershell.exe -NoExit -Command  &quot;</span><span class=\"hljs-string\">&quot;dotnet .\\<span class=\"hljs-variable\">$dllName</span>.dll&quot;</span><span class=\"hljs-string\">&quot;&quot;</span><br><br>    <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$dllName</span> execed&quot;</span><br>&#125;<br><br><span class=\"hljs-comment\"># 绝对路径启动dll</span><br><span class=\"hljs-variable\">$exes</span>=<span class=\"hljs-selector-tag\">@</span>(<br>    <span class=\"hljs-string\">&quot;D:ZZZZ\\bin\\Debug\\<span class=\"hljs-variable\">$version</span>&quot;</span>,<br>    <span class=\"hljs-string\">&quot;D:XXXX\\bin\\Debug\\<span class=\"hljs-variable\">$version</span>&quot;</span><br>)<br><span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-variable\">$index</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$index</span> <span class=\"hljs-operator\">-lt</span> <span class=\"hljs-variable\">$exes</span>.count; <span class=\"hljs-variable\">$index</span>++)<br>&#123;<br>    <span class=\"hljs-comment\"># $path=&quot; $PSScriptRoot\\&#123;0&#125;\\bin\\Debug\\$version\\&#123;0&#125;.dll&quot; -f $dlls[$index]</span><br>    <span class=\"hljs-variable\">$path</span>=<span class=\"hljs-variable\">$exes</span>[<span class=\"hljs-variable\">$index</span>]<br><br>    <span class=\"hljs-variable\">$cmd</span>=<span class=\"hljs-string\">&#x27;cd &#x27;</span>+ <span class=\"hljs-variable\">$exes</span>[<span class=\"hljs-variable\">$index</span>];<br>    <span class=\"hljs-built_in\">Invoke-Expression</span> <span class=\"hljs-variable\">$cmd</span><br><br>    <span class=\"hljs-variable\">$name</span>=<span class=\"hljs-built_in\">Get-ChildItem</span> <span class=\"hljs-literal\">-filter</span> *.exe <span class=\"hljs-literal\">-name</span><br>    <span class=\"hljs-variable\">$name</span>=[<span class=\"hljs-type\">System.IO.Path</span>]::GetFileNameWithoutExtension(<span class=\"hljs-variable\">$name</span>)<br>    <span class=\"hljs-variable\">$file</span>=<span class=\"hljs-variable\">$path</span>+<span class=\"hljs-variable\">$name</span><br><br>    cmd.exe /c <span class=\"hljs-string\">&quot;start  &quot;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span>&quot;</span><span class=\"hljs-string\">&quot; powershell.exe -NoExit -Command  &quot;</span><span class=\"hljs-string\">&quot;dotnet .\\<span class=\"hljs-variable\">$name</span>.dll&quot;</span><span class=\"hljs-string\">&quot;&quot;</span><br><br><br>    <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span> execed&quot;</span><br>&#125;<br><br><span class=\"hljs-string\">&quot;all server started.&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>这里还推荐使用<a href=\"https://datalust.co/seq\">Seq</a>,方便在启用这些服务后查看日志。</p>\n<hr>\n<p>以上为文章原文：</p>\n<p>下面放出简单的解决方案：</p>\n<h5 id=\"简单的解决方案\"><a href=\"#简单的解决方案\" class=\"headerlink\" title=\"简单的解决方案\"></a>简单的解决方案</h5><p>那就是<a href=\"https://github.com/dotnet/tye\">Tye</a></p>\n<p>使用Tye,只需要:</p>\n<ul>\n<li>安装<code>tye</code>命令行工具</li>\n</ul>\n <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">dotnet tool install <span class=\"hljs-literal\">-g</span> Microsoft.Tye <span class=\"hljs-literal\">--version</span> <span class=\"hljs-string\">&quot;0.11.0-alpha.22111.1&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>编写程序启动<code>yaml</code>配置文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">servername</span><br><span class=\"hljs-attr\">services:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">identityService</span><br>  <span class=\"hljs-attr\">project:</span> <span class=\"hljs-string\">.\\InterFace\\xxxx.IdentityService.csproj</span><br>  <span class=\"hljs-attr\">build:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">#不编译项目直接启动</span><br>  <span class=\"hljs-attr\">bindings:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8080</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxxxService</span><br>  <span class=\"hljs-attr\">project:</span> <span class=\"hljs-string\">.\\InterFace\\xxxxService.csproj</span><br>  <span class=\"hljs-attr\">build:</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">bindings:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8088</span>  <br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>tye run D:\\test\\tye.yml</code>或直接使用<code>tye run</code>启动工具</li>\n<li>打开<code>localhost:8000</code>查看服务启动情况</li>\n</ul>\n<p><img src=\"/img/tye_dashboard.png\" alt=\"tye dashboard\"></p>\n<p>现在,你的服务都由<code>tye</code>帮你接管了</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/dotnet/tye/tree/main/docs\">tye documentation</a></li>\n<li><a href=\"https://thecloudblog.net/post/distributed-tracing-in-asp.net-core-with-jaeger-and-tye-part-2-project-tye/\">https://thecloudblog.net/post/distributed-tracing-in-asp.net-core-with-jaeger-and-tye-part-2-project-tye/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait\">https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows\">https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell\">https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell</a></li>\n<li><a href=\"https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646\">https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>我们知道使用<code>dotnet</code>命令可以方便的启动c#程序，假如我有一组相互关联的服务，一般在测试的时候可以打开多个visual studio启动新实例</p>\n<p>不过这只在需要调试它们的时候才有必要，一般也只需要分别在<code>bin\\debug</code>中启动命令就行</p>\n<p>每天写代码的时候都去启动这些服务未免有些麻烦,因此有了这篇文章.</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h5 id=\"复杂的解决方案\"><a href=\"#复杂的解决方案\" class=\"headerlink\" title=\"复杂的解决方案\"></a>复杂的解决方案</h5><p>要用命令行启动这些服务是要解决一些问题的,最关键的是状态检测;因为你直接用<code>dotnet</code>命令启动的是一个<code>dotnet</code>命令行窗口</p>\n<p>一旦有多个服务启动了,且每个服务有很多的日志你就不知道哪些服务没启动成功;下面放出我写的一个示例</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\"># 确保管理员权限运行脚本</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-operator\">-NOT</span> ([<span class=\"hljs-type\">Security.Principal.WindowsPrincipal</span>][<span class=\"hljs-type\">Security.Principal.WindowsIdentity</span>]::GetCurrent()).IsInRole([<span class=\"hljs-type\">Security.Principal.WindowsBuiltInRole</span>] <span class=\"hljs-string\">&quot;Administrator&quot;</span>))  <br>&#123;  <br>  <span class=\"hljs-variable\">$arguments</span> = <span class=\"hljs-string\">&quot;&amp; &#x27;&quot;</span> +<span class=\"hljs-variable\">$myinvocation</span>.mycommand.definition + <span class=\"hljs-string\">&quot;&#x27;&quot;</span><br>  <span class=\"hljs-built_in\">Start-Process</span> powershell <span class=\"hljs-literal\">-Verb</span> runAs <span class=\"hljs-literal\">-ArgumentList</span> <span class=\"hljs-variable\">$arguments</span><br>  <span class=\"hljs-keyword\">Break</span><br>&#125;<br><br><span class=\"hljs-variable\">$version</span>=<span class=\"hljs-string\">&quot;net5.0&quot;</span><br><span class=\"hljs-comment\"># 相对路径启动dll</span><br><span class=\"hljs-variable\">$dlls</span>=<span class=\"hljs-selector-tag\">@</span>(<br>    <span class=\"hljs-string\">&quot;XXXX.XXXX&quot;</span><br>    <span class=\"hljs-string\">&quot;YYYY.YYYY&quot;</span><br>)<br><br><span class=\"hljs-comment\"># $dlls | ForEach-Object &#123; &amp;()&#125;</span><br><span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-variable\">$index</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$index</span> <span class=\"hljs-operator\">-lt</span> <span class=\"hljs-variable\">$dlls</span>.count; <span class=\"hljs-variable\">$index</span>++)<br>&#123;<br>    <span class=\"hljs-comment\"># $path=&quot; $PSScriptRoot\\&#123;0&#125;\\bin\\Debug\\$version\\&#123;0&#125;.dll&quot; -f $dlls[$index]</span><br>    <span class=\"hljs-variable\">$dllName</span>=<span class=\"hljs-variable\">$dlls</span>[<span class=\"hljs-variable\">$index</span>];<br><br>    <span class=\"hljs-variable\">$path</span>=<span class=\"hljs-string\">&quot; <span class=\"hljs-variable\">$PSScriptRoot</span>\\&#123;0&#125;\\bin\\Debug\\<span class=\"hljs-variable\">$version</span>\\&quot;</span> <span class=\"hljs-operator\">-f</span> <span class=\"hljs-variable\">$dllName</span><br><br>    <span class=\"hljs-variable\">$cmd</span>=<span class=\"hljs-string\">&#x27;cd &#x27;</span>+ <span class=\"hljs-variable\">$path</span>;<br>    <span class=\"hljs-built_in\">Invoke-Expression</span> <span class=\"hljs-variable\">$cmd</span><br><br>    <span class=\"hljs-variable\">$file</span>=<span class=\"hljs-variable\">$path</span>+<span class=\"hljs-variable\">$dllName</span>+<span class=\"hljs-string\">&quot;.dll&quot;</span><br><br>    cmd.exe /c <span class=\"hljs-string\">&quot;start  &quot;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$dllName</span>&quot;</span><span class=\"hljs-string\">&quot; powershell.exe -NoExit -Command  &quot;</span><span class=\"hljs-string\">&quot;dotnet .\\<span class=\"hljs-variable\">$dllName</span>.dll&quot;</span><span class=\"hljs-string\">&quot;&quot;</span><br><br>    <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$dllName</span> execed&quot;</span><br>&#125;<br><br><span class=\"hljs-comment\"># 绝对路径启动dll</span><br><span class=\"hljs-variable\">$exes</span>=<span class=\"hljs-selector-tag\">@</span>(<br>    <span class=\"hljs-string\">&quot;D:ZZZZ\\bin\\Debug\\<span class=\"hljs-variable\">$version</span>&quot;</span>,<br>    <span class=\"hljs-string\">&quot;D:XXXX\\bin\\Debug\\<span class=\"hljs-variable\">$version</span>&quot;</span><br>)<br><span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-variable\">$index</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$index</span> <span class=\"hljs-operator\">-lt</span> <span class=\"hljs-variable\">$exes</span>.count; <span class=\"hljs-variable\">$index</span>++)<br>&#123;<br>    <span class=\"hljs-comment\"># $path=&quot; $PSScriptRoot\\&#123;0&#125;\\bin\\Debug\\$version\\&#123;0&#125;.dll&quot; -f $dlls[$index]</span><br>    <span class=\"hljs-variable\">$path</span>=<span class=\"hljs-variable\">$exes</span>[<span class=\"hljs-variable\">$index</span>]<br><br>    <span class=\"hljs-variable\">$cmd</span>=<span class=\"hljs-string\">&#x27;cd &#x27;</span>+ <span class=\"hljs-variable\">$exes</span>[<span class=\"hljs-variable\">$index</span>];<br>    <span class=\"hljs-built_in\">Invoke-Expression</span> <span class=\"hljs-variable\">$cmd</span><br><br>    <span class=\"hljs-variable\">$name</span>=<span class=\"hljs-built_in\">Get-ChildItem</span> <span class=\"hljs-literal\">-filter</span> *.exe <span class=\"hljs-literal\">-name</span><br>    <span class=\"hljs-variable\">$name</span>=[<span class=\"hljs-type\">System.IO.Path</span>]::GetFileNameWithoutExtension(<span class=\"hljs-variable\">$name</span>)<br>    <span class=\"hljs-variable\">$file</span>=<span class=\"hljs-variable\">$path</span>+<span class=\"hljs-variable\">$name</span><br><br>    cmd.exe /c <span class=\"hljs-string\">&quot;start  &quot;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span>&quot;</span><span class=\"hljs-string\">&quot; powershell.exe -NoExit -Command  &quot;</span><span class=\"hljs-string\">&quot;dotnet .\\<span class=\"hljs-variable\">$name</span>.dll&quot;</span><span class=\"hljs-string\">&quot;&quot;</span><br><br><br>    <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span> execed&quot;</span><br>&#125;<br><br><span class=\"hljs-string\">&quot;all server started.&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>这里还推荐使用<a href=\"https://datalust.co/seq\">Seq</a>,方便在启用这些服务后查看日志。</p>\n<hr>\n<p>以上为文章原文：</p>\n<p>下面放出简单的解决方案：</p>\n<h5 id=\"简单的解决方案\"><a href=\"#简单的解决方案\" class=\"headerlink\" title=\"简单的解决方案\"></a>简单的解决方案</h5><p>那就是<a href=\"https://github.com/dotnet/tye\">Tye</a></p>\n<p>使用Tye,只需要:</p>\n<ul>\n<li>安装<code>tye</code>命令行工具</li>\n</ul>\n <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">dotnet tool install <span class=\"hljs-literal\">-g</span> Microsoft.Tye <span class=\"hljs-literal\">--version</span> <span class=\"hljs-string\">&quot;0.11.0-alpha.22111.1&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>编写程序启动<code>yaml</code>配置文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">servername</span><br><span class=\"hljs-attr\">services:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">identityService</span><br>  <span class=\"hljs-attr\">project:</span> <span class=\"hljs-string\">.\\InterFace\\xxxx.IdentityService.csproj</span><br>  <span class=\"hljs-attr\">build:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">#不编译项目直接启动</span><br>  <span class=\"hljs-attr\">bindings:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8080</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxxxService</span><br>  <span class=\"hljs-attr\">project:</span> <span class=\"hljs-string\">.\\InterFace\\xxxxService.csproj</span><br>  <span class=\"hljs-attr\">build:</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">bindings:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8088</span>  <br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>tye run D:\\test\\tye.yml</code>或直接使用<code>tye run</code>启动工具</li>\n<li>打开<code>localhost:8000</code>查看服务启动情况</li>\n</ul>\n<p><img src=\"/img/tye_dashboard.png\" alt=\"tye dashboard\"></p>\n<p>现在,你的服务都由<code>tye</code>帮你接管了</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/dotnet/tye/tree/main/docs\">tye documentation</a></li>\n<li><a href=\"https://thecloudblog.net/post/distributed-tracing-in-asp.net-core-with-jaeger-and-tye-part-2-project-tye/\">https://thecloudblog.net/post/distributed-tracing-in-asp.net-core-with-jaeger-and-tye-part-2-project-tye/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait\">https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows\">https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell\">https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell</a></li>\n<li><a href=\"https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646\">https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646</a></li>\n</ul>\n"},{"layout":"post","title":"octopus deploy 使用XML 配置变量功能设置nlog日志","subtitle":"octopus deploy use XML configuration variables feature set nlog config file","date":"2022-05-06T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\n\n项目中使用了`nlog`记录日志,现在运行的项目太多了;日志也太多\n\n线上环境出现问题后经常需要到不同的服务器上查看各种日志,而且传统的文件日志方式很不便于查找问题,因此考虑使用[Seq — centralized structured logs](https://datalust.co/seq)\n\n\n\n要以无侵入的方式启用线上环境的日志功能，就需要在发布工具`octopus`上做文章了.\n\n\n\n恰好`octopus`也提供了相应的设置功能`Configuration transforms`和`Substitute Variables in Files`\n\n\n\n本人所用`octopus`版本为`v2018.1.5`新版本可能操作略有不同,但功能肯定已包含\n\n### 解决方案\n\n* 添加`nlog`配置参数\n\n在`Library`→`Variable Sets`中添加一组参数集(此处为`Seq日志全局设置`)\n\n![octopus_add_variableSets](/img/octopus_add_variableSets)\n\n* 为项目添加新建的参数集\n\n在`Projets`→`Variables`→`Library Sets`中添加刚刚创建的参数集\n\n![octopus_use_variableSets](/img/octopus_use_variableSets.png)\n\n* \n\n### 参考资料\n* [https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait](https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait)\n* [https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows](https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows)\n* [https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell](https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell)\n* [https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646](https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646)\n\n","source":"_posts/2022-05-7-octopus_deploy_使用XML_配置变量功能设置nlog日志.md","raw":"---\nlayout:     post\ntitle:      octopus deploy 使用XML 配置变量功能设置nlog日志\nsubtitle:   octopus deploy use XML configuration variables feature set nlog config file\ndate:       2022-5-7\nauthor:     王帅\ncatalog: true\ntags:\n    - octopus\n    - nlog\n    - config\n    - xml\ntypora-root-url: ..\n---\n\n### 引言\n\n项目中使用了`nlog`记录日志,现在运行的项目太多了;日志也太多\n\n线上环境出现问题后经常需要到不同的服务器上查看各种日志,而且传统的文件日志方式很不便于查找问题,因此考虑使用[Seq — centralized structured logs](https://datalust.co/seq)\n\n\n\n要以无侵入的方式启用线上环境的日志功能，就需要在发布工具`octopus`上做文章了.\n\n\n\n恰好`octopus`也提供了相应的设置功能`Configuration transforms`和`Substitute Variables in Files`\n\n\n\n本人所用`octopus`版本为`v2018.1.5`新版本可能操作略有不同,但功能肯定已包含\n\n### 解决方案\n\n* 添加`nlog`配置参数\n\n在`Library`→`Variable Sets`中添加一组参数集(此处为`Seq日志全局设置`)\n\n![octopus_add_variableSets](/img/octopus_add_variableSets)\n\n* 为项目添加新建的参数集\n\n在`Projets`→`Variables`→`Library Sets`中添加刚刚创建的参数集\n\n![octopus_use_variableSets](/img/octopus_use_variableSets.png)\n\n* \n\n### 参考资料\n* [https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait](https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait)\n* [https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows](https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows)\n* [https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell](https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell)\n* [https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646](https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646)\n\n","slug":"2022-05-7-octopus_deploy_使用XML_配置变量功能设置nlog日志","published":1,"updated":"2022-05-19T13:01:56.083Z","comments":1,"photos":[],"link":"","_id":"cl8vash9d0002jko24i8m13jh","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>项目中使用了<code>nlog</code>记录日志,现在运行的项目太多了;日志也太多</p>\n<p>线上环境出现问题后经常需要到不同的服务器上查看各种日志,而且传统的文件日志方式很不便于查找问题,因此考虑使用<a href=\"https://datalust.co/seq\">Seq — centralized structured logs</a></p>\n<p>要以无侵入的方式启用线上环境的日志功能，就需要在发布工具<code>octopus</code>上做文章了.</p>\n<p>恰好<code>octopus</code>也提供了相应的设置功能<code>Configuration transforms</code>和<code>Substitute Variables in Files</code></p>\n<p>本人所用<code>octopus</code>版本为<code>v2018.1.5</code>新版本可能操作略有不同,但功能肯定已包含</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ul>\n<li>添加<code>nlog</code>配置参数</li>\n</ul>\n<p>在<code>Library</code>→<code>Variable Sets</code>中添加一组参数集(此处为<code>Seq日志全局设置</code>)</p>\n<p><img src=\"/img/octopus_add_variableSets\" alt=\"octopus_add_variableSets\"></p>\n<ul>\n<li>为项目添加新建的参数集</li>\n</ul>\n<p>在<code>Projets</code>→<code>Variables</code>→<code>Library Sets</code>中添加刚刚创建的参数集</p>\n<p><img src=\"/img/octopus_use_variableSets.png\" alt=\"octopus_use_variableSets\"></p>\n<ul>\n<li></li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait\">https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows\">https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell\">https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell</a></li>\n<li><a href=\"https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646\">https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>项目中使用了<code>nlog</code>记录日志,现在运行的项目太多了;日志也太多</p>\n<p>线上环境出现问题后经常需要到不同的服务器上查看各种日志,而且传统的文件日志方式很不便于查找问题,因此考虑使用<a href=\"https://datalust.co/seq\">Seq — centralized structured logs</a></p>\n<p>要以无侵入的方式启用线上环境的日志功能，就需要在发布工具<code>octopus</code>上做文章了.</p>\n<p>恰好<code>octopus</code>也提供了相应的设置功能<code>Configuration transforms</code>和<code>Substitute Variables in Files</code></p>\n<p>本人所用<code>octopus</code>版本为<code>v2018.1.5</code>新版本可能操作略有不同,但功能肯定已包含</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ul>\n<li>添加<code>nlog</code>配置参数</li>\n</ul>\n<p>在<code>Library</code>→<code>Variable Sets</code>中添加一组参数集(此处为<code>Seq日志全局设置</code>)</p>\n<p><img src=\"/img/octopus_add_variableSets\" alt=\"octopus_add_variableSets\"></p>\n<ul>\n<li>为项目添加新建的参数集</li>\n</ul>\n<p>在<code>Projets</code>→<code>Variables</code>→<code>Library Sets</code>中添加刚刚创建的参数集</p>\n<p><img src=\"/img/octopus_use_variableSets.png\" alt=\"octopus_use_variableSets\"></p>\n<ul>\n<li></li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait\">https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows\">https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell\">https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell</a></li>\n<li><a href=\"https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646\">https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646</a></li>\n</ul>\n"},{"layout":"post","title":"如何解决devextreme_angular错误TypeError_Cannot_assign_to_read_only_property_name_of_function_data","subtitle":"fix devextreme TypeError  Cannot assign to read only property 'name' of function data","date":"2022-07-02T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\n\n最近使用`devextreme`动态绑定`grid`数据的时候遇到一个异常\n\n```js\ncore.mjs:6494 ERROR TypeError: Cannot assign to read only property 'name' of function 'data => {\n                    var isCacheUpdated = storeData && storeData !== this._cachedStoreData;\n        ...<omitted>... }'\n    at inheritor.setName (ui.grid_core.columns_controller.js:1920:1)\n    at createColumn (ui.grid_core.columns_controller.js:133:1)\n    at Function.<anonymous> (ui.grid_core.columns_controller.js:169:1)\n    at each (iterator.js:25:1)\n    at createColumnsFromOptions (ui.grid_core.columns_controller.js:167:25)\n    at inheritor.updateSortingGrouping (ui.grid_core.columns_controller.js:1758:1)\n    at inheritor.updateColumns (ui.grid_core.columns_controller.js:1682:1)\n    at inheritor.applyDataSource (ui.grid_core.columns_controller.js:950:1)\n    at inheritor._handleDataChanged (ui.grid_core.data_controller.js:320:29)\n    at inheritor._handleDataChanged (ui.grid_core.selection.js:511:1)\n```\n\n\n\n但本地测试的时候确实正常,只有发布后才有这个错误\n\n![image-20220703105032197](/img/devextreme_assign_to_readonly_property.png)\n\n进一步研究之后确定是数据加载过程的问题,本地测试时数据用的静态的;加载瞬间完成,从服务器取数据后绑定列延后了导致报错\n\n只要给本地测试数据添加延迟就能复现问题\n\n`return of(dataTemp).pipe(delay(3000));`\n\n### 解决方案\n\n解决方法就是动态列的创建放在数据取完之后\n\n```ts\n  constructor(private service: Service) {\n          this.service.getdata().subscribe(data => {              \n            \t    this.columns.push(<Column>{ isBand: true, caption: xxx,columns:listmidcol });//先创建列\n                    this.dataGrid.instance.option('dataSource',data);//再绑定数据\n          }\n  }\n```\n\n### 参考资料\n无\n","source":"_posts/2022-07-03-如何解决devextreme-angular错误typeError.md","raw":"---\nlayout:     post\ntitle:      如何解决devextreme_angular错误TypeError_Cannot_assign_to_read_only_property_name_of_function_data\nsubtitle:   fix devextreme TypeError  Cannot assign to read only property 'name' of function data\ndate:       2022-7-3\nauthor:     王帅\ncatalog: true\ntags:\n    - devextreme\n    - angular\ntypora-root-url: ..\n---\n\n### 引言\n\n最近使用`devextreme`动态绑定`grid`数据的时候遇到一个异常\n\n```js\ncore.mjs:6494 ERROR TypeError: Cannot assign to read only property 'name' of function 'data => {\n                    var isCacheUpdated = storeData && storeData !== this._cachedStoreData;\n        ...<omitted>... }'\n    at inheritor.setName (ui.grid_core.columns_controller.js:1920:1)\n    at createColumn (ui.grid_core.columns_controller.js:133:1)\n    at Function.<anonymous> (ui.grid_core.columns_controller.js:169:1)\n    at each (iterator.js:25:1)\n    at createColumnsFromOptions (ui.grid_core.columns_controller.js:167:25)\n    at inheritor.updateSortingGrouping (ui.grid_core.columns_controller.js:1758:1)\n    at inheritor.updateColumns (ui.grid_core.columns_controller.js:1682:1)\n    at inheritor.applyDataSource (ui.grid_core.columns_controller.js:950:1)\n    at inheritor._handleDataChanged (ui.grid_core.data_controller.js:320:29)\n    at inheritor._handleDataChanged (ui.grid_core.selection.js:511:1)\n```\n\n\n\n但本地测试的时候确实正常,只有发布后才有这个错误\n\n![image-20220703105032197](/img/devextreme_assign_to_readonly_property.png)\n\n进一步研究之后确定是数据加载过程的问题,本地测试时数据用的静态的;加载瞬间完成,从服务器取数据后绑定列延后了导致报错\n\n只要给本地测试数据添加延迟就能复现问题\n\n`return of(dataTemp).pipe(delay(3000));`\n\n### 解决方案\n\n解决方法就是动态列的创建放在数据取完之后\n\n```ts\n  constructor(private service: Service) {\n          this.service.getdata().subscribe(data => {              \n            \t    this.columns.push(<Column>{ isBand: true, caption: xxx,columns:listmidcol });//先创建列\n                    this.dataGrid.instance.option('dataSource',data);//再绑定数据\n          }\n  }\n```\n\n### 参考资料\n无\n","slug":"2022-07-03-如何解决devextreme-angular错误typeError","published":1,"updated":"2022-10-05T07:21:34.239Z","comments":1,"photos":[],"link":"","_id":"cl8vaxdua00005oo20b71djcs","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>最近使用<code>devextreme</code>动态绑定<code>grid</code>数据的时候遇到一个异常</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">core.<span class=\"hljs-property\">mjs</span>:<span class=\"hljs-number\">6494</span> <span class=\"hljs-variable constant_\">ERROR</span> <span class=\"hljs-title class_\">TypeError</span>: <span class=\"hljs-title class_\">Cannot</span> assign to read only property <span class=\"hljs-string\">&#x27;name&#x27;</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-string\">&#x27;data =&gt; &#123;</span><br><span class=\"hljs-string\">                    var isCacheUpdated = storeData &amp;&amp; storeData !== this._cachedStoreData;</span><br><span class=\"hljs-string\">        ...&lt;omitted&gt;... &#125;&#x27;</span><br>    at inheritor.<span class=\"hljs-property\">setName</span> (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">1920</span>:<span class=\"hljs-number\">1</span>)<br>    at createColumn (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">133</span>:<span class=\"hljs-number\">1</span>)<br>    at <span class=\"hljs-title class_\">Function</span>.&lt;anonymous&gt; (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">169</span>:<span class=\"hljs-number\">1</span>)<br>    at each (iterator.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">25</span>:<span class=\"hljs-number\">1</span>)<br>    at createColumnsFromOptions (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">167</span>:<span class=\"hljs-number\">25</span>)<br>    at inheritor.<span class=\"hljs-property\">updateSortingGrouping</span> (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">1758</span>:<span class=\"hljs-number\">1</span>)<br>    at inheritor.<span class=\"hljs-property\">updateColumns</span> (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">1682</span>:<span class=\"hljs-number\">1</span>)<br>    at inheritor.<span class=\"hljs-property\">applyDataSource</span> (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">950</span>:<span class=\"hljs-number\">1</span>)<br>    at inheritor.<span class=\"hljs-property\">_handleDataChanged</span> (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">data_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">320</span>:<span class=\"hljs-number\">29</span>)<br>    at inheritor.<span class=\"hljs-property\">_handleDataChanged</span> (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">selection</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">511</span>:<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>但本地测试的时候确实正常,只有发布后才有这个错误</p>\n<p><img src=\"/img/devextreme_assign_to_readonly_property.png\" alt=\"image-20220703105032197\"></p>\n<p>进一步研究之后确定是数据加载过程的问题,本地测试时数据用的静态的;加载瞬间完成,从服务器取数据后绑定列延后了导致报错</p>\n<p>只要给本地测试数据添加延迟就能复现问题</p>\n<p><code>return of(dataTemp).pipe(delay(3000));</code></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>解决方法就是动态列的创建放在数据取完之后</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> service: Service</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">service</span>.<span class=\"hljs-title function_\">getdata</span>().<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;              <br>          \t    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">columns</span>.<span class=\"hljs-title function_\">push</span>(&lt;<span class=\"hljs-title class_\">Column</span>&gt;&#123; <span class=\"hljs-attr\">isBand</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">caption</span>: xxx,<span class=\"hljs-attr\">columns</span>:listmidcol &#125;);<span class=\"hljs-comment\">//先创建列</span><br>                  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dataGrid</span>.<span class=\"hljs-property\">instance</span>.<span class=\"hljs-title function_\">option</span>(<span class=\"hljs-string\">&#x27;dataSource&#x27;</span>,data);<span class=\"hljs-comment\">//再绑定数据</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>无</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>最近使用<code>devextreme</code>动态绑定<code>grid</code>数据的时候遇到一个异常</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">core.<span class=\"hljs-property\">mjs</span>:<span class=\"hljs-number\">6494</span> <span class=\"hljs-variable constant_\">ERROR</span> <span class=\"hljs-title class_\">TypeError</span>: <span class=\"hljs-title class_\">Cannot</span> assign to read only property <span class=\"hljs-string\">&#x27;name&#x27;</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-string\">&#x27;data =&gt; &#123;</span><br><span class=\"hljs-string\">                    var isCacheUpdated = storeData &amp;&amp; storeData !== this._cachedStoreData;</span><br><span class=\"hljs-string\">        ...&lt;omitted&gt;... &#125;&#x27;</span><br>    at inheritor.<span class=\"hljs-property\">setName</span> (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">1920</span>:<span class=\"hljs-number\">1</span>)<br>    at createColumn (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">133</span>:<span class=\"hljs-number\">1</span>)<br>    at <span class=\"hljs-title class_\">Function</span>.&lt;anonymous&gt; (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">169</span>:<span class=\"hljs-number\">1</span>)<br>    at each (iterator.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">25</span>:<span class=\"hljs-number\">1</span>)<br>    at createColumnsFromOptions (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">167</span>:<span class=\"hljs-number\">25</span>)<br>    at inheritor.<span class=\"hljs-property\">updateSortingGrouping</span> (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">1758</span>:<span class=\"hljs-number\">1</span>)<br>    at inheritor.<span class=\"hljs-property\">updateColumns</span> (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">1682</span>:<span class=\"hljs-number\">1</span>)<br>    at inheritor.<span class=\"hljs-property\">applyDataSource</span> (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">columns_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">950</span>:<span class=\"hljs-number\">1</span>)<br>    at inheritor.<span class=\"hljs-property\">_handleDataChanged</span> (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">data_controller</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">320</span>:<span class=\"hljs-number\">29</span>)<br>    at inheritor.<span class=\"hljs-property\">_handleDataChanged</span> (ui.<span class=\"hljs-property\">grid_core</span>.<span class=\"hljs-property\">selection</span>.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">511</span>:<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>但本地测试的时候确实正常,只有发布后才有这个错误</p>\n<p><img src=\"/img/devextreme_assign_to_readonly_property.png\" alt=\"image-20220703105032197\"></p>\n<p>进一步研究之后确定是数据加载过程的问题,本地测试时数据用的静态的;加载瞬间完成,从服务器取数据后绑定列延后了导致报错</p>\n<p>只要给本地测试数据添加延迟就能复现问题</p>\n<p><code>return of(dataTemp).pipe(delay(3000));</code></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>解决方法就是动态列的创建放在数据取完之后</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> service: Service</span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">service</span>.<span class=\"hljs-title function_\">getdata</span>().<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;              <br>          \t    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">columns</span>.<span class=\"hljs-title function_\">push</span>(&lt;<span class=\"hljs-title class_\">Column</span>&gt;&#123; <span class=\"hljs-attr\">isBand</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">caption</span>: xxx,<span class=\"hljs-attr\">columns</span>:listmidcol &#125;);<span class=\"hljs-comment\">//先创建列</span><br>                  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dataGrid</span>.<span class=\"hljs-property\">instance</span>.<span class=\"hljs-title function_\">option</span>(<span class=\"hljs-string\">&#x27;dataSource&#x27;</span>,data);<span class=\"hljs-comment\">//再绑定数据</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>无</p>\n"},{"layout":"post","title":"使用非80端口部署微信公众号后台","subtitle":"使用workers解决 微信公众号 请输入合法的URL问题","date":"2022-07-21T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\n\n最近给家里换了软路由装上了PVE,于是又重拾了之前的公众号.\n\n在修改微信公众号服务器后台URL地址时,微信提示:`请输入合法的URL`\n\n这里之前用的是`ngrok`和`frp`的内网穿透方案;但我的VPS已经到期了,暂时也没有新入主机的需求\n\n最终,在网上找到了两个解决方法\n\n### 解决方案\n\n#### 1.免费内网穿透服务\n\n* 使用[免费 FRP 内网穿透服务frp.freefrp.net](https://freefrp.net/) \n\n根据[网站](https://freefrp.net/docs)提示配置`frpc.ini`,使用以下docker命令启动`frpc`客户端\n\n`docker run --restart=always --network host -d -v /mnt/docker/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc`\n\n再将自己原本的域名CNAME指向`frp.freefrp.net`即可\n\n* 使用免费visual studio扩展:[Conveyor by Keyoti](https://marketplace.visualstudio.com/items?itemName=vs-publisher-1448185.ConveyorbyKeyoti)\n\n如果你只是临时debug调试,且使用visual studio作为开发工具,那可以使用[conveyor](https://conveyor.cloud/)的服务,安装插件后F5调试即可使用\n\n#### 2.使用cloudflare提供的免费serverless服务:cloudflare workers\n\n上面的方法是之前就了解到的方案,在知道[reflare](https://github.com/xiaoyang-sde/reflare)之后才算发现一条康庄大道\n\n\n\n[reflare](https://github.com/xiaoyang-sde/reflare)是一个反向代理库,既然是反向代理;那就可以解决端口映射问题\n\n使用[Cloudflare Workers®](https://workers.cloudflare.com/)需要将域名托管到cloudflare上才行\n\n* 参照[reflare](https://github.com/xiaoyang-sde/reflare)提供的安装步骤[引用reflare](https://github.com/xiaoyang-sde/reflare#-installation)\n* 修改`index.ts`中的配置为自己的域名和端口\n\n```ts\nreflare.push({\n    path: '/*',\n    upstream: {\n      domain: 'wechat.aa.com',      \n      port: 7788,\n      protocol: 'https',\n    }\n  });\n```\n\n* 执行`npx wrangler publish`命令发布worker\n\n如果需要修改子域名,可以调整`wrangler.toml`中的`name`\n\n* 在workers后台中添加自定义触发路由\n\n注意,这里要写`/*`,它表示处理所有`location`\n\n![cloudflare_workers_router](/img/cloudflare_workers_router.png)\n\n* 在DNS设置中添加自定义触发路由到你的worker域名的CNAME记录\n\n注意,这里要点亮橙色云朵,因为直接用xxx.workers.dev访问会有522 Connection timed out error \n\n![cname](/img/cloudflare_workers_cname.png)\n\n* 访问你设置的dns记录即可看到效果\n\n\n\n\n### 参考资料\n  * [https://github.com/xiaoyang-sde/reflare](https://github.com/xiaoyang-sde/reflare)\n  * [https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4](https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4)\n  * [https://briteming.blogspot.com/2022/06/cloudflare.html](https://briteming.blogspot.com/2022/06/cloudflare.html)\n  * [https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176](https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176)\n","source":"_posts/2022-07-22-使用非80端口部署微信公众号后台.md","raw":"---\nlayout:     post\ntitle:      使用非80端口部署微信公众号后台\nsubtitle:   使用workers解决 微信公众号 请输入合法的URL问题\ndate:       2022-7-22\nauthor:     王帅\ncatalog: true\ntags:\n    - weixin\n    - cloudflare\n    - workers\n    - javascript\n    - frp\ntypora-root-url: ..\n---\n\n### 引言\n\n最近给家里换了软路由装上了PVE,于是又重拾了之前的公众号.\n\n在修改微信公众号服务器后台URL地址时,微信提示:`请输入合法的URL`\n\n这里之前用的是`ngrok`和`frp`的内网穿透方案;但我的VPS已经到期了,暂时也没有新入主机的需求\n\n最终,在网上找到了两个解决方法\n\n### 解决方案\n\n#### 1.免费内网穿透服务\n\n* 使用[免费 FRP 内网穿透服务frp.freefrp.net](https://freefrp.net/) \n\n根据[网站](https://freefrp.net/docs)提示配置`frpc.ini`,使用以下docker命令启动`frpc`客户端\n\n`docker run --restart=always --network host -d -v /mnt/docker/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc`\n\n再将自己原本的域名CNAME指向`frp.freefrp.net`即可\n\n* 使用免费visual studio扩展:[Conveyor by Keyoti](https://marketplace.visualstudio.com/items?itemName=vs-publisher-1448185.ConveyorbyKeyoti)\n\n如果你只是临时debug调试,且使用visual studio作为开发工具,那可以使用[conveyor](https://conveyor.cloud/)的服务,安装插件后F5调试即可使用\n\n#### 2.使用cloudflare提供的免费serverless服务:cloudflare workers\n\n上面的方法是之前就了解到的方案,在知道[reflare](https://github.com/xiaoyang-sde/reflare)之后才算发现一条康庄大道\n\n\n\n[reflare](https://github.com/xiaoyang-sde/reflare)是一个反向代理库,既然是反向代理;那就可以解决端口映射问题\n\n使用[Cloudflare Workers®](https://workers.cloudflare.com/)需要将域名托管到cloudflare上才行\n\n* 参照[reflare](https://github.com/xiaoyang-sde/reflare)提供的安装步骤[引用reflare](https://github.com/xiaoyang-sde/reflare#-installation)\n* 修改`index.ts`中的配置为自己的域名和端口\n\n```ts\nreflare.push({\n    path: '/*',\n    upstream: {\n      domain: 'wechat.aa.com',      \n      port: 7788,\n      protocol: 'https',\n    }\n  });\n```\n\n* 执行`npx wrangler publish`命令发布worker\n\n如果需要修改子域名,可以调整`wrangler.toml`中的`name`\n\n* 在workers后台中添加自定义触发路由\n\n注意,这里要写`/*`,它表示处理所有`location`\n\n![cloudflare_workers_router](/img/cloudflare_workers_router.png)\n\n* 在DNS设置中添加自定义触发路由到你的worker域名的CNAME记录\n\n注意,这里要点亮橙色云朵,因为直接用xxx.workers.dev访问会有522 Connection timed out error \n\n![cname](/img/cloudflare_workers_cname.png)\n\n* 访问你设置的dns记录即可看到效果\n\n\n\n\n### 参考资料\n  * [https://github.com/xiaoyang-sde/reflare](https://github.com/xiaoyang-sde/reflare)\n  * [https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4](https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4)\n  * [https://briteming.blogspot.com/2022/06/cloudflare.html](https://briteming.blogspot.com/2022/06/cloudflare.html)\n  * [https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176](https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176)\n","slug":"2022-07-22-使用非80端口部署微信公众号后台","published":1,"updated":"2022-09-21T05:43:57.485Z","_id":"cl8vdlqfl00003oo2d7px4uw2","comments":1,"photos":[],"link":"","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>最近给家里换了软路由装上了PVE,于是又重拾了之前的公众号.</p>\n<p>在修改微信公众号服务器后台URL地址时,微信提示:<code>请输入合法的URL</code></p>\n<p>这里之前用的是<code>ngrok</code>和<code>frp</code>的内网穿透方案;但我的VPS已经到期了,暂时也没有新入主机的需求</p>\n<p>最终,在网上找到了两个解决方法</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"1-免费内网穿透服务\"><a href=\"#1-免费内网穿透服务\" class=\"headerlink\" title=\"1.免费内网穿透服务\"></a>1.免费内网穿透服务</h4><ul>\n<li>使用<a href=\"https://freefrp.net/\">免费 FRP 内网穿透服务frp.freefrp.net</a> </li>\n</ul>\n<p>根据<a href=\"https://freefrp.net/docs\">网站</a>提示配置<code>frpc.ini</code>,使用以下docker命令启动<code>frpc</code>客户端</p>\n<p><code>docker run --restart=always --network host -d -v /mnt/docker/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc</code></p>\n<p>再将自己原本的域名CNAME指向<code>frp.freefrp.net</code>即可</p>\n<ul>\n<li>使用免费visual studio扩展:<a href=\"https://marketplace.visualstudio.com/items?itemName=vs-publisher-1448185.ConveyorbyKeyoti\">Conveyor by Keyoti</a></li>\n</ul>\n<p>如果你只是临时debug调试,且使用visual studio作为开发工具,那可以使用<a href=\"https://conveyor.cloud/\">conveyor</a>的服务,安装插件后F5调试即可使用</p>\n<h4 id=\"2-使用cloudflare提供的免费serverless服务-cloudflare-workers\"><a href=\"#2-使用cloudflare提供的免费serverless服务-cloudflare-workers\" class=\"headerlink\" title=\"2.使用cloudflare提供的免费serverless服务:cloudflare workers\"></a>2.使用cloudflare提供的免费serverless服务:cloudflare workers</h4><p>上面的方法是之前就了解到的方案,在知道<a href=\"https://github.com/xiaoyang-sde/reflare\">reflare</a>之后才算发现一条康庄大道</p>\n<p><a href=\"https://github.com/xiaoyang-sde/reflare\">reflare</a>是一个反向代理库,既然是反向代理;那就可以解决端口映射问题</p>\n<p>使用<a href=\"https://workers.cloudflare.com/\">Cloudflare Workers®</a>需要将域名托管到cloudflare上才行</p>\n<ul>\n<li>参照<a href=\"https://github.com/xiaoyang-sde/reflare\">reflare</a>提供的安装步骤<a href=\"https://github.com/xiaoyang-sde/reflare#-installation\">引用reflare</a></li>\n<li>修改<code>index.ts</code>中的配置为自己的域名和端口</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\">reflare.<span class=\"hljs-title function_\">push</span>(&#123;<br>    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/*&#x27;</span>,<br>    <span class=\"hljs-attr\">upstream</span>: &#123;<br>      <span class=\"hljs-attr\">domain</span>: <span class=\"hljs-string\">&#x27;wechat.aa.com&#x27;</span>,      <br>      <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">7788</span>,<br>      <span class=\"hljs-attr\">protocol</span>: <span class=\"hljs-string\">&#x27;https&#x27;</span>,<br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行<code>npx wrangler publish</code>命令发布worker</li>\n</ul>\n<p>如果需要修改子域名,可以调整<code>wrangler.toml</code>中的<code>name</code></p>\n<ul>\n<li>在workers后台中添加自定义触发路由</li>\n</ul>\n<p>注意,这里要写<code>/*</code>,它表示处理所有<code>location</code></p>\n<p><img src=\"/img/cloudflare_workers_router.png\" alt=\"cloudflare_workers_router\"></p>\n<ul>\n<li>在DNS设置中添加自定义触发路由到你的worker域名的CNAME记录</li>\n</ul>\n<p>注意,这里要点亮橙色云朵,因为直接用xxx.workers.dev访问会有522 Connection timed out error </p>\n<p><img src=\"/img/cloudflare_workers_cname.png\" alt=\"cname\"></p>\n<ul>\n<li>访问你设置的dns记录即可看到效果</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/xiaoyang-sde/reflare\">https://github.com/xiaoyang-sde/reflare</a></li>\n<li><a href=\"https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4\">https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4</a></li>\n<li><a href=\"https://briteming.blogspot.com/2022/06/cloudflare.html\">https://briteming.blogspot.com/2022/06/cloudflare.html</a></li>\n<li><a href=\"https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176\">https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>最近给家里换了软路由装上了PVE,于是又重拾了之前的公众号.</p>\n<p>在修改微信公众号服务器后台URL地址时,微信提示:<code>请输入合法的URL</code></p>\n<p>这里之前用的是<code>ngrok</code>和<code>frp</code>的内网穿透方案;但我的VPS已经到期了,暂时也没有新入主机的需求</p>\n<p>最终,在网上找到了两个解决方法</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"1-免费内网穿透服务\"><a href=\"#1-免费内网穿透服务\" class=\"headerlink\" title=\"1.免费内网穿透服务\"></a>1.免费内网穿透服务</h4><ul>\n<li>使用<a href=\"https://freefrp.net/\">免费 FRP 内网穿透服务frp.freefrp.net</a> </li>\n</ul>\n<p>根据<a href=\"https://freefrp.net/docs\">网站</a>提示配置<code>frpc.ini</code>,使用以下docker命令启动<code>frpc</code>客户端</p>\n<p><code>docker run --restart=always --network host -d -v /mnt/docker/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc</code></p>\n<p>再将自己原本的域名CNAME指向<code>frp.freefrp.net</code>即可</p>\n<ul>\n<li>使用免费visual studio扩展:<a href=\"https://marketplace.visualstudio.com/items?itemName=vs-publisher-1448185.ConveyorbyKeyoti\">Conveyor by Keyoti</a></li>\n</ul>\n<p>如果你只是临时debug调试,且使用visual studio作为开发工具,那可以使用<a href=\"https://conveyor.cloud/\">conveyor</a>的服务,安装插件后F5调试即可使用</p>\n<h4 id=\"2-使用cloudflare提供的免费serverless服务-cloudflare-workers\"><a href=\"#2-使用cloudflare提供的免费serverless服务-cloudflare-workers\" class=\"headerlink\" title=\"2.使用cloudflare提供的免费serverless服务:cloudflare workers\"></a>2.使用cloudflare提供的免费serverless服务:cloudflare workers</h4><p>上面的方法是之前就了解到的方案,在知道<a href=\"https://github.com/xiaoyang-sde/reflare\">reflare</a>之后才算发现一条康庄大道</p>\n<p><a href=\"https://github.com/xiaoyang-sde/reflare\">reflare</a>是一个反向代理库,既然是反向代理;那就可以解决端口映射问题</p>\n<p>使用<a href=\"https://workers.cloudflare.com/\">Cloudflare Workers®</a>需要将域名托管到cloudflare上才行</p>\n<ul>\n<li>参照<a href=\"https://github.com/xiaoyang-sde/reflare\">reflare</a>提供的安装步骤<a href=\"https://github.com/xiaoyang-sde/reflare#-installation\">引用reflare</a></li>\n<li>修改<code>index.ts</code>中的配置为自己的域名和端口</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\">reflare.<span class=\"hljs-title function_\">push</span>(&#123;<br>    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/*&#x27;</span>,<br>    <span class=\"hljs-attr\">upstream</span>: &#123;<br>      <span class=\"hljs-attr\">domain</span>: <span class=\"hljs-string\">&#x27;wechat.aa.com&#x27;</span>,      <br>      <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">7788</span>,<br>      <span class=\"hljs-attr\">protocol</span>: <span class=\"hljs-string\">&#x27;https&#x27;</span>,<br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行<code>npx wrangler publish</code>命令发布worker</li>\n</ul>\n<p>如果需要修改子域名,可以调整<code>wrangler.toml</code>中的<code>name</code></p>\n<ul>\n<li>在workers后台中添加自定义触发路由</li>\n</ul>\n<p>注意,这里要写<code>/*</code>,它表示处理所有<code>location</code></p>\n<p><img src=\"/img/cloudflare_workers_router.png\" alt=\"cloudflare_workers_router\"></p>\n<ul>\n<li>在DNS设置中添加自定义触发路由到你的worker域名的CNAME记录</li>\n</ul>\n<p>注意,这里要点亮橙色云朵,因为直接用xxx.workers.dev访问会有522 Connection timed out error </p>\n<p><img src=\"/img/cloudflare_workers_cname.png\" alt=\"cname\"></p>\n<ul>\n<li>访问你设置的dns记录即可看到效果</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/xiaoyang-sde/reflare\">https://github.com/xiaoyang-sde/reflare</a></li>\n<li><a href=\"https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4\">https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4</a></li>\n<li><a href=\"https://briteming.blogspot.com/2022/06/cloudflare.html\">https://briteming.blogspot.com/2022/06/cloudflare.html</a></li>\n<li><a href=\"https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176\">https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176</a></li>\n</ul>\n"},{"layout":"post","title":"查看mcr.microsoft.com中所有docker 镜像的Tag","subtitle":"Get list all docker image tags of mcr.microsoft.com","date":"2020-04-09T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n* ~~可使用麦客CRM创建用户表单，收集`mcr.microsoft.com`中所需的images，然后自动发送邮件，再在power app上根据邮件触发git 提交；任务完成后自动回复麦客CRM中表单填写的邮件~~\n\n* 在微信公众号中接收retag命令\n\n* 域名可使用ReTag.wangshuai.app\n\n* githubpage 301跳转\n\n* 当用户登录时，通知登陆者的ip https://serverfault.com/questions/361565/how-can-i-get-the-ip-address-of-a-remote-desktop-client-and-how-can-i-trigger-a\n\n* 透明背景图二维码https://www.codeproject.com/Articles/20018/Gradients-made-easy\n\n* 2020-08-05-使用Zxing.Net 创建透明背景二维码\n\n* logpower \n\n* fastreport打印预览时修改页面导致界面变化\n\n* windows拆分指定程序的合并任务栏按钮功能\n  * https://rammichael.com/7-taskbar-tweaker\n  * https://www.sevenforums.com/customization/28596-possible-ungroup-only-specific-programs.html\n  \n* fastreport每20行数据打印到一个page里面\n  \n  * 官方博客：https://www.fast-report.com/en/blog/148/show/\n  *  https://fastreports.github.io/FastReport.Documentation/ClassReference/api/FastReport.Engine.ReportEngine.html\n  * if (Report.Engine.RowNo>20&& Report.Engine.RowNo%20==1)Engine.StartNewPage()；\n  \n* 检查VT-X支持情况\n  * CPU-Z指令集\n  * Interl支持https://www.intel.cn/content/www/cn/zh/support/articles/000005486/processors.html\n  * \n  \n* 快速从网站的table中选取所需数据（在[世界500强及图标](http://www.socoologo.com/category/17)网站中copy其名称及图片url）\n\n* [wikihow-new 如何做一个核酸检测点地图](https://www.wikihow.com/Special:ArticleCreator?t=%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%B8%AA%E6%A0%B8%E9%85%B8%E6%A3%80%E6%B5%8B%E7%82%B9%E5%9C%B0%E5%9B%BE)\n\n* 创建一个打开devexpress报表文件类型repx的报表设计器\n  * https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts\n  * https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner\n\n* ASPNET MVC 使用serilog记录日志\n  * https://stackoverflow.com/questions/54404561/using-serilog-in-asp-net-mvc-project\n  * https://stackoverflow.com/questions/55359440/serilog-with-asp-net-web-api-not-using-enricher\n  * https://github.com/serilog-web/classic\n  * https://github.com/serilog-web/classic-mvc\n\n* ~~devexpress 使用PropertyGridControl展开Collection的Item(without collectionedit edit items)~~\n  \n  * https://www.codeproject.com/Articles/4448/Customized-Display-of-Collection-Data-in-a-Propert#_articleTop\n  \n* ~~devexpress 遍历propertygridcontrol中的行~~\n  \n  * https://supportcenter.devexpress.com/ticket/details/t432094/propertygridcontrol-custom-rowoperation-doesn-t-retrieve-all-properties\n  * https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal\n  \n* ~~devexpress  propertygridcontrol隐藏CellValue Editor~~\n\n  * https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell\n\n    ```\n    private void propertyGridControl1_CustomDrawRowValueCell(object sender, CustomDrawRowValueCellEventArgs e)\n    {\n        if (e.Properties.IsSourceReadOnly)\n        {\n            e.Handled = true;\n        }    \n    }\n    ```\n\n* propertyGrid根据属性动态设置另一属性的可用性\n\n  * http://www.reza-aghaei.com/make-a-property-read-only-in-propertygrid/\n\n* C/S程序使用FTP目录自动更新的实践\n  * https://www.cnblogs.com/KnightsWarrior/p/AutoUpdater.html\n\n* git 将最近提交的文件作为发布文件\n\n\t* https://stackoverflow.com/questions/31340933/copy-all-files-changed-in-last-commit\n\n* wpf 创建一个圆角依赖属性IsRoundC\n\n\t* \"D:\\学习\\WPF\\wpf-tutorial\\WPF样式\\WPF样式.sln\"\n\n* steam link 第三方游戏支持手柄操作https://www.reddit.com/r/Steam_Link/comments/9o6m1p/nonsteam_games_and_controllers_dont_work_with/\n\n* 解决merlin路由器 定时ddns重启后失效的问题\n\n* 使用命令行启动一组dotnet服务(解决命令行一次启动多个dotnet服务的问题)\n\n  * https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait\n  * https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows\n  * 回答问题：https://stackoverflow.com/questions/47566378/how-to-run-dot-net-core-application-in-detached-mode-using-dotnet-run-command\n  * https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell\n  *  todo:1.启动后无法监测失败的数据(需要数据返回或提示)2.运行后不知道执行的什么命令(需要在控制台title上显示执行的命令)\n  * https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646\n  * ` cmd.exe /c \"start  \"\"my app\"\" powershell.exe -NoExit -Command  \"\"dotnet myapp\"\"\"`\n  \n  ```powershell\n  if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\"))  \n  {  \n    $arguments = \"& '\" +$myinvocation.mycommand.definition + \"'\"\n    Start-Process powershell -Verb runAs -ArgumentList $arguments\n    Break\n  }\n  \n  $version=\"net5.0\"\n  $dlls=@(\n      \"DeviceCentral.IdentityService\",\n      \"DeviceCentral.ApplicationService\",\n      \"DeviceCentral.IotWebservice\",\n      # \"DeviceCentral.Report\",\n      \"DeviceCentral.WebService\"\n  )\n  \n  # $dlls | ForEach-Object { &()}\n  for ( $index = 0; $index -lt $dlls.count; $index++)\n  {\n      # $path=\" $PSScriptRoot\\{0}\\bin\\Debug\\$version\\{0}.dll\" -f $dlls[$index]\n      $dllName=$dlls[$index];\n  \n      $path=\" $PSScriptRoot\\{0}\\bin\\Debug\\$version\\\" -f $dllName\n  \n      $cmd='cd '+ $path;\n      Invoke-Expression $cmd\n  \n      $file=$path+$dllName+\".dll\"\n  \n      cmd.exe /c \"start  \"\"$dllName\"\" powershell.exe -NoExit -Command  \"\"dotnet .\\$dllName.dll\"\"\"\n  \n      \"$dllName execed\"\n  }\n  # D:\\SVN\\TNIOT\\V1.0.0\\Program\\2_SourceCode\\InterFace\\DeviceCentral.ApplicationService\\bin\\Debug\\net5.0\\DeviceCentral.ApplicationService.dll\n  \n  $exes=@(\n      \"D:\\SVN\\TNIOT\\V1.0.0\\Program\\2_SourceCode\\InterFace\\DeviceCentral.Report\\DeviceCentral.ReportService\\bin\\Debug\\$version\"\n  )\n  for ( $index = 0; $index -lt $exes.count; $index++)\n  {\n      # $path=\" $PSScriptRoot\\{0}\\bin\\Debug\\$version\\{0}.dll\" -f $dlls[$index]\n      $path=$exes[$index]\n  \n      $cmd='cd '+ $exes[$index];\n      Invoke-Expression $cmd\n  \n      $name=Get-ChildItem -filter *.exe -name\n      $name=[System.IO.Path]::GetFileNameWithoutExtension($name)\n      $file=$path+$name\n  \n      cmd.exe /c \"start  \"\"$file\"\" powershell.exe -NoExit -Command  \"\"dotnet .\\$name.dll\"\"\"\n  \n  \n      \"$file execed\"\n  }\n  \n  \"all server started.\"\n  #  dotnet .\\DeviceCentral.ApplicationService\\bin\\Debug\\$version\\DeviceCentral.ApplicationService.dll\n  ```\n  \n* EF在数据修改后刷新数据缓存\n  * https://docs.microsoft.com/en-us/ef/core/logging-events-diagnostics/interceptors\n\n* 订阅Signalr 的前端事件\n  * https://api.jquery.com/jQuery.Callbacks/\n\n* postman 使用脚本循环调用api\n\n* web网站性能优化\n\n  * https://pagespeed.web.dev/\n  * 需要登陆的Lighthouse \n  * 匿名模式 performance\n  * 请求耗时分析 Content Download\n  * json数据格式优化\n\n* iframe 历史导航\n  * https://stackoverflow.com/a/34712852/7960551\n\n* Seq在octopus deploy中的实践\n  * https://octopus.com/docs/projects/steps/configuration-features/configuration-transforms\n  * https://octopus.com/docs/projects/steps/configuration-features/substitute-variables-in-templates\n  * https://stackoverflow.com/questions/45955114/app-config-transformation-nlog-rules-logger-replace-not-works\n  * https://elmah.io/tools/webconfig-transformation-tester/\n  * https://docs.microsoft.com/en-us/previous-versions/aspnet/dd465326(v=vs.110)?redirectedfrom=MSDN\n  * https://octopus.com/docs/projects/steps/configuration-features/xml-configuration-variables-feature\n\n* docker nginx cloudflare\n  * https://gist.github.com/sergiks/4c1ccddc097e61e6fe5e45c53072a944\n  * https://eff-certbot.readthedocs.io/en/stable/install.html#running-with-docker\n  * https://dzone.com/articles/nginx-and-https-with-lets-encrypt-certbot-and-cron\n\n* TP Link 网管交换机端口复用 后如何访问管理后台\n  * 个交换机的管理VLAN都改成4，然后您将两个交换机的DHCP设置给禁用，手动指定路由器LAN口的网段IP地址，网关是路由器LAN口IP，DNS您用114.114.114.114的\n  * https://smb.tp-link.com.cn/service/detail_article_4313.html\n  * https://www.tp-link.com/tw/support/faq/788/\n  * 刚刚完美解决了我的用网需求，这里补充一下我遇到的两个问题：\n    1.之前由于路由器和光猫中的网络与内网是隔离的，用了网管交换机后出现拨号失败(电脑无法获得路由器下发的IP地址，而是169.254.XX.XX这样的IP，这表示路由器的DHCP无效，获取到了光猫的DHCP IP地址)解决方法就是将光猫的Lan口设置为与本地不同的网段\n    2.如果用的TP家的网管交换机,要想保持云管理(商云)在线的话,在设置pvid之后还要在系统管理→IP管理→IP设置中\n    设置 管理VLAN 为 lan的pvid，也就是卡卡设置中的3\n    设置IP地址为 lan同一网段的地址\n    网关为路由器Lan 口ip地址\n  * https://zhuanlan.zhihu.com/p/352135931\n\n* System.TypeLoadException: 'Could not load type 'Microsoft.EntityFrameworkCore.NpgsqlDbContextOptionsExtensions' from assembly 'Npgsql.EntityFrameworkCore.PostgreSQL, Version=5.0.5.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7'.'\n  * 问题为依赖问题\n  * 问题在`Npgsql.EntityFrameworkCore.PostgreSQL.Design`\n  * ![image-20220527143558373](C:\\Users\\王帅\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220527143558373.png)\n  * 手动添加Npgsql.EntityFrameworkCore.PostgreSQL就可以了\n  * 删除原有引用,一个一个添加新引用,或者调整引用相关dll的版本\n  \n* nginx docker .net  400 error post\n\n  * https://github.com/dotnet/aspnetcore/issues/17081#issuecomment-553741407\n\n  * ```bash\n    proxy_set_header Connection $http_connection\n    ```\n\n\n* swagger nginx \n  * https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/1253\n  * https://www.cnblogs.com/wswind/p/aspnetcore-swagger-nginx.html\n\n* 个性化终端\n  * 自动补全 [clink](https://github.com/chrisant996/clink)\n  * oh-my-zsh\n    * https://blog.walterlv.com/post/beautify-powershell-like-zsh.html\n    * https://ohmyposh.dev/docs/installation/windows\n    * https://docs.microsoft.com/en-us/windows/terminal/tutorials/custom-prompt-setup#install-a-nerd-font\n\n* pve虚拟机拨号失败\n\n  * ikuai \n\n  * ```\n    Unable to complete PPPoE Discovery\n    Timeout waiting for PADO packets\n    ```\n\n  * 尝试电脑直接拨号,原因在vlan交换机不能直接拨号,需要转为正常数据包\n\n* pve docker nas 折腾记\n  * 安装\n    * https://www.10bests.com/install-synology-dsm-on-pve/\n  * ddns \n  * 挂载nfs\n    * https://www.youtube.com/watch?v=XIHmGv7LoyU\n    * https://kb.synology.com/en-br/DSM/tutorial/I_cannot_mount_shared_folders_via_NFS_what_should_I_do\n    * https://kb.synology.cn/zh-cn/DSM/tutorial/How_to_access_files_on_Synology_NAS_within_the_local_network_NFS\n    * https://sourceforge.net/projects/nfsclient/\n\n* nsprice\n\n  * https://stackoverflow.com/questions/69793085/cloudflare-kv-namespace-doesnt-bind\n\n* devextreme TypeError: Cannot assign to read only property 'input' of object '[object Object]'\" error occurs on attempt to update the grid\n\t* https://supportcenter.devexpress.com/ticket/details/t718816/datagrid-the-typeerror-cannot-assign-to-read-only-property-input-of-object-object-object\n\n* openwrt openvpn 教程\n\n  \n  * [在Openwrt中配置Openvpn客户端](https://gist.github.com/willwhui/1febd37a3dd79a503cc8544c3bb18ece)\n  \n  * [OpenWrt + OpenVPN + Azure = 会翻墙的路由器](https://github.com/martincai/blogs/blob/master/openwrt%2Bopenvpn%2Bazure.md#openwrt--openvpn--azure--%E4%BC%9A%E7%BF%BB%E5%A2%99%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8)\n  \n  * https://ithelp.ithome.com.tw/articles/10277516\n  \n* openwrt 设置 ipv6 \n  * https://rongrongbq.moe/2021/08/firewall-and-DDNS-settings-for-IPv6/\n* 解决 微信公众号 请输入合法的URL问题\n\n\n  * https://github.com/xiaoyang-sde/reflare\n  * https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4\n  * https://briteming.blogspot.com/2022/06/cloudflare.html\n  * https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176\n\n* azure devops pipline docker push denied: requested access to the resource is denied\n  * docker login \n  * docker push\n\n\n\n* 如何比较两个EXCEL表格\n  * office 2013 工具 Spreadsheet Compare\n  * https://support.microsoft.com/zh-cn/office/%E4%BB%BB%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%B5%E5%AD%90%E8%A1%A8%E6%A0%BC%E6%AF%94%E8%BE%83-f2b20af8-a6d3-4780-8011-f15b3229f5d8\n* vscode 终端 搜索历史命令\n  * https://stackoverflow.com/questions/60669041/vs-code-unable-to-reverse-search-on-built-in-terminal\n  * vscode terminal ctrl r\n* freshping 添加ssl\n  * https://statuspage.freshping.io/63235-WangshuaisStatusPage\n* office 365 开发人员计划\n  * office 365 开发人员计划https://aka.ms/DevProgramDashboard\n  * https://editst.com/2022/microsoft365-domain-email/\n  * exchange 设置 catch all https://www.163biz.com/information/1897.html\n\n\n\n* openwrt loopback\n* 任天堂各区最新实时会员价格\n\n<iframe width=\"640\" height=\"450\" src=\"https://nsonlineprice.wangshuai.app/#/home\" border=\"0\" framespacing=\"0\" allowfullscreen=\"true\" __idm_id__=\"2465793\" style=\"\n    width: 100%;\n\" frameborder=\"no\"> </iframe>\n* zerotier one 单向访问问题\n  * https://my.zerotier.com/network 添加route\n  * 目标防火墙添加入站规则\n","source":"_posts/文章待写目录.md","raw":"---\nlayout:     post\ntitle:      查看mcr.microsoft.com中所有docker 镜像的Tag\nsubtitle:   Get list all docker image tags of mcr.microsoft.com\ndate:       2020-4-10\nauthor:     王帅\ncatalog: true\ntags:\n    - docker\n    - Tags\n    - images\ntypora-root-url: ..\n---\n\n* ~~可使用麦客CRM创建用户表单，收集`mcr.microsoft.com`中所需的images，然后自动发送邮件，再在power app上根据邮件触发git 提交；任务完成后自动回复麦客CRM中表单填写的邮件~~\n\n* 在微信公众号中接收retag命令\n\n* 域名可使用ReTag.wangshuai.app\n\n* githubpage 301跳转\n\n* 当用户登录时，通知登陆者的ip https://serverfault.com/questions/361565/how-can-i-get-the-ip-address-of-a-remote-desktop-client-and-how-can-i-trigger-a\n\n* 透明背景图二维码https://www.codeproject.com/Articles/20018/Gradients-made-easy\n\n* 2020-08-05-使用Zxing.Net 创建透明背景二维码\n\n* logpower \n\n* fastreport打印预览时修改页面导致界面变化\n\n* windows拆分指定程序的合并任务栏按钮功能\n  * https://rammichael.com/7-taskbar-tweaker\n  * https://www.sevenforums.com/customization/28596-possible-ungroup-only-specific-programs.html\n  \n* fastreport每20行数据打印到一个page里面\n  \n  * 官方博客：https://www.fast-report.com/en/blog/148/show/\n  *  https://fastreports.github.io/FastReport.Documentation/ClassReference/api/FastReport.Engine.ReportEngine.html\n  * if (Report.Engine.RowNo>20&& Report.Engine.RowNo%20==1)Engine.StartNewPage()；\n  \n* 检查VT-X支持情况\n  * CPU-Z指令集\n  * Interl支持https://www.intel.cn/content/www/cn/zh/support/articles/000005486/processors.html\n  * \n  \n* 快速从网站的table中选取所需数据（在[世界500强及图标](http://www.socoologo.com/category/17)网站中copy其名称及图片url）\n\n* [wikihow-new 如何做一个核酸检测点地图](https://www.wikihow.com/Special:ArticleCreator?t=%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%B8%AA%E6%A0%B8%E9%85%B8%E6%A3%80%E6%B5%8B%E7%82%B9%E5%9C%B0%E5%9B%BE)\n\n* 创建一个打开devexpress报表文件类型repx的报表设计器\n  * https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts\n  * https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner\n\n* ASPNET MVC 使用serilog记录日志\n  * https://stackoverflow.com/questions/54404561/using-serilog-in-asp-net-mvc-project\n  * https://stackoverflow.com/questions/55359440/serilog-with-asp-net-web-api-not-using-enricher\n  * https://github.com/serilog-web/classic\n  * https://github.com/serilog-web/classic-mvc\n\n* ~~devexpress 使用PropertyGridControl展开Collection的Item(without collectionedit edit items)~~\n  \n  * https://www.codeproject.com/Articles/4448/Customized-Display-of-Collection-Data-in-a-Propert#_articleTop\n  \n* ~~devexpress 遍历propertygridcontrol中的行~~\n  \n  * https://supportcenter.devexpress.com/ticket/details/t432094/propertygridcontrol-custom-rowoperation-doesn-t-retrieve-all-properties\n  * https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal\n  \n* ~~devexpress  propertygridcontrol隐藏CellValue Editor~~\n\n  * https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell\n\n    ```\n    private void propertyGridControl1_CustomDrawRowValueCell(object sender, CustomDrawRowValueCellEventArgs e)\n    {\n        if (e.Properties.IsSourceReadOnly)\n        {\n            e.Handled = true;\n        }    \n    }\n    ```\n\n* propertyGrid根据属性动态设置另一属性的可用性\n\n  * http://www.reza-aghaei.com/make-a-property-read-only-in-propertygrid/\n\n* C/S程序使用FTP目录自动更新的实践\n  * https://www.cnblogs.com/KnightsWarrior/p/AutoUpdater.html\n\n* git 将最近提交的文件作为发布文件\n\n\t* https://stackoverflow.com/questions/31340933/copy-all-files-changed-in-last-commit\n\n* wpf 创建一个圆角依赖属性IsRoundC\n\n\t* \"D:\\学习\\WPF\\wpf-tutorial\\WPF样式\\WPF样式.sln\"\n\n* steam link 第三方游戏支持手柄操作https://www.reddit.com/r/Steam_Link/comments/9o6m1p/nonsteam_games_and_controllers_dont_work_with/\n\n* 解决merlin路由器 定时ddns重启后失效的问题\n\n* 使用命令行启动一组dotnet服务(解决命令行一次启动多个dotnet服务的问题)\n\n  * https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait\n  * https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows\n  * 回答问题：https://stackoverflow.com/questions/47566378/how-to-run-dot-net-core-application-in-detached-mode-using-dotnet-run-command\n  * https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell\n  *  todo:1.启动后无法监测失败的数据(需要数据返回或提示)2.运行后不知道执行的什么命令(需要在控制台title上显示执行的命令)\n  * https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646\n  * ` cmd.exe /c \"start  \"\"my app\"\" powershell.exe -NoExit -Command  \"\"dotnet myapp\"\"\"`\n  \n  ```powershell\n  if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\"))  \n  {  \n    $arguments = \"& '\" +$myinvocation.mycommand.definition + \"'\"\n    Start-Process powershell -Verb runAs -ArgumentList $arguments\n    Break\n  }\n  \n  $version=\"net5.0\"\n  $dlls=@(\n      \"DeviceCentral.IdentityService\",\n      \"DeviceCentral.ApplicationService\",\n      \"DeviceCentral.IotWebservice\",\n      # \"DeviceCentral.Report\",\n      \"DeviceCentral.WebService\"\n  )\n  \n  # $dlls | ForEach-Object { &()}\n  for ( $index = 0; $index -lt $dlls.count; $index++)\n  {\n      # $path=\" $PSScriptRoot\\{0}\\bin\\Debug\\$version\\{0}.dll\" -f $dlls[$index]\n      $dllName=$dlls[$index];\n  \n      $path=\" $PSScriptRoot\\{0}\\bin\\Debug\\$version\\\" -f $dllName\n  \n      $cmd='cd '+ $path;\n      Invoke-Expression $cmd\n  \n      $file=$path+$dllName+\".dll\"\n  \n      cmd.exe /c \"start  \"\"$dllName\"\" powershell.exe -NoExit -Command  \"\"dotnet .\\$dllName.dll\"\"\"\n  \n      \"$dllName execed\"\n  }\n  # D:\\SVN\\TNIOT\\V1.0.0\\Program\\2_SourceCode\\InterFace\\DeviceCentral.ApplicationService\\bin\\Debug\\net5.0\\DeviceCentral.ApplicationService.dll\n  \n  $exes=@(\n      \"D:\\SVN\\TNIOT\\V1.0.0\\Program\\2_SourceCode\\InterFace\\DeviceCentral.Report\\DeviceCentral.ReportService\\bin\\Debug\\$version\"\n  )\n  for ( $index = 0; $index -lt $exes.count; $index++)\n  {\n      # $path=\" $PSScriptRoot\\{0}\\bin\\Debug\\$version\\{0}.dll\" -f $dlls[$index]\n      $path=$exes[$index]\n  \n      $cmd='cd '+ $exes[$index];\n      Invoke-Expression $cmd\n  \n      $name=Get-ChildItem -filter *.exe -name\n      $name=[System.IO.Path]::GetFileNameWithoutExtension($name)\n      $file=$path+$name\n  \n      cmd.exe /c \"start  \"\"$file\"\" powershell.exe -NoExit -Command  \"\"dotnet .\\$name.dll\"\"\"\n  \n  \n      \"$file execed\"\n  }\n  \n  \"all server started.\"\n  #  dotnet .\\DeviceCentral.ApplicationService\\bin\\Debug\\$version\\DeviceCentral.ApplicationService.dll\n  ```\n  \n* EF在数据修改后刷新数据缓存\n  * https://docs.microsoft.com/en-us/ef/core/logging-events-diagnostics/interceptors\n\n* 订阅Signalr 的前端事件\n  * https://api.jquery.com/jQuery.Callbacks/\n\n* postman 使用脚本循环调用api\n\n* web网站性能优化\n\n  * https://pagespeed.web.dev/\n  * 需要登陆的Lighthouse \n  * 匿名模式 performance\n  * 请求耗时分析 Content Download\n  * json数据格式优化\n\n* iframe 历史导航\n  * https://stackoverflow.com/a/34712852/7960551\n\n* Seq在octopus deploy中的实践\n  * https://octopus.com/docs/projects/steps/configuration-features/configuration-transforms\n  * https://octopus.com/docs/projects/steps/configuration-features/substitute-variables-in-templates\n  * https://stackoverflow.com/questions/45955114/app-config-transformation-nlog-rules-logger-replace-not-works\n  * https://elmah.io/tools/webconfig-transformation-tester/\n  * https://docs.microsoft.com/en-us/previous-versions/aspnet/dd465326(v=vs.110)?redirectedfrom=MSDN\n  * https://octopus.com/docs/projects/steps/configuration-features/xml-configuration-variables-feature\n\n* docker nginx cloudflare\n  * https://gist.github.com/sergiks/4c1ccddc097e61e6fe5e45c53072a944\n  * https://eff-certbot.readthedocs.io/en/stable/install.html#running-with-docker\n  * https://dzone.com/articles/nginx-and-https-with-lets-encrypt-certbot-and-cron\n\n* TP Link 网管交换机端口复用 后如何访问管理后台\n  * 个交换机的管理VLAN都改成4，然后您将两个交换机的DHCP设置给禁用，手动指定路由器LAN口的网段IP地址，网关是路由器LAN口IP，DNS您用114.114.114.114的\n  * https://smb.tp-link.com.cn/service/detail_article_4313.html\n  * https://www.tp-link.com/tw/support/faq/788/\n  * 刚刚完美解决了我的用网需求，这里补充一下我遇到的两个问题：\n    1.之前由于路由器和光猫中的网络与内网是隔离的，用了网管交换机后出现拨号失败(电脑无法获得路由器下发的IP地址，而是169.254.XX.XX这样的IP，这表示路由器的DHCP无效，获取到了光猫的DHCP IP地址)解决方法就是将光猫的Lan口设置为与本地不同的网段\n    2.如果用的TP家的网管交换机,要想保持云管理(商云)在线的话,在设置pvid之后还要在系统管理→IP管理→IP设置中\n    设置 管理VLAN 为 lan的pvid，也就是卡卡设置中的3\n    设置IP地址为 lan同一网段的地址\n    网关为路由器Lan 口ip地址\n  * https://zhuanlan.zhihu.com/p/352135931\n\n* System.TypeLoadException: 'Could not load type 'Microsoft.EntityFrameworkCore.NpgsqlDbContextOptionsExtensions' from assembly 'Npgsql.EntityFrameworkCore.PostgreSQL, Version=5.0.5.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7'.'\n  * 问题为依赖问题\n  * 问题在`Npgsql.EntityFrameworkCore.PostgreSQL.Design`\n  * ![image-20220527143558373](C:\\Users\\王帅\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220527143558373.png)\n  * 手动添加Npgsql.EntityFrameworkCore.PostgreSQL就可以了\n  * 删除原有引用,一个一个添加新引用,或者调整引用相关dll的版本\n  \n* nginx docker .net  400 error post\n\n  * https://github.com/dotnet/aspnetcore/issues/17081#issuecomment-553741407\n\n  * ```bash\n    proxy_set_header Connection $http_connection\n    ```\n\n\n* swagger nginx \n  * https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/1253\n  * https://www.cnblogs.com/wswind/p/aspnetcore-swagger-nginx.html\n\n* 个性化终端\n  * 自动补全 [clink](https://github.com/chrisant996/clink)\n  * oh-my-zsh\n    * https://blog.walterlv.com/post/beautify-powershell-like-zsh.html\n    * https://ohmyposh.dev/docs/installation/windows\n    * https://docs.microsoft.com/en-us/windows/terminal/tutorials/custom-prompt-setup#install-a-nerd-font\n\n* pve虚拟机拨号失败\n\n  * ikuai \n\n  * ```\n    Unable to complete PPPoE Discovery\n    Timeout waiting for PADO packets\n    ```\n\n  * 尝试电脑直接拨号,原因在vlan交换机不能直接拨号,需要转为正常数据包\n\n* pve docker nas 折腾记\n  * 安装\n    * https://www.10bests.com/install-synology-dsm-on-pve/\n  * ddns \n  * 挂载nfs\n    * https://www.youtube.com/watch?v=XIHmGv7LoyU\n    * https://kb.synology.com/en-br/DSM/tutorial/I_cannot_mount_shared_folders_via_NFS_what_should_I_do\n    * https://kb.synology.cn/zh-cn/DSM/tutorial/How_to_access_files_on_Synology_NAS_within_the_local_network_NFS\n    * https://sourceforge.net/projects/nfsclient/\n\n* nsprice\n\n  * https://stackoverflow.com/questions/69793085/cloudflare-kv-namespace-doesnt-bind\n\n* devextreme TypeError: Cannot assign to read only property 'input' of object '[object Object]'\" error occurs on attempt to update the grid\n\t* https://supportcenter.devexpress.com/ticket/details/t718816/datagrid-the-typeerror-cannot-assign-to-read-only-property-input-of-object-object-object\n\n* openwrt openvpn 教程\n\n  \n  * [在Openwrt中配置Openvpn客户端](https://gist.github.com/willwhui/1febd37a3dd79a503cc8544c3bb18ece)\n  \n  * [OpenWrt + OpenVPN + Azure = 会翻墙的路由器](https://github.com/martincai/blogs/blob/master/openwrt%2Bopenvpn%2Bazure.md#openwrt--openvpn--azure--%E4%BC%9A%E7%BF%BB%E5%A2%99%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8)\n  \n  * https://ithelp.ithome.com.tw/articles/10277516\n  \n* openwrt 设置 ipv6 \n  * https://rongrongbq.moe/2021/08/firewall-and-DDNS-settings-for-IPv6/\n* 解决 微信公众号 请输入合法的URL问题\n\n\n  * https://github.com/xiaoyang-sde/reflare\n  * https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4\n  * https://briteming.blogspot.com/2022/06/cloudflare.html\n  * https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176\n\n* azure devops pipline docker push denied: requested access to the resource is denied\n  * docker login \n  * docker push\n\n\n\n* 如何比较两个EXCEL表格\n  * office 2013 工具 Spreadsheet Compare\n  * https://support.microsoft.com/zh-cn/office/%E4%BB%BB%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%B5%E5%AD%90%E8%A1%A8%E6%A0%BC%E6%AF%94%E8%BE%83-f2b20af8-a6d3-4780-8011-f15b3229f5d8\n* vscode 终端 搜索历史命令\n  * https://stackoverflow.com/questions/60669041/vs-code-unable-to-reverse-search-on-built-in-terminal\n  * vscode terminal ctrl r\n* freshping 添加ssl\n  * https://statuspage.freshping.io/63235-WangshuaisStatusPage\n* office 365 开发人员计划\n  * office 365 开发人员计划https://aka.ms/DevProgramDashboard\n  * https://editst.com/2022/microsoft365-domain-email/\n  * exchange 设置 catch all https://www.163biz.com/information/1897.html\n\n\n\n* openwrt loopback\n* 任天堂各区最新实时会员价格\n\n<iframe width=\"640\" height=\"450\" src=\"https://nsonlineprice.wangshuai.app/#/home\" border=\"0\" framespacing=\"0\" allowfullscreen=\"true\" __idm_id__=\"2465793\" style=\"\n    width: 100%;\n\" frameborder=\"no\"> </iframe>\n* zerotier one 单向访问问题\n  * https://my.zerotier.com/network 添加route\n  * 目标防火墙添加入站规则\n","slug":"文章待写目录","published":1,"updated":"2022-09-23T16:55:08.156Z","_id":"cl8vdlqgb000b3oo2dv34dq6e","comments":1,"photos":[],"link":"","content":"<ul>\n<li><p><del>可使用麦客CRM创建用户表单，收集<code>mcr.microsoft.com</code>中所需的images，然后自动发送邮件，再在power app上根据邮件触发git 提交；任务完成后自动回复麦客CRM中表单填写的邮件</del></p>\n</li>\n<li><p>在微信公众号中接收retag命令</p>\n</li>\n<li><p>域名可使用ReTag.wangshuai.app</p>\n</li>\n<li><p>githubpage 301跳转</p>\n</li>\n<li><p>当用户登录时，通知登陆者的ip <a href=\"https://serverfault.com/questions/361565/how-can-i-get-the-ip-address-of-a-remote-desktop-client-and-how-can-i-trigger-a\">https://serverfault.com/questions/361565/how-can-i-get-the-ip-address-of-a-remote-desktop-client-and-how-can-i-trigger-a</a></p>\n</li>\n<li><p>透明背景图二维码<a href=\"https://www.codeproject.com/Articles/20018/Gradients-made-easy\">https://www.codeproject.com/Articles/20018/Gradients-made-easy</a></p>\n</li>\n<li><p>2020-08-05-使用Zxing.Net 创建透明背景二维码</p>\n</li>\n<li><p>logpower </p>\n</li>\n<li><p>fastreport打印预览时修改页面导致界面变化</p>\n</li>\n<li><p>windows拆分指定程序的合并任务栏按钮功能</p>\n<ul>\n<li><a href=\"https://rammichael.com/7-taskbar-tweaker\">https://rammichael.com/7-taskbar-tweaker</a></li>\n<li><a href=\"https://www.sevenforums.com/customization/28596-possible-ungroup-only-specific-programs.html\">https://www.sevenforums.com/customization/28596-possible-ungroup-only-specific-programs.html</a></li>\n</ul>\n</li>\n<li><p>fastreport每20行数据打印到一个page里面</p>\n<ul>\n<li>官方博客：<a href=\"https://www.fast-report.com/en/blog/148/show/\">https://www.fast-report.com/en/blog/148/show/</a></li>\n<li> <a href=\"https://fastreports.github.io/FastReport.Documentation/ClassReference/api/FastReport.Engine.ReportEngine.html\">https://fastreports.github.io/FastReport.Documentation/ClassReference/api/FastReport.Engine.ReportEngine.html</a></li>\n<li>if (Report.Engine.RowNo&gt;20&amp;&amp; Report.Engine.RowNo%20==1)Engine.StartNewPage()；</li>\n</ul>\n</li>\n<li><p>检查VT-X支持情况</p>\n<ul>\n<li>CPU-Z指令集</li>\n<li>Interl支持<a href=\"https://www.intel.cn/content/www/cn/zh/support/articles/000005486/processors.html\">https://www.intel.cn/content/www/cn/zh/support/articles/000005486/processors.html</a></li>\n<li></li>\n</ul>\n</li>\n<li><p>快速从网站的table中选取所需数据（在<a href=\"http://www.socoologo.com/category/17\">世界500强及图标</a>网站中copy其名称及图片url）</p>\n</li>\n<li><p><a href=\"https://www.wikihow.com/Special:ArticleCreator?t=%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%B8%AA%E6%A0%B8%E9%85%B8%E6%A3%80%E6%B5%8B%E7%82%B9%E5%9C%B0%E5%9B%BE\">wikihow-new 如何做一个核酸检测点地图</a></p>\n</li>\n<li><p>创建一个打开devexpress报表文件类型repx的报表设计器</p>\n<ul>\n<li><a href=\"https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts\">https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts</a></li>\n<li><a href=\"https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner\">https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner</a></li>\n</ul>\n</li>\n<li><p>ASPNET MVC 使用serilog记录日志</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/54404561/using-serilog-in-asp-net-mvc-project\">https://stackoverflow.com/questions/54404561/using-serilog-in-asp-net-mvc-project</a></li>\n<li><a href=\"https://stackoverflow.com/questions/55359440/serilog-with-asp-net-web-api-not-using-enricher\">https://stackoverflow.com/questions/55359440/serilog-with-asp-net-web-api-not-using-enricher</a></li>\n<li><a href=\"https://github.com/serilog-web/classic\">https://github.com/serilog-web/classic</a></li>\n<li><a href=\"https://github.com/serilog-web/classic-mvc\">https://github.com/serilog-web/classic-mvc</a></li>\n</ul>\n</li>\n<li><p><del>devexpress 使用PropertyGridControl展开Collection的Item(without collectionedit edit items)</del></p>\n<ul>\n<li><a href=\"https://www.codeproject.com/Articles/4448/Customized-Display-of-Collection-Data-in-a-Propert#_articleTop\">https://www.codeproject.com/Articles/4448/Customized-Display-of-Collection-Data-in-a-Propert#_articleTop</a></li>\n</ul>\n</li>\n<li><p><del>devexpress 遍历propertygridcontrol中的行</del></p>\n<ul>\n<li><a href=\"https://supportcenter.devexpress.com/ticket/details/t432094/propertygridcontrol-custom-rowoperation-doesn-t-retrieve-all-properties\">https://supportcenter.devexpress.com/ticket/details/t432094/propertygridcontrol-custom-rowoperation-doesn-t-retrieve-all-properties</a></li>\n<li><a href=\"https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal\">https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal</a></li>\n</ul>\n</li>\n<li><p><del>devexpress  propertygridcontrol隐藏CellValue Editor</del></p>\n<ul>\n<li><p><a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell\">https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell</a></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">private</span> void property<span class=\"hljs-constructor\">GridControl1_CustomDrawRowValueCell(<span class=\"hljs-params\">object</span> <span class=\"hljs-params\">sender</span>, CustomDrawRowValueCellEventArgs <span class=\"hljs-params\">e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span> (e.Properties.IsSourceReadOnly)<br>    &#123;<br>        e.Handled = <span class=\"hljs-literal\">true</span>;<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>propertyGrid根据属性动态设置另一属性的可用性</p>\n<ul>\n<li><a href=\"http://www.reza-aghaei.com/make-a-property-read-only-in-propertygrid/\">http://www.reza-aghaei.com/make-a-property-read-only-in-propertygrid/</a></li>\n</ul>\n</li>\n<li><p>C/S程序使用FTP目录自动更新的实践</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/KnightsWarrior/p/AutoUpdater.html\">https://www.cnblogs.com/KnightsWarrior/p/AutoUpdater.html</a></li>\n</ul>\n</li>\n<li><p>git 将最近提交的文件作为发布文件</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/31340933/copy-all-files-changed-in-last-commit\">https://stackoverflow.com/questions/31340933/copy-all-files-changed-in-last-commit</a></li>\n</ul>\n</li>\n<li><p>wpf 创建一个圆角依赖属性IsRoundC</p>\n<ul>\n<li>“D:\\学习\\WPF\\wpf-tutorial\\WPF样式\\WPF样式.sln”</li>\n</ul>\n</li>\n<li><p>steam link 第三方游戏支持手柄操作<a href=\"https://www.reddit.com/r/Steam_Link/comments/9o6m1p/nonsteam_games_and_controllers_dont_work_with/\">https://www.reddit.com/r/Steam_Link/comments/9o6m1p/nonsteam_games_and_controllers_dont_work_with/</a></p>\n</li>\n<li><p>解决merlin路由器 定时ddns重启后失效的问题</p>\n</li>\n<li><p>使用命令行启动一组dotnet服务(解决命令行一次启动多个dotnet服务的问题)</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait\">https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows\">https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows</a></li>\n<li>回答问题：<a href=\"https://stackoverflow.com/questions/47566378/how-to-run-dot-net-core-application-in-detached-mode-using-dotnet-run-command\">https://stackoverflow.com/questions/47566378/how-to-run-dot-net-core-application-in-detached-mode-using-dotnet-run-command</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell\">https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell</a></li>\n<li> todo:1.启动后无法监测失败的数据(需要数据返回或提示)2.运行后不知道执行的什么命令(需要在控制台title上显示执行的命令)</li>\n<li><a href=\"https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646\">https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646</a></li>\n<li><code> cmd.exe /c &quot;start  &quot;&quot;my app&quot;&quot; powershell.exe -NoExit -Command  &quot;&quot;dotnet myapp&quot;&quot;&quot;</code></li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-operator\">-NOT</span> ([<span class=\"hljs-type\">Security.Principal.WindowsPrincipal</span>][<span class=\"hljs-type\">Security.Principal.WindowsIdentity</span>]::GetCurrent()).IsInRole([<span class=\"hljs-type\">Security.Principal.WindowsBuiltInRole</span>] <span class=\"hljs-string\">&quot;Administrator&quot;</span>))  <br>&#123;  <br>  <span class=\"hljs-variable\">$arguments</span> = <span class=\"hljs-string\">&quot;&amp; &#x27;&quot;</span> +<span class=\"hljs-variable\">$myinvocation</span>.mycommand.definition + <span class=\"hljs-string\">&quot;&#x27;&quot;</span><br>  <span class=\"hljs-built_in\">Start-Process</span> powershell <span class=\"hljs-literal\">-Verb</span> runAs <span class=\"hljs-literal\">-ArgumentList</span> <span class=\"hljs-variable\">$arguments</span><br>  <span class=\"hljs-keyword\">Break</span><br>&#125;<br><br><span class=\"hljs-variable\">$version</span>=<span class=\"hljs-string\">&quot;net5.0&quot;</span><br><span class=\"hljs-variable\">$dlls</span>=<span class=\"hljs-selector-tag\">@</span>(<br>    <span class=\"hljs-string\">&quot;DeviceCentral.IdentityService&quot;</span>,<br>    <span class=\"hljs-string\">&quot;DeviceCentral.ApplicationService&quot;</span>,<br>    <span class=\"hljs-string\">&quot;DeviceCentral.IotWebservice&quot;</span>,<br>    <span class=\"hljs-comment\"># &quot;DeviceCentral.Report&quot;,</span><br>    <span class=\"hljs-string\">&quot;DeviceCentral.WebService&quot;</span><br>)<br><br><span class=\"hljs-comment\"># $dlls | ForEach-Object &#123; &amp;()&#125;</span><br><span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-variable\">$index</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$index</span> <span class=\"hljs-operator\">-lt</span> <span class=\"hljs-variable\">$dlls</span>.count; <span class=\"hljs-variable\">$index</span>++)<br>&#123;<br>    <span class=\"hljs-comment\"># $path=&quot; $PSScriptRoot\\&#123;0&#125;\\bin\\Debug\\$version\\&#123;0&#125;.dll&quot; -f $dlls[$index]</span><br>    <span class=\"hljs-variable\">$dllName</span>=<span class=\"hljs-variable\">$dlls</span>[<span class=\"hljs-variable\">$index</span>];<br><br>    <span class=\"hljs-variable\">$path</span>=<span class=\"hljs-string\">&quot; <span class=\"hljs-variable\">$PSScriptRoot</span>\\&#123;0&#125;\\bin\\Debug\\<span class=\"hljs-variable\">$version</span>\\&quot;</span> <span class=\"hljs-operator\">-f</span> <span class=\"hljs-variable\">$dllName</span><br><br>    <span class=\"hljs-variable\">$cmd</span>=<span class=\"hljs-string\">&#x27;cd &#x27;</span>+ <span class=\"hljs-variable\">$path</span>;<br>    <span class=\"hljs-built_in\">Invoke-Expression</span> <span class=\"hljs-variable\">$cmd</span><br><br>    <span class=\"hljs-variable\">$file</span>=<span class=\"hljs-variable\">$path</span>+<span class=\"hljs-variable\">$dllName</span>+<span class=\"hljs-string\">&quot;.dll&quot;</span><br><br>    cmd.exe /c <span class=\"hljs-string\">&quot;start  &quot;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$dllName</span>&quot;</span><span class=\"hljs-string\">&quot; powershell.exe -NoExit -Command  &quot;</span><span class=\"hljs-string\">&quot;dotnet .\\<span class=\"hljs-variable\">$dllName</span>.dll&quot;</span><span class=\"hljs-string\">&quot;&quot;</span><br><br>    <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$dllName</span> execed&quot;</span><br>&#125;<br><span class=\"hljs-comment\"># D:\\SVN\\TNIOT\\V1.0.0\\Program\\2_SourceCode\\InterFace\\DeviceCentral.ApplicationService\\bin\\Debug\\net5.0\\DeviceCentral.ApplicationService.dll</span><br><br><span class=\"hljs-variable\">$exes</span>=<span class=\"hljs-selector-tag\">@</span>(<br>    <span class=\"hljs-string\">&quot;D:\\SVN\\TNIOT\\V1.0.0\\Program\\2_SourceCode\\InterFace\\DeviceCentral.Report\\DeviceCentral.ReportService\\bin\\Debug\\<span class=\"hljs-variable\">$version</span>&quot;</span><br>)<br><span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-variable\">$index</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$index</span> <span class=\"hljs-operator\">-lt</span> <span class=\"hljs-variable\">$exes</span>.count; <span class=\"hljs-variable\">$index</span>++)<br>&#123;<br>    <span class=\"hljs-comment\"># $path=&quot; $PSScriptRoot\\&#123;0&#125;\\bin\\Debug\\$version\\&#123;0&#125;.dll&quot; -f $dlls[$index]</span><br>    <span class=\"hljs-variable\">$path</span>=<span class=\"hljs-variable\">$exes</span>[<span class=\"hljs-variable\">$index</span>]<br><br>    <span class=\"hljs-variable\">$cmd</span>=<span class=\"hljs-string\">&#x27;cd &#x27;</span>+ <span class=\"hljs-variable\">$exes</span>[<span class=\"hljs-variable\">$index</span>];<br>    <span class=\"hljs-built_in\">Invoke-Expression</span> <span class=\"hljs-variable\">$cmd</span><br><br>    <span class=\"hljs-variable\">$name</span>=<span class=\"hljs-built_in\">Get-ChildItem</span> <span class=\"hljs-literal\">-filter</span> *.exe <span class=\"hljs-literal\">-name</span><br>    <span class=\"hljs-variable\">$name</span>=[<span class=\"hljs-type\">System.IO.Path</span>]::GetFileNameWithoutExtension(<span class=\"hljs-variable\">$name</span>)<br>    <span class=\"hljs-variable\">$file</span>=<span class=\"hljs-variable\">$path</span>+<span class=\"hljs-variable\">$name</span><br><br>    cmd.exe /c <span class=\"hljs-string\">&quot;start  &quot;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span>&quot;</span><span class=\"hljs-string\">&quot; powershell.exe -NoExit -Command  &quot;</span><span class=\"hljs-string\">&quot;dotnet .\\<span class=\"hljs-variable\">$name</span>.dll&quot;</span><span class=\"hljs-string\">&quot;&quot;</span><br><br><br>    <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span> execed&quot;</span><br>&#125;<br><br><span class=\"hljs-string\">&quot;all server started.&quot;</span><br><span class=\"hljs-comment\">#  dotnet .\\DeviceCentral.ApplicationService\\bin\\Debug\\$version\\DeviceCentral.ApplicationService.dll</span><br></code></pre></td></tr></table></figure></li>\n<li><p>EF在数据修改后刷新数据缓存</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/ef/core/logging-events-diagnostics/interceptors\">https://docs.microsoft.com/en-us/ef/core/logging-events-diagnostics/interceptors</a></li>\n</ul>\n</li>\n<li><p>订阅Signalr 的前端事件</p>\n<ul>\n<li><a href=\"https://api.jquery.com/jQuery.Callbacks/\">https://api.jquery.com/jQuery.Callbacks/</a></li>\n</ul>\n</li>\n<li><p>postman 使用脚本循环调用api</p>\n</li>\n<li><p>web网站性能优化</p>\n<ul>\n<li><a href=\"https://pagespeed.web.dev/\">https://pagespeed.web.dev/</a></li>\n<li>需要登陆的Lighthouse </li>\n<li>匿名模式 performance</li>\n<li>请求耗时分析 Content Download</li>\n<li>json数据格式优化</li>\n</ul>\n</li>\n<li><p>iframe 历史导航</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/34712852/7960551\">https://stackoverflow.com/a/34712852/7960551</a></li>\n</ul>\n</li>\n<li><p>Seq在octopus deploy中的实践</p>\n<ul>\n<li><a href=\"https://octopus.com/docs/projects/steps/configuration-features/configuration-transforms\">https://octopus.com/docs/projects/steps/configuration-features/configuration-transforms</a></li>\n<li><a href=\"https://octopus.com/docs/projects/steps/configuration-features/substitute-variables-in-templates\">https://octopus.com/docs/projects/steps/configuration-features/substitute-variables-in-templates</a></li>\n<li><a href=\"https://stackoverflow.com/questions/45955114/app-config-transformation-nlog-rules-logger-replace-not-works\">https://stackoverflow.com/questions/45955114/app-config-transformation-nlog-rules-logger-replace-not-works</a></li>\n<li><a href=\"https://elmah.io/tools/webconfig-transformation-tester/\">https://elmah.io/tools/webconfig-transformation-tester/</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dd465326(v=vs.110)?redirectedfrom=MSDN\">https://docs.microsoft.com/en-us/previous-versions/aspnet/dd465326(v=vs.110)?redirectedfrom=MSDN</a></li>\n<li><a href=\"https://octopus.com/docs/projects/steps/configuration-features/xml-configuration-variables-feature\">https://octopus.com/docs/projects/steps/configuration-features/xml-configuration-variables-feature</a></li>\n</ul>\n</li>\n<li><p>docker nginx cloudflare</p>\n<ul>\n<li><a href=\"https://gist.github.com/sergiks/4c1ccddc097e61e6fe5e45c53072a944\">https://gist.github.com/sergiks/4c1ccddc097e61e6fe5e45c53072a944</a></li>\n<li><a href=\"https://eff-certbot.readthedocs.io/en/stable/install.html#running-with-docker\">https://eff-certbot.readthedocs.io/en/stable/install.html#running-with-docker</a></li>\n<li><a href=\"https://dzone.com/articles/nginx-and-https-with-lets-encrypt-certbot-and-cron\">https://dzone.com/articles/nginx-and-https-with-lets-encrypt-certbot-and-cron</a></li>\n</ul>\n</li>\n<li><p>TP Link 网管交换机端口复用 后如何访问管理后台</p>\n<ul>\n<li>个交换机的管理VLAN都改成4，然后您将两个交换机的DHCP设置给禁用，手动指定路由器LAN口的网段IP地址，网关是路由器LAN口IP，DNS您用114.114.114.114的</li>\n<li><a href=\"https://smb.tp-link.com.cn/service/detail_article_4313.html\">https://smb.tp-link.com.cn/service/detail_article_4313.html</a></li>\n<li><a href=\"https://www.tp-link.com/tw/support/faq/788/\">https://www.tp-link.com/tw/support/faq/788/</a></li>\n<li>刚刚完美解决了我的用网需求，这里补充一下我遇到的两个问题：<br>1.之前由于路由器和光猫中的网络与内网是隔离的，用了网管交换机后出现拨号失败(电脑无法获得路由器下发的IP地址，而是169.254.XX.XX这样的IP，这表示路由器的DHCP无效，获取到了光猫的DHCP IP地址)解决方法就是将光猫的Lan口设置为与本地不同的网段<br>2.如果用的TP家的网管交换机,要想保持云管理(商云)在线的话,在设置pvid之后还要在系统管理→IP管理→IP设置中<br>设置 管理VLAN 为 lan的pvid，也就是卡卡设置中的3<br>设置IP地址为 lan同一网段的地址<br>网关为路由器Lan 口ip地址</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/352135931\">https://zhuanlan.zhihu.com/p/352135931</a></li>\n</ul>\n</li>\n<li><p>System.TypeLoadException: ‘Could not load type ‘Microsoft.EntityFrameworkCore.NpgsqlDbContextOptionsExtensions’ from assembly ‘Npgsql.EntityFrameworkCore.PostgreSQL, Version=5.0.5.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7’.’</p>\n<ul>\n<li>问题为依赖问题</li>\n<li>问题在<code>Npgsql.EntityFrameworkCore.PostgreSQL.Design</code></li>\n<li><img src=\"C:\\Users\\王帅\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220527143558373.png\" alt=\"image-20220527143558373\"></li>\n<li>手动添加Npgsql.EntityFrameworkCore.PostgreSQL就可以了</li>\n<li>删除原有引用,一个一个添加新引用,或者调整引用相关dll的版本</li>\n</ul>\n</li>\n<li><p>nginx docker .net  400 error post</p>\n<ul>\n<li><p><a href=\"https://github.com/dotnet/aspnetcore/issues/17081#issuecomment-553741407\">https://github.com/dotnet/aspnetcore/issues/17081#issuecomment-553741407</a></p>\n</li>\n<li><p>```bash<br>proxy_set_header Connection $http_connection</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><br><br>* swagger nginx <br>  * https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/domaindrivendev/</span>Swashbuckle.AspNetCore<span class=\"hljs-regexp\">/issues/</span><span class=\"hljs-number\">1253</span><br>  * https:<span class=\"hljs-regexp\">//</span>www.cnblogs.com<span class=\"hljs-regexp\">/wswind/</span>p/aspnetcore-swagger-nginx.html<br><br>* 个性化终端<br>  * 自动补全 [clink](https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/chrisant996/</span>clink)<br>  * oh-my-zsh<br>    * https:<span class=\"hljs-regexp\">//</span>blog.walterlv.com<span class=\"hljs-regexp\">/post/</span>beautify-powershell-like-zsh.html<br>    * https:<span class=\"hljs-regexp\">//</span>ohmyposh.dev<span class=\"hljs-regexp\">/docs/i</span>nstallation/windows<br>    * https:<span class=\"hljs-regexp\">//</span>docs.microsoft.com<span class=\"hljs-regexp\">/en-us/</span>windows<span class=\"hljs-regexp\">/terminal/</span>tutorials/custom-prompt-setup<span class=\"hljs-comment\">#install-a-nerd-font</span><br><br>* pve虚拟机拨号失败<br><br>  * ikuai <br><br>  * ```<br>    Unable to complete PPPoE Discovery<br>    Timeout waiting <span class=\"hljs-keyword\">for</span> PADO packets<br></code></pre></td></tr></table></figure></li>\n<li><p>尝试电脑直接拨号,原因在vlan交换机不能直接拨号,需要转为正常数据包</p>\n</li>\n</ul>\n</li>\n<li><p>pve docker nas 折腾记</p>\n<ul>\n<li>安装<ul>\n<li><a href=\"https://www.10bests.com/install-synology-dsm-on-pve/\">https://www.10bests.com/install-synology-dsm-on-pve/</a></li>\n</ul>\n</li>\n<li>ddns </li>\n<li>挂载nfs<ul>\n<li><a href=\"https://www.youtube.com/watch?v=XIHmGv7LoyU\">https://www.youtube.com/watch?v=XIHmGv7LoyU</a></li>\n<li><a href=\"https://kb.synology.com/en-br/DSM/tutorial/I_cannot_mount_shared_folders_via_NFS_what_should_I_do\">https://kb.synology.com/en-br/DSM/tutorial/I_cannot_mount_shared_folders_via_NFS_what_should_I_do</a></li>\n<li><a href=\"https://kb.synology.cn/zh-cn/DSM/tutorial/How_to_access_files_on_Synology_NAS_within_the_local_network_NFS\">https://kb.synology.cn/zh-cn/DSM/tutorial/How_to_access_files_on_Synology_NAS_within_the_local_network_NFS</a></li>\n<li><a href=\"https://sourceforge.net/projects/nfsclient/\">https://sourceforge.net/projects/nfsclient/</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>nsprice</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/69793085/cloudflare-kv-namespace-doesnt-bind\">https://stackoverflow.com/questions/69793085/cloudflare-kv-namespace-doesnt-bind</a></li>\n</ul>\n</li>\n<li><p>devextreme TypeError: Cannot assign to read only property ‘input’ of object ‘[object Object]’” error occurs on attempt to update the grid</p>\n<ul>\n<li><a href=\"https://supportcenter.devexpress.com/ticket/details/t718816/datagrid-the-typeerror-cannot-assign-to-read-only-property-input-of-object-object-object\">https://supportcenter.devexpress.com/ticket/details/t718816/datagrid-the-typeerror-cannot-assign-to-read-only-property-input-of-object-object-object</a></li>\n</ul>\n</li>\n<li><p>openwrt openvpn 教程</p>\n<ul>\n<li><p><a href=\"https://gist.github.com/willwhui/1febd37a3dd79a503cc8544c3bb18ece\">在Openwrt中配置Openvpn客户端</a></p>\n</li>\n<li><p><a href=\"https://github.com/martincai/blogs/blob/master/openwrt%2Bopenvpn%2Bazure.md#openwrt--openvpn--azure--%E4%BC%9A%E7%BF%BB%E5%A2%99%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8\">OpenWrt + OpenVPN + Azure = 会翻墙的路由器</a></p>\n</li>\n<li><p><a href=\"https://ithelp.ithome.com.tw/articles/10277516\">https://ithelp.ithome.com.tw/articles/10277516</a></p>\n</li>\n</ul>\n</li>\n<li><p>openwrt 设置 ipv6 </p>\n<ul>\n<li><a href=\"https://rongrongbq.moe/2021/08/firewall-and-DDNS-settings-for-IPv6/\">https://rongrongbq.moe/2021/08/firewall-and-DDNS-settings-for-IPv6/</a></li>\n</ul>\n</li>\n<li><p>解决 微信公众号 请输入合法的URL问题</p>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"https://github.com/xiaoyang-sde/reflare\">https://github.com/xiaoyang-sde/reflare</a></p>\n</li>\n<li><p><a href=\"https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4\">https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4</a></p>\n</li>\n<li><p><a href=\"https://briteming.blogspot.com/2022/06/cloudflare.html\">https://briteming.blogspot.com/2022/06/cloudflare.html</a></p>\n</li>\n<li><p><a href=\"https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176\">https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176</a></p>\n</li>\n<li><p>azure devops pipline docker push denied: requested access to the resource is denied</p>\n<ul>\n<li>docker login </li>\n<li>docker push</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>如何比较两个EXCEL表格<ul>\n<li>office 2013 工具 Spreadsheet Compare</li>\n<li><a href=\"https://support.microsoft.com/zh-cn/office/%E4%BB%BB%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%B5%E5%AD%90%E8%A1%A8%E6%A0%BC%E6%AF%94%E8%BE%83-f2b20af8-a6d3-4780-8011-f15b3229f5d8\">https://support.microsoft.com/zh-cn/office/%E4%BB%BB%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%B5%E5%AD%90%E8%A1%A8%E6%A0%BC%E6%AF%94%E8%BE%83-f2b20af8-a6d3-4780-8011-f15b3229f5d8</a></li>\n</ul>\n</li>\n<li>vscode 终端 搜索历史命令<ul>\n<li><a href=\"https://stackoverflow.com/questions/60669041/vs-code-unable-to-reverse-search-on-built-in-terminal\">https://stackoverflow.com/questions/60669041/vs-code-unable-to-reverse-search-on-built-in-terminal</a></li>\n<li>vscode terminal ctrl r</li>\n</ul>\n</li>\n<li>freshping 添加ssl<ul>\n<li><a href=\"https://statuspage.freshping.io/63235-WangshuaisStatusPage\">https://statuspage.freshping.io/63235-WangshuaisStatusPage</a></li>\n</ul>\n</li>\n<li>office 365 开发人员计划<ul>\n<li>office 365 开发人员计划<a href=\"https://aka.ms/DevProgramDashboard\">https://aka.ms/DevProgramDashboard</a></li>\n<li><a href=\"https://editst.com/2022/microsoft365-domain-email/\">https://editst.com/2022/microsoft365-domain-email/</a></li>\n<li>exchange 设置 catch all <a href=\"https://www.163biz.com/information/1897.html\">https://www.163biz.com/information/1897.html</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>openwrt loopback</li>\n<li>任天堂各区最新实时会员价格</li>\n</ul>\n<iframe width=\"640\" height=\"450\" src=\"https://nsonlineprice.wangshuai.app/#/home\" border=\"0\" framespacing=\"0\" allowfullscreen=\"true\" __idm_id__=\"2465793\" style=\"\n    width: 100%;\n\" frameborder=\"no\"> </iframe>\n* zerotier one 单向访问问题\n  * https://my.zerotier.com/network 添加route\n  * 目标防火墙添加入站规则\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p><del>可使用麦客CRM创建用户表单，收集<code>mcr.microsoft.com</code>中所需的images，然后自动发送邮件，再在power app上根据邮件触发git 提交；任务完成后自动回复麦客CRM中表单填写的邮件</del></p>\n</li>\n<li><p>在微信公众号中接收retag命令</p>\n</li>\n<li><p>域名可使用ReTag.wangshuai.app</p>\n</li>\n<li><p>githubpage 301跳转</p>\n</li>\n<li><p>当用户登录时，通知登陆者的ip <a href=\"https://serverfault.com/questions/361565/how-can-i-get-the-ip-address-of-a-remote-desktop-client-and-how-can-i-trigger-a\">https://serverfault.com/questions/361565/how-can-i-get-the-ip-address-of-a-remote-desktop-client-and-how-can-i-trigger-a</a></p>\n</li>\n<li><p>透明背景图二维码<a href=\"https://www.codeproject.com/Articles/20018/Gradients-made-easy\">https://www.codeproject.com/Articles/20018/Gradients-made-easy</a></p>\n</li>\n<li><p>2020-08-05-使用Zxing.Net 创建透明背景二维码</p>\n</li>\n<li><p>logpower </p>\n</li>\n<li><p>fastreport打印预览时修改页面导致界面变化</p>\n</li>\n<li><p>windows拆分指定程序的合并任务栏按钮功能</p>\n<ul>\n<li><a href=\"https://rammichael.com/7-taskbar-tweaker\">https://rammichael.com/7-taskbar-tweaker</a></li>\n<li><a href=\"https://www.sevenforums.com/customization/28596-possible-ungroup-only-specific-programs.html\">https://www.sevenforums.com/customization/28596-possible-ungroup-only-specific-programs.html</a></li>\n</ul>\n</li>\n<li><p>fastreport每20行数据打印到一个page里面</p>\n<ul>\n<li>官方博客：<a href=\"https://www.fast-report.com/en/blog/148/show/\">https://www.fast-report.com/en/blog/148/show/</a></li>\n<li> <a href=\"https://fastreports.github.io/FastReport.Documentation/ClassReference/api/FastReport.Engine.ReportEngine.html\">https://fastreports.github.io/FastReport.Documentation/ClassReference/api/FastReport.Engine.ReportEngine.html</a></li>\n<li>if (Report.Engine.RowNo&gt;20&amp;&amp; Report.Engine.RowNo%20==1)Engine.StartNewPage()；</li>\n</ul>\n</li>\n<li><p>检查VT-X支持情况</p>\n<ul>\n<li>CPU-Z指令集</li>\n<li>Interl支持<a href=\"https://www.intel.cn/content/www/cn/zh/support/articles/000005486/processors.html\">https://www.intel.cn/content/www/cn/zh/support/articles/000005486/processors.html</a></li>\n<li></li>\n</ul>\n</li>\n<li><p>快速从网站的table中选取所需数据（在<a href=\"http://www.socoologo.com/category/17\">世界500强及图标</a>网站中copy其名称及图片url）</p>\n</li>\n<li><p><a href=\"https://www.wikihow.com/Special:ArticleCreator?t=%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%B8%AA%E6%A0%B8%E9%85%B8%E6%A3%80%E6%B5%8B%E7%82%B9%E5%9C%B0%E5%9B%BE\">wikihow-new 如何做一个核酸检测点地图</a></p>\n</li>\n<li><p>创建一个打开devexpress报表文件类型repx的报表设计器</p>\n<ul>\n<li><a href=\"https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts\">https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts</a></li>\n<li><a href=\"https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner\">https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner</a></li>\n</ul>\n</li>\n<li><p>ASPNET MVC 使用serilog记录日志</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/54404561/using-serilog-in-asp-net-mvc-project\">https://stackoverflow.com/questions/54404561/using-serilog-in-asp-net-mvc-project</a></li>\n<li><a href=\"https://stackoverflow.com/questions/55359440/serilog-with-asp-net-web-api-not-using-enricher\">https://stackoverflow.com/questions/55359440/serilog-with-asp-net-web-api-not-using-enricher</a></li>\n<li><a href=\"https://github.com/serilog-web/classic\">https://github.com/serilog-web/classic</a></li>\n<li><a href=\"https://github.com/serilog-web/classic-mvc\">https://github.com/serilog-web/classic-mvc</a></li>\n</ul>\n</li>\n<li><p><del>devexpress 使用PropertyGridControl展开Collection的Item(without collectionedit edit items)</del></p>\n<ul>\n<li><a href=\"https://www.codeproject.com/Articles/4448/Customized-Display-of-Collection-Data-in-a-Propert#_articleTop\">https://www.codeproject.com/Articles/4448/Customized-Display-of-Collection-Data-in-a-Propert#_articleTop</a></li>\n</ul>\n</li>\n<li><p><del>devexpress 遍历propertygridcontrol中的行</del></p>\n<ul>\n<li><a href=\"https://supportcenter.devexpress.com/ticket/details/t432094/propertygridcontrol-custom-rowoperation-doesn-t-retrieve-all-properties\">https://supportcenter.devexpress.com/ticket/details/t432094/propertygridcontrol-custom-rowoperation-doesn-t-retrieve-all-properties</a></li>\n<li><a href=\"https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal\">https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal</a></li>\n</ul>\n</li>\n<li><p><del>devexpress  propertygridcontrol隐藏CellValue Editor</del></p>\n<ul>\n<li><p><a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell\">https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell</a></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">private</span> void property<span class=\"hljs-constructor\">GridControl1_CustomDrawRowValueCell(<span class=\"hljs-params\">object</span> <span class=\"hljs-params\">sender</span>, CustomDrawRowValueCellEventArgs <span class=\"hljs-params\">e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span> (e.Properties.IsSourceReadOnly)<br>    &#123;<br>        e.Handled = <span class=\"hljs-literal\">true</span>;<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>propertyGrid根据属性动态设置另一属性的可用性</p>\n<ul>\n<li><a href=\"http://www.reza-aghaei.com/make-a-property-read-only-in-propertygrid/\">http://www.reza-aghaei.com/make-a-property-read-only-in-propertygrid/</a></li>\n</ul>\n</li>\n<li><p>C/S程序使用FTP目录自动更新的实践</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/KnightsWarrior/p/AutoUpdater.html\">https://www.cnblogs.com/KnightsWarrior/p/AutoUpdater.html</a></li>\n</ul>\n</li>\n<li><p>git 将最近提交的文件作为发布文件</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/31340933/copy-all-files-changed-in-last-commit\">https://stackoverflow.com/questions/31340933/copy-all-files-changed-in-last-commit</a></li>\n</ul>\n</li>\n<li><p>wpf 创建一个圆角依赖属性IsRoundC</p>\n<ul>\n<li>“D:\\学习\\WPF\\wpf-tutorial\\WPF样式\\WPF样式.sln”</li>\n</ul>\n</li>\n<li><p>steam link 第三方游戏支持手柄操作<a href=\"https://www.reddit.com/r/Steam_Link/comments/9o6m1p/nonsteam_games_and_controllers_dont_work_with/\">https://www.reddit.com/r/Steam_Link/comments/9o6m1p/nonsteam_games_and_controllers_dont_work_with/</a></p>\n</li>\n<li><p>解决merlin路由器 定时ddns重启后失效的问题</p>\n</li>\n<li><p>使用命令行启动一组dotnet服务(解决命令行一次启动多个dotnet服务的问题)</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait\">https://stackoverflow.com/questions/10262231/obtaining-exitcode-using-start-process-and-waitforexit-instead-of-wait</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows\">https://stackoverflow.com/questions/3382082/whats-the-nohup-on-windows</a></li>\n<li>回答问题：<a href=\"https://stackoverflow.com/questions/47566378/how-to-run-dot-net-core-application-in-detached-mode-using-dotnet-run-command\">https://stackoverflow.com/questions/47566378/how-to-run-dot-net-core-application-in-detached-mode-using-dotnet-run-command</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell\">https://stackoverflow.com/questions/6604089/dynamically-generate-command-line-command-then-invoke-using-powershell</a></li>\n<li> todo:1.启动后无法监测失败的数据(需要数据返回或提示)2.运行后不知道执行的什么命令(需要在控制台title上显示执行的命令)</li>\n<li><a href=\"https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646\">https://github.com/dotnet/runtime/issues/2688#issuecomment-339577646</a></li>\n<li><code> cmd.exe /c &quot;start  &quot;&quot;my app&quot;&quot; powershell.exe -NoExit -Command  &quot;&quot;dotnet myapp&quot;&quot;&quot;</code></li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-operator\">-NOT</span> ([<span class=\"hljs-type\">Security.Principal.WindowsPrincipal</span>][<span class=\"hljs-type\">Security.Principal.WindowsIdentity</span>]::GetCurrent()).IsInRole([<span class=\"hljs-type\">Security.Principal.WindowsBuiltInRole</span>] <span class=\"hljs-string\">&quot;Administrator&quot;</span>))  <br>&#123;  <br>  <span class=\"hljs-variable\">$arguments</span> = <span class=\"hljs-string\">&quot;&amp; &#x27;&quot;</span> +<span class=\"hljs-variable\">$myinvocation</span>.mycommand.definition + <span class=\"hljs-string\">&quot;&#x27;&quot;</span><br>  <span class=\"hljs-built_in\">Start-Process</span> powershell <span class=\"hljs-literal\">-Verb</span> runAs <span class=\"hljs-literal\">-ArgumentList</span> <span class=\"hljs-variable\">$arguments</span><br>  <span class=\"hljs-keyword\">Break</span><br>&#125;<br><br><span class=\"hljs-variable\">$version</span>=<span class=\"hljs-string\">&quot;net5.0&quot;</span><br><span class=\"hljs-variable\">$dlls</span>=<span class=\"hljs-selector-tag\">@</span>(<br>    <span class=\"hljs-string\">&quot;DeviceCentral.IdentityService&quot;</span>,<br>    <span class=\"hljs-string\">&quot;DeviceCentral.ApplicationService&quot;</span>,<br>    <span class=\"hljs-string\">&quot;DeviceCentral.IotWebservice&quot;</span>,<br>    <span class=\"hljs-comment\"># &quot;DeviceCentral.Report&quot;,</span><br>    <span class=\"hljs-string\">&quot;DeviceCentral.WebService&quot;</span><br>)<br><br><span class=\"hljs-comment\"># $dlls | ForEach-Object &#123; &amp;()&#125;</span><br><span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-variable\">$index</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$index</span> <span class=\"hljs-operator\">-lt</span> <span class=\"hljs-variable\">$dlls</span>.count; <span class=\"hljs-variable\">$index</span>++)<br>&#123;<br>    <span class=\"hljs-comment\"># $path=&quot; $PSScriptRoot\\&#123;0&#125;\\bin\\Debug\\$version\\&#123;0&#125;.dll&quot; -f $dlls[$index]</span><br>    <span class=\"hljs-variable\">$dllName</span>=<span class=\"hljs-variable\">$dlls</span>[<span class=\"hljs-variable\">$index</span>];<br><br>    <span class=\"hljs-variable\">$path</span>=<span class=\"hljs-string\">&quot; <span class=\"hljs-variable\">$PSScriptRoot</span>\\&#123;0&#125;\\bin\\Debug\\<span class=\"hljs-variable\">$version</span>\\&quot;</span> <span class=\"hljs-operator\">-f</span> <span class=\"hljs-variable\">$dllName</span><br><br>    <span class=\"hljs-variable\">$cmd</span>=<span class=\"hljs-string\">&#x27;cd &#x27;</span>+ <span class=\"hljs-variable\">$path</span>;<br>    <span class=\"hljs-built_in\">Invoke-Expression</span> <span class=\"hljs-variable\">$cmd</span><br><br>    <span class=\"hljs-variable\">$file</span>=<span class=\"hljs-variable\">$path</span>+<span class=\"hljs-variable\">$dllName</span>+<span class=\"hljs-string\">&quot;.dll&quot;</span><br><br>    cmd.exe /c <span class=\"hljs-string\">&quot;start  &quot;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$dllName</span>&quot;</span><span class=\"hljs-string\">&quot; powershell.exe -NoExit -Command  &quot;</span><span class=\"hljs-string\">&quot;dotnet .\\<span class=\"hljs-variable\">$dllName</span>.dll&quot;</span><span class=\"hljs-string\">&quot;&quot;</span><br><br>    <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$dllName</span> execed&quot;</span><br>&#125;<br><span class=\"hljs-comment\"># D:\\SVN\\TNIOT\\V1.0.0\\Program\\2_SourceCode\\InterFace\\DeviceCentral.ApplicationService\\bin\\Debug\\net5.0\\DeviceCentral.ApplicationService.dll</span><br><br><span class=\"hljs-variable\">$exes</span>=<span class=\"hljs-selector-tag\">@</span>(<br>    <span class=\"hljs-string\">&quot;D:\\SVN\\TNIOT\\V1.0.0\\Program\\2_SourceCode\\InterFace\\DeviceCentral.Report\\DeviceCentral.ReportService\\bin\\Debug\\<span class=\"hljs-variable\">$version</span>&quot;</span><br>)<br><span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-variable\">$index</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$index</span> <span class=\"hljs-operator\">-lt</span> <span class=\"hljs-variable\">$exes</span>.count; <span class=\"hljs-variable\">$index</span>++)<br>&#123;<br>    <span class=\"hljs-comment\"># $path=&quot; $PSScriptRoot\\&#123;0&#125;\\bin\\Debug\\$version\\&#123;0&#125;.dll&quot; -f $dlls[$index]</span><br>    <span class=\"hljs-variable\">$path</span>=<span class=\"hljs-variable\">$exes</span>[<span class=\"hljs-variable\">$index</span>]<br><br>    <span class=\"hljs-variable\">$cmd</span>=<span class=\"hljs-string\">&#x27;cd &#x27;</span>+ <span class=\"hljs-variable\">$exes</span>[<span class=\"hljs-variable\">$index</span>];<br>    <span class=\"hljs-built_in\">Invoke-Expression</span> <span class=\"hljs-variable\">$cmd</span><br><br>    <span class=\"hljs-variable\">$name</span>=<span class=\"hljs-built_in\">Get-ChildItem</span> <span class=\"hljs-literal\">-filter</span> *.exe <span class=\"hljs-literal\">-name</span><br>    <span class=\"hljs-variable\">$name</span>=[<span class=\"hljs-type\">System.IO.Path</span>]::GetFileNameWithoutExtension(<span class=\"hljs-variable\">$name</span>)<br>    <span class=\"hljs-variable\">$file</span>=<span class=\"hljs-variable\">$path</span>+<span class=\"hljs-variable\">$name</span><br><br>    cmd.exe /c <span class=\"hljs-string\">&quot;start  &quot;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span>&quot;</span><span class=\"hljs-string\">&quot; powershell.exe -NoExit -Command  &quot;</span><span class=\"hljs-string\">&quot;dotnet .\\<span class=\"hljs-variable\">$name</span>.dll&quot;</span><span class=\"hljs-string\">&quot;&quot;</span><br><br><br>    <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span> execed&quot;</span><br>&#125;<br><br><span class=\"hljs-string\">&quot;all server started.&quot;</span><br><span class=\"hljs-comment\">#  dotnet .\\DeviceCentral.ApplicationService\\bin\\Debug\\$version\\DeviceCentral.ApplicationService.dll</span><br></code></pre></td></tr></table></figure></li>\n<li><p>EF在数据修改后刷新数据缓存</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/ef/core/logging-events-diagnostics/interceptors\">https://docs.microsoft.com/en-us/ef/core/logging-events-diagnostics/interceptors</a></li>\n</ul>\n</li>\n<li><p>订阅Signalr 的前端事件</p>\n<ul>\n<li><a href=\"https://api.jquery.com/jQuery.Callbacks/\">https://api.jquery.com/jQuery.Callbacks/</a></li>\n</ul>\n</li>\n<li><p>postman 使用脚本循环调用api</p>\n</li>\n<li><p>web网站性能优化</p>\n<ul>\n<li><a href=\"https://pagespeed.web.dev/\">https://pagespeed.web.dev/</a></li>\n<li>需要登陆的Lighthouse </li>\n<li>匿名模式 performance</li>\n<li>请求耗时分析 Content Download</li>\n<li>json数据格式优化</li>\n</ul>\n</li>\n<li><p>iframe 历史导航</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/34712852/7960551\">https://stackoverflow.com/a/34712852/7960551</a></li>\n</ul>\n</li>\n<li><p>Seq在octopus deploy中的实践</p>\n<ul>\n<li><a href=\"https://octopus.com/docs/projects/steps/configuration-features/configuration-transforms\">https://octopus.com/docs/projects/steps/configuration-features/configuration-transforms</a></li>\n<li><a href=\"https://octopus.com/docs/projects/steps/configuration-features/substitute-variables-in-templates\">https://octopus.com/docs/projects/steps/configuration-features/substitute-variables-in-templates</a></li>\n<li><a href=\"https://stackoverflow.com/questions/45955114/app-config-transformation-nlog-rules-logger-replace-not-works\">https://stackoverflow.com/questions/45955114/app-config-transformation-nlog-rules-logger-replace-not-works</a></li>\n<li><a href=\"https://elmah.io/tools/webconfig-transformation-tester/\">https://elmah.io/tools/webconfig-transformation-tester/</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dd465326(v=vs.110)?redirectedfrom=MSDN\">https://docs.microsoft.com/en-us/previous-versions/aspnet/dd465326(v=vs.110)?redirectedfrom=MSDN</a></li>\n<li><a href=\"https://octopus.com/docs/projects/steps/configuration-features/xml-configuration-variables-feature\">https://octopus.com/docs/projects/steps/configuration-features/xml-configuration-variables-feature</a></li>\n</ul>\n</li>\n<li><p>docker nginx cloudflare</p>\n<ul>\n<li><a href=\"https://gist.github.com/sergiks/4c1ccddc097e61e6fe5e45c53072a944\">https://gist.github.com/sergiks/4c1ccddc097e61e6fe5e45c53072a944</a></li>\n<li><a href=\"https://eff-certbot.readthedocs.io/en/stable/install.html#running-with-docker\">https://eff-certbot.readthedocs.io/en/stable/install.html#running-with-docker</a></li>\n<li><a href=\"https://dzone.com/articles/nginx-and-https-with-lets-encrypt-certbot-and-cron\">https://dzone.com/articles/nginx-and-https-with-lets-encrypt-certbot-and-cron</a></li>\n</ul>\n</li>\n<li><p>TP Link 网管交换机端口复用 后如何访问管理后台</p>\n<ul>\n<li>个交换机的管理VLAN都改成4，然后您将两个交换机的DHCP设置给禁用，手动指定路由器LAN口的网段IP地址，网关是路由器LAN口IP，DNS您用114.114.114.114的</li>\n<li><a href=\"https://smb.tp-link.com.cn/service/detail_article_4313.html\">https://smb.tp-link.com.cn/service/detail_article_4313.html</a></li>\n<li><a href=\"https://www.tp-link.com/tw/support/faq/788/\">https://www.tp-link.com/tw/support/faq/788/</a></li>\n<li>刚刚完美解决了我的用网需求，这里补充一下我遇到的两个问题：<br>1.之前由于路由器和光猫中的网络与内网是隔离的，用了网管交换机后出现拨号失败(电脑无法获得路由器下发的IP地址，而是169.254.XX.XX这样的IP，这表示路由器的DHCP无效，获取到了光猫的DHCP IP地址)解决方法就是将光猫的Lan口设置为与本地不同的网段<br>2.如果用的TP家的网管交换机,要想保持云管理(商云)在线的话,在设置pvid之后还要在系统管理→IP管理→IP设置中<br>设置 管理VLAN 为 lan的pvid，也就是卡卡设置中的3<br>设置IP地址为 lan同一网段的地址<br>网关为路由器Lan 口ip地址</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/352135931\">https://zhuanlan.zhihu.com/p/352135931</a></li>\n</ul>\n</li>\n<li><p>System.TypeLoadException: ‘Could not load type ‘Microsoft.EntityFrameworkCore.NpgsqlDbContextOptionsExtensions’ from assembly ‘Npgsql.EntityFrameworkCore.PostgreSQL, Version=5.0.5.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7’.’</p>\n<ul>\n<li>问题为依赖问题</li>\n<li>问题在<code>Npgsql.EntityFrameworkCore.PostgreSQL.Design</code></li>\n<li><img src=\"C:\\Users\\王帅\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220527143558373.png\" alt=\"image-20220527143558373\"></li>\n<li>手动添加Npgsql.EntityFrameworkCore.PostgreSQL就可以了</li>\n<li>删除原有引用,一个一个添加新引用,或者调整引用相关dll的版本</li>\n</ul>\n</li>\n<li><p>nginx docker .net  400 error post</p>\n<ul>\n<li><p><a href=\"https://github.com/dotnet/aspnetcore/issues/17081#issuecomment-553741407\">https://github.com/dotnet/aspnetcore/issues/17081#issuecomment-553741407</a></p>\n</li>\n<li><p>```bash<br>proxy_set_header Connection $http_connection</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><br><br>* swagger nginx <br>  * https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/domaindrivendev/</span>Swashbuckle.AspNetCore<span class=\"hljs-regexp\">/issues/</span><span class=\"hljs-number\">1253</span><br>  * https:<span class=\"hljs-regexp\">//</span>www.cnblogs.com<span class=\"hljs-regexp\">/wswind/</span>p/aspnetcore-swagger-nginx.html<br><br>* 个性化终端<br>  * 自动补全 [clink](https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/chrisant996/</span>clink)<br>  * oh-my-zsh<br>    * https:<span class=\"hljs-regexp\">//</span>blog.walterlv.com<span class=\"hljs-regexp\">/post/</span>beautify-powershell-like-zsh.html<br>    * https:<span class=\"hljs-regexp\">//</span>ohmyposh.dev<span class=\"hljs-regexp\">/docs/i</span>nstallation/windows<br>    * https:<span class=\"hljs-regexp\">//</span>docs.microsoft.com<span class=\"hljs-regexp\">/en-us/</span>windows<span class=\"hljs-regexp\">/terminal/</span>tutorials/custom-prompt-setup<span class=\"hljs-comment\">#install-a-nerd-font</span><br><br>* pve虚拟机拨号失败<br><br>  * ikuai <br><br>  * ```<br>    Unable to complete PPPoE Discovery<br>    Timeout waiting <span class=\"hljs-keyword\">for</span> PADO packets<br></code></pre></td></tr></table></figure></li>\n<li><p>尝试电脑直接拨号,原因在vlan交换机不能直接拨号,需要转为正常数据包</p>\n</li>\n</ul>\n</li>\n<li><p>pve docker nas 折腾记</p>\n<ul>\n<li>安装<ul>\n<li><a href=\"https://www.10bests.com/install-synology-dsm-on-pve/\">https://www.10bests.com/install-synology-dsm-on-pve/</a></li>\n</ul>\n</li>\n<li>ddns </li>\n<li>挂载nfs<ul>\n<li><a href=\"https://www.youtube.com/watch?v=XIHmGv7LoyU\">https://www.youtube.com/watch?v=XIHmGv7LoyU</a></li>\n<li><a href=\"https://kb.synology.com/en-br/DSM/tutorial/I_cannot_mount_shared_folders_via_NFS_what_should_I_do\">https://kb.synology.com/en-br/DSM/tutorial/I_cannot_mount_shared_folders_via_NFS_what_should_I_do</a></li>\n<li><a href=\"https://kb.synology.cn/zh-cn/DSM/tutorial/How_to_access_files_on_Synology_NAS_within_the_local_network_NFS\">https://kb.synology.cn/zh-cn/DSM/tutorial/How_to_access_files_on_Synology_NAS_within_the_local_network_NFS</a></li>\n<li><a href=\"https://sourceforge.net/projects/nfsclient/\">https://sourceforge.net/projects/nfsclient/</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>nsprice</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/69793085/cloudflare-kv-namespace-doesnt-bind\">https://stackoverflow.com/questions/69793085/cloudflare-kv-namespace-doesnt-bind</a></li>\n</ul>\n</li>\n<li><p>devextreme TypeError: Cannot assign to read only property ‘input’ of object ‘[object Object]’” error occurs on attempt to update the grid</p>\n<ul>\n<li><a href=\"https://supportcenter.devexpress.com/ticket/details/t718816/datagrid-the-typeerror-cannot-assign-to-read-only-property-input-of-object-object-object\">https://supportcenter.devexpress.com/ticket/details/t718816/datagrid-the-typeerror-cannot-assign-to-read-only-property-input-of-object-object-object</a></li>\n</ul>\n</li>\n<li><p>openwrt openvpn 教程</p>\n<ul>\n<li><p><a href=\"https://gist.github.com/willwhui/1febd37a3dd79a503cc8544c3bb18ece\">在Openwrt中配置Openvpn客户端</a></p>\n</li>\n<li><p><a href=\"https://github.com/martincai/blogs/blob/master/openwrt%2Bopenvpn%2Bazure.md#openwrt--openvpn--azure--%E4%BC%9A%E7%BF%BB%E5%A2%99%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8\">OpenWrt + OpenVPN + Azure = 会翻墙的路由器</a></p>\n</li>\n<li><p><a href=\"https://ithelp.ithome.com.tw/articles/10277516\">https://ithelp.ithome.com.tw/articles/10277516</a></p>\n</li>\n</ul>\n</li>\n<li><p>openwrt 设置 ipv6 </p>\n<ul>\n<li><a href=\"https://rongrongbq.moe/2021/08/firewall-and-DDNS-settings-for-IPv6/\">https://rongrongbq.moe/2021/08/firewall-and-DDNS-settings-for-IPv6/</a></li>\n</ul>\n</li>\n<li><p>解决 微信公众号 请输入合法的URL问题</p>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"https://github.com/xiaoyang-sde/reflare\">https://github.com/xiaoyang-sde/reflare</a></p>\n</li>\n<li><p><a href=\"https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4\">https://support.cloudflare.com/hc/zh-cn/articles/115003011431-Cloudflare-5XX-%E9%94%99%E8%AF%AF%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4</a></p>\n</li>\n<li><p><a href=\"https://briteming.blogspot.com/2022/06/cloudflare.html\">https://briteming.blogspot.com/2022/06/cloudflare.html</a></p>\n</li>\n<li><p><a href=\"https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176\">https://github.com/XIU2/CloudflareSpeedTest/issues/205#issuecomment-1121170176</a></p>\n</li>\n<li><p>azure devops pipline docker push denied: requested access to the resource is denied</p>\n<ul>\n<li>docker login </li>\n<li>docker push</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>如何比较两个EXCEL表格<ul>\n<li>office 2013 工具 Spreadsheet Compare</li>\n<li><a href=\"https://support.microsoft.com/zh-cn/office/%E4%BB%BB%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%B5%E5%AD%90%E8%A1%A8%E6%A0%BC%E6%AF%94%E8%BE%83-f2b20af8-a6d3-4780-8011-f15b3229f5d8\">https://support.microsoft.com/zh-cn/office/%E4%BB%BB%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%B5%E5%AD%90%E8%A1%A8%E6%A0%BC%E6%AF%94%E8%BE%83-f2b20af8-a6d3-4780-8011-f15b3229f5d8</a></li>\n</ul>\n</li>\n<li>vscode 终端 搜索历史命令<ul>\n<li><a href=\"https://stackoverflow.com/questions/60669041/vs-code-unable-to-reverse-search-on-built-in-terminal\">https://stackoverflow.com/questions/60669041/vs-code-unable-to-reverse-search-on-built-in-terminal</a></li>\n<li>vscode terminal ctrl r</li>\n</ul>\n</li>\n<li>freshping 添加ssl<ul>\n<li><a href=\"https://statuspage.freshping.io/63235-WangshuaisStatusPage\">https://statuspage.freshping.io/63235-WangshuaisStatusPage</a></li>\n</ul>\n</li>\n<li>office 365 开发人员计划<ul>\n<li>office 365 开发人员计划<a href=\"https://aka.ms/DevProgramDashboard\">https://aka.ms/DevProgramDashboard</a></li>\n<li><a href=\"https://editst.com/2022/microsoft365-domain-email/\">https://editst.com/2022/microsoft365-domain-email/</a></li>\n<li>exchange 设置 catch all <a href=\"https://www.163biz.com/information/1897.html\">https://www.163biz.com/information/1897.html</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>openwrt loopback</li>\n<li>任天堂各区最新实时会员价格</li>\n</ul>\n<iframe width=\"640\" height=\"450\" src=\"https://nsonlineprice.wangshuai.app/#/home\" border=\"0\" framespacing=\"0\" allowfullscreen=\"true\" __idm_id__=\"2465793\" style=\"\n    width: 100%;\n\" frameborder=\"no\"> </iframe>\n* zerotier one 单向访问问题\n  * https://my.zerotier.com/network 添加route\n  * 目标防火墙添加入站规则\n"},{"layout":"post","title":"Devexpress自定义导出(Export)选定行数据到Excel简易版","subtitle":"使用自带GridView.ExportToXls方法快速导出","date":"2017-09-18T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"## 引言\n\n我们知道，一般在winform中导出GridView的内容为Excel时会引用第三方库；如Aspose、NPOI等，它们需要你逐行设置导出的内容，虽然功能强大，但有时略显麻烦，可喜的是Devexpress中已经为我们实现了导出的方法[GridControl.ExportToXls](https://documentation.devexpress.com/WindowsForms/DevExpress.XtraGrid.GridControl.ExportToXls.overloads)，它可以将整个GridView全部导出，但通常我们仅需要导出选定行，此时需要做一些设置。\n\n## 步骤\n\n- 首先设置GridView允许选择多行以及选中行导出模式\n\n```c#\n//选择多行\nGridView.OptionsSelection.MultiSelect = true;\n//仅打印选中行\nGridView.OptionsPrint.PrintSelectedRowsOnly = true;\n```\n\n- 然后使用Devexpress自带的导出功能自动打印\n\n```c#\nvar fileName = string.Empty;\n\nvar dialog = new SaveFileDialog();\ndialog.Title = \"保存文件\";\ndialog.RestoreDirectory = true;\ndialog.AddExtension = true;\n\n////判断默认文件名称是否存在?若存在,则赋值\n//if (string.IsNullOrEmpty(defaultFileName) == false)\n//{\n// dialog.FileName = defaultFileName;\n//}\n\ndialog.Filter = @\"Excel 97-2003 文件|*.xls\";\n\nif (dialog.ShowDialog() == DialogResult.OK)\n{\n    fileName = dialog.FileName;\n}\nif (string.IsNullOrEmpty(fileName)) return;\ntry\n{\n    GridView.ExportToXls(fileName);\n    MessageBox.Show(\"导出Excel成功\");\n}\ncatch (Exception ex)\n{\n    throw ex;\n}\n```\n\n## 效果图\n\ndevexpress导出选中行效果图\n![效果图](/img/导出选中行.png)\n\n","source":"_posts/2017-09-19-Devexpress自定义导出(Export)选定行数据到Excel简易版.md","raw":"---\nlayout:     post\ntitle:      Devexpress自定义导出(Export)选定行数据到Excel简易版\nsubtitle:   使用自带GridView.ExportToXls方法快速导出\ndate:       2017-09-19\nauthor:     王帅\ncatalog: true\ntags:\n    - Devexpress\n    - Excel\n    - winform\ntypora-root-url: ..\n---\n## 引言\n\n我们知道，一般在winform中导出GridView的内容为Excel时会引用第三方库；如Aspose、NPOI等，它们需要你逐行设置导出的内容，虽然功能强大，但有时略显麻烦，可喜的是Devexpress中已经为我们实现了导出的方法[GridControl.ExportToXls](https://documentation.devexpress.com/WindowsForms/DevExpress.XtraGrid.GridControl.ExportToXls.overloads)，它可以将整个GridView全部导出，但通常我们仅需要导出选定行，此时需要做一些设置。\n\n## 步骤\n\n- 首先设置GridView允许选择多行以及选中行导出模式\n\n```c#\n//选择多行\nGridView.OptionsSelection.MultiSelect = true;\n//仅打印选中行\nGridView.OptionsPrint.PrintSelectedRowsOnly = true;\n```\n\n- 然后使用Devexpress自带的导出功能自动打印\n\n```c#\nvar fileName = string.Empty;\n\nvar dialog = new SaveFileDialog();\ndialog.Title = \"保存文件\";\ndialog.RestoreDirectory = true;\ndialog.AddExtension = true;\n\n////判断默认文件名称是否存在?若存在,则赋值\n//if (string.IsNullOrEmpty(defaultFileName) == false)\n//{\n// dialog.FileName = defaultFileName;\n//}\n\ndialog.Filter = @\"Excel 97-2003 文件|*.xls\";\n\nif (dialog.ShowDialog() == DialogResult.OK)\n{\n    fileName = dialog.FileName;\n}\nif (string.IsNullOrEmpty(fileName)) return;\ntry\n{\n    GridView.ExportToXls(fileName);\n    MessageBox.Show(\"导出Excel成功\");\n}\ncatch (Exception ex)\n{\n    throw ex;\n}\n```\n\n## 效果图\n\ndevexpress导出选中行效果图\n![效果图](/img/导出选中行.png)\n\n","slug":"2017-09-19-Devexpress自定义导出(Export)选定行数据到Excel简易版","published":1,"updated":"2020-03-16T16:16:57.145Z","_id":"cl8vdlqh5000i3oo233vbbcye","comments":1,"photos":[],"link":"","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>我们知道，一般在winform中导出GridView的内容为Excel时会引用第三方库；如Aspose、NPOI等，它们需要你逐行设置导出的内容，虽然功能强大，但有时略显麻烦，可喜的是Devexpress中已经为我们实现了导出的方法<a href=\"https://documentation.devexpress.com/WindowsForms/DevExpress.XtraGrid.GridControl.ExportToXls.overloads\">GridControl.ExportToXls</a>，它可以将整个GridView全部导出，但通常我们仅需要导出选定行，此时需要做一些设置。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li>首先设置GridView允许选择多行以及选中行导出模式</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-comment\">//选择多行</span><br>GridView.OptionsSelection.MultiSelect = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-comment\">//仅打印选中行</span><br>GridView.OptionsPrint.PrintSelectedRowsOnly = <span class=\"hljs-literal\">true</span>;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>然后使用Devexpress自带的导出功能自动打印</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-keyword\">var</span> fileName = <span class=\"hljs-built_in\">string</span>.Empty;<br><br><span class=\"hljs-keyword\">var</span> dialog = <span class=\"hljs-keyword\">new</span> SaveFileDialog();<br>dialog.Title = <span class=\"hljs-string\">&quot;保存文件&quot;</span>;<br>dialog.RestoreDirectory = <span class=\"hljs-literal\">true</span>;<br>dialog.AddExtension = <span class=\"hljs-literal\">true</span>;<br><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>/判断默认文件名称是否存在?若存在,则赋值</span><br><span class=\"hljs-comment\">//if (string.IsNullOrEmpty(defaultFileName) == false)</span><br><span class=\"hljs-comment\">//&#123;</span><br><span class=\"hljs-comment\">// dialog.FileName = defaultFileName;</span><br><span class=\"hljs-comment\">//&#125;</span><br><br>dialog.Filter = <span class=\"hljs-string\">@&quot;Excel 97-2003 文件|*.xls&quot;</span>;<br><br><span class=\"hljs-keyword\">if</span> (dialog.ShowDialog() == DialogResult.OK)<br>&#123;<br>    fileName = dialog.FileName;<br>&#125;<br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">string</span>.IsNullOrEmpty(fileName)) <span class=\"hljs-keyword\">return</span>;<br><span class=\"hljs-keyword\">try</span><br>&#123;<br>    GridView.ExportToXls(fileName);<br>    MessageBox.Show(<span class=\"hljs-string\">&quot;导出Excel成功&quot;</span>);<br>&#125;<br><span class=\"hljs-keyword\">catch</span> (Exception ex)<br>&#123;<br>    <span class=\"hljs-keyword\">throw</span> ex;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p>devexpress导出选中行效果图<br><img src=\"/img/%E5%AF%BC%E5%87%BA%E9%80%89%E4%B8%AD%E8%A1%8C.png\" alt=\"效果图\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>我们知道，一般在winform中导出GridView的内容为Excel时会引用第三方库；如Aspose、NPOI等，它们需要你逐行设置导出的内容，虽然功能强大，但有时略显麻烦，可喜的是Devexpress中已经为我们实现了导出的方法<a href=\"https://documentation.devexpress.com/WindowsForms/DevExpress.XtraGrid.GridControl.ExportToXls.overloads\">GridControl.ExportToXls</a>，它可以将整个GridView全部导出，但通常我们仅需要导出选定行，此时需要做一些设置。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li>首先设置GridView允许选择多行以及选中行导出模式</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-comment\">//选择多行</span><br>GridView.OptionsSelection.MultiSelect = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-comment\">//仅打印选中行</span><br>GridView.OptionsPrint.PrintSelectedRowsOnly = <span class=\"hljs-literal\">true</span>;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>然后使用Devexpress自带的导出功能自动打印</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-keyword\">var</span> fileName = <span class=\"hljs-built_in\">string</span>.Empty;<br><br><span class=\"hljs-keyword\">var</span> dialog = <span class=\"hljs-keyword\">new</span> SaveFileDialog();<br>dialog.Title = <span class=\"hljs-string\">&quot;保存文件&quot;</span>;<br>dialog.RestoreDirectory = <span class=\"hljs-literal\">true</span>;<br>dialog.AddExtension = <span class=\"hljs-literal\">true</span>;<br><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>/判断默认文件名称是否存在?若存在,则赋值</span><br><span class=\"hljs-comment\">//if (string.IsNullOrEmpty(defaultFileName) == false)</span><br><span class=\"hljs-comment\">//&#123;</span><br><span class=\"hljs-comment\">// dialog.FileName = defaultFileName;</span><br><span class=\"hljs-comment\">//&#125;</span><br><br>dialog.Filter = <span class=\"hljs-string\">@&quot;Excel 97-2003 文件|*.xls&quot;</span>;<br><br><span class=\"hljs-keyword\">if</span> (dialog.ShowDialog() == DialogResult.OK)<br>&#123;<br>    fileName = dialog.FileName;<br>&#125;<br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">string</span>.IsNullOrEmpty(fileName)) <span class=\"hljs-keyword\">return</span>;<br><span class=\"hljs-keyword\">try</span><br>&#123;<br>    GridView.ExportToXls(fileName);<br>    MessageBox.Show(<span class=\"hljs-string\">&quot;导出Excel成功&quot;</span>);<br>&#125;<br><span class=\"hljs-keyword\">catch</span> (Exception ex)<br>&#123;<br>    <span class=\"hljs-keyword\">throw</span> ex;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p>devexpress导出选中行效果图<br><img src=\"/img/%E5%AF%BC%E5%87%BA%E9%80%89%E4%B8%AD%E8%A1%8C.png\" alt=\"效果图\"></p>\n"},{"layout":"post","title":"Devexpress打印预览(PrintPreview)时修改打印数据","subtitle":"所见即所得的打印数据快速修改方法","date":"2017-10-06T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"## 引言\n\n打印功能对于一个系统来说通常是强需求，每个系统都会根据自己所提供的服务生成不同的打印模板，但光有模板往往不够用，因为有时会需要在打印预览(PrintPreview)时根据打印内容临时修改打印的数据，而且这种修改并不需要应用于打印数据源的修改，只需要打印出变更后的内容就行了；所以我们只需修改内存中的数据，然后重新打印就可以了。\n\n在最新的Devexpress 17.1中[XRLable](https://documentation.devexpress.com/XtraReports/17403/Concepts/Report-Controls/Label)，[XRTableCell](https://documentation.devexpress.com/XtraReports/9741/Concepts/Report-Controls/Table)和[Character Comb](https://documentation.devexpress.com/XtraReports/117157/Concepts/Report-Controls/Character-Comb)有[EditOptions](https://documentation.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XRLabel.EditOptions.property)属性，可以实现直接在打印预览界面(PrintPreview)上修改打印的数据，具体请参考[官方示例](https://documentation.devexpress.com/XtraReports/117343/Concepts/Creating-Reports/Navigation-and-Interaction/Content-Editing-in-Print-Preview)；但很可惜我相信大部分的系统都还和我用的一样，没有使用17.1，所以只能乖乖修改数据然后重新打印。\n\n## 效果图\n![打印预览界面双击修改打印数据](/img/reportPreview.gif)\n\n## 步骤\n\n- #### 首先我们设计好打印内容的模板\n\n打印内容模板:\n\n![打印内容模板](/img/report1.png)\n\n​\t打印预览效果图:\n\n![打印预览效果图](/img/printpreviewbase0.png)\n\n打印预览(PrintPreview)中的每一个Page表示一个model，我们需要一种方式来修改对应model的数据；通过查看[官方示例](https://documentation.devexpress.com/CoreLibraries/DevExpress.XtraPrinting.Brick.class)我们知道，打印预览界面(PrintPreview)的元素实际上都是Brick类型的子类，你点击每一个Page都触发的是[BrickClick](https://documentation.devexpress.com/WindowsForms/DevExpress.XtraPrinting.Control.PrintControl.BrickClick.event)事件：\n\n![](/img/brickclick.png)\n\n通过调试可以发现打印预览界面(PrintPreview)元素构成的层级关系：\n\n![层级关系](/img/bricktable.png)\n\n所以我们可以把每一个model的主键保存在每一个Page中，我选用了BrickTable（你也可以选择其它元素，只是在我的例子中刚好每一个Page对应于一个Table）\n\n- 所以第二步是保存model的主键到BrickTable的AnchorName中（如果你在打印预览界面(PrintPreview)使用了目录功能，可能就需要用其它方式保存数据了）\n\n```c#\n/// <summary>\n/// 保存的打印页主键列表\n/// </summary>\nprivate List<int> ListStudentId { get;set; }\n/// <summary>\n/// 生成Table明细数据之后的事件处理方法\n/// </summary>\n/// <param name=\"sender\"></param>\n/// <param name=\"e\"></param>\nprivate void Detail1_AfterPrint(object sender, EventArgs e)\n{\n    var dtRowView = DetailReport.GetCurrentRow() as DataRowView;\n    if (dtRowView != null)\n    {\n        var studentId =Convert.ToInt32(dtRowView[\"StudentId\"]);\n     \n        ListStudentId.Add(studentId);//将Key记录下来\n    }\n}\n```\n* 第三步，在生成打印明细数据时将主键赋值到BrickTable的AnchorName上\n\n```c#\n/// <summary>\n/// 将生成打印明细的数据打印到界面上的事件处理方法\n/// </summary>\n/// <param name=\"sender\"></param>\n/// <param name=\"e\"></param>\nprivate void tbStudentDetail_PrintOnPage(object sender, PrintOnPageEventArgs e)\n{\n    if (ListStudentId.Any())\n    {\n        //将主键保存到生成的打印对象的ID中\n        var iterator = new DevExpress.XtraPrinting.Native.NestedBrickIterator(Pages[e.PageIndex].InnerBricks);\n        while (iterator.MoveNext())\n        {\n            var visualBrick = iterator.CurrentBrick as VisualBrick;\n            if (visualBrick != null)\n                //PutStateToBrick(visualBrick, PrintingSystem);\n            {\n                if (visualBrick.BrickType == \"Table\")\n                //if (string.IsNullOrEmpty(visualBrick.Text) && string.IsNullOrEmpty(visualBrick.ID))\n                {\n                    if (ListStudentId.Any())\n                    {\n                        visualBrick.ID = \"StudentId\";\n                        //visualBrick.Text = listKey[visualBrick.ID];\n                        visualBrick.AnchorName = ListStudentId[0].ToString();\n                        ListStudentId.RemoveAt(0);\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n            }\n            //Do some actions based on your requirements\n        }\n        //}\n        //ListStudentId.RemoveAt(0);\n    }\n}\n```\n\n- #### 剩下的就是在打印预览界面(PrintPreview)双击Page弹出修改属性窗体后重新打印数据\n\n```c#\n/// <summary>\n/// 双击打印预览页面的事件处理方法\n/// </summary>\n/// <param name=\"sender\"></param>\n/// <param name=\"e\"></param>\nprivate void documentViewer1_BrickDoubleClick(object sender, DevExpress.XtraPrinting.Control.BrickEventArgs e)\n{\n    var studentId = string.Empty;\n    var iterator = new DevExpress.XtraPrinting.Native.NestedBrickIterator(e.Page.InnerBricks);\n    while (iterator.MoveNext())\n    {\n        VisualBrick visualBrick = null;\n        try\n        {\n            visualBrick = iterator.CurrentBrick as VisualBrick;\n        }\n        catch (ArgumentOutOfRangeException)\n        {\n            //对弹出的窗口点击确认后会报此异常,因为超出了report的范围\n            //对这种异常不做处理\n        }\n        if (visualBrick != null)\n            //PutStateToBrick(visualBrick, PrintingSystem);\n            //读取打印模板界面保存的report主键数据\n        {\n            if (visualBrick.ID == \"StudentId\")\n            {\n                studentId = visualBrick.AnchorName;\n            }\n        }\n\n        //Do some actions based on your requirements\n    }\n\n    if(string.IsNullOrEmpty(studentId))return;\n    else\n    {\n        //MessageBox.Show($\"点击的学生主键为{studentId}\");\n        var newForm = new EditProperties(ListReport.First().PModel.ListStudents\n            .SingleOrDefault(c => c.StudentId == Convert.ToInt32(studentId)));\n        var dlg= newForm.ShowDialog();\n        if (dlg == DialogResult.OK)\n        {\n            //重新打印\n            var newReport=ListReport.First();\n            newReport.SetDataSource(); \n            LoadData();\n        }\n    }\n}\n```\n\n其中，修改属性的窗体使用了类似设计器属性修改界面的[PropertyGridControl](https://documentation.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.PropertyGridControl.class)控件，当然你也可以自定义界面来实现类似功能，只要可以修改属性的值就行了\n\n文章描述内容的示例项目已放在了[Github](https://github.com/wangshuai-007/BlogsSample)上。","source":"_posts/2017-10-7-Devexpress打印预览(PrintPreview)时修改打印数据.md","raw":"---\nlayout:     post\ntitle:      Devexpress打印预览(PrintPreview)时修改打印数据\nsubtitle:   所见即所得的打印数据快速修改方法\ndate:       2017-10-7\nauthor:     王帅\ncatalog: true\ntags:\n    - Devexpress\n    - Print\n    - winform\ntypora-root-url: ..\n---\n## 引言\n\n打印功能对于一个系统来说通常是强需求，每个系统都会根据自己所提供的服务生成不同的打印模板，但光有模板往往不够用，因为有时会需要在打印预览(PrintPreview)时根据打印内容临时修改打印的数据，而且这种修改并不需要应用于打印数据源的修改，只需要打印出变更后的内容就行了；所以我们只需修改内存中的数据，然后重新打印就可以了。\n\n在最新的Devexpress 17.1中[XRLable](https://documentation.devexpress.com/XtraReports/17403/Concepts/Report-Controls/Label)，[XRTableCell](https://documentation.devexpress.com/XtraReports/9741/Concepts/Report-Controls/Table)和[Character Comb](https://documentation.devexpress.com/XtraReports/117157/Concepts/Report-Controls/Character-Comb)有[EditOptions](https://documentation.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XRLabel.EditOptions.property)属性，可以实现直接在打印预览界面(PrintPreview)上修改打印的数据，具体请参考[官方示例](https://documentation.devexpress.com/XtraReports/117343/Concepts/Creating-Reports/Navigation-and-Interaction/Content-Editing-in-Print-Preview)；但很可惜我相信大部分的系统都还和我用的一样，没有使用17.1，所以只能乖乖修改数据然后重新打印。\n\n## 效果图\n![打印预览界面双击修改打印数据](/img/reportPreview.gif)\n\n## 步骤\n\n- #### 首先我们设计好打印内容的模板\n\n打印内容模板:\n\n![打印内容模板](/img/report1.png)\n\n​\t打印预览效果图:\n\n![打印预览效果图](/img/printpreviewbase0.png)\n\n打印预览(PrintPreview)中的每一个Page表示一个model，我们需要一种方式来修改对应model的数据；通过查看[官方示例](https://documentation.devexpress.com/CoreLibraries/DevExpress.XtraPrinting.Brick.class)我们知道，打印预览界面(PrintPreview)的元素实际上都是Brick类型的子类，你点击每一个Page都触发的是[BrickClick](https://documentation.devexpress.com/WindowsForms/DevExpress.XtraPrinting.Control.PrintControl.BrickClick.event)事件：\n\n![](/img/brickclick.png)\n\n通过调试可以发现打印预览界面(PrintPreview)元素构成的层级关系：\n\n![层级关系](/img/bricktable.png)\n\n所以我们可以把每一个model的主键保存在每一个Page中，我选用了BrickTable（你也可以选择其它元素，只是在我的例子中刚好每一个Page对应于一个Table）\n\n- 所以第二步是保存model的主键到BrickTable的AnchorName中（如果你在打印预览界面(PrintPreview)使用了目录功能，可能就需要用其它方式保存数据了）\n\n```c#\n/// <summary>\n/// 保存的打印页主键列表\n/// </summary>\nprivate List<int> ListStudentId { get;set; }\n/// <summary>\n/// 生成Table明细数据之后的事件处理方法\n/// </summary>\n/// <param name=\"sender\"></param>\n/// <param name=\"e\"></param>\nprivate void Detail1_AfterPrint(object sender, EventArgs e)\n{\n    var dtRowView = DetailReport.GetCurrentRow() as DataRowView;\n    if (dtRowView != null)\n    {\n        var studentId =Convert.ToInt32(dtRowView[\"StudentId\"]);\n     \n        ListStudentId.Add(studentId);//将Key记录下来\n    }\n}\n```\n* 第三步，在生成打印明细数据时将主键赋值到BrickTable的AnchorName上\n\n```c#\n/// <summary>\n/// 将生成打印明细的数据打印到界面上的事件处理方法\n/// </summary>\n/// <param name=\"sender\"></param>\n/// <param name=\"e\"></param>\nprivate void tbStudentDetail_PrintOnPage(object sender, PrintOnPageEventArgs e)\n{\n    if (ListStudentId.Any())\n    {\n        //将主键保存到生成的打印对象的ID中\n        var iterator = new DevExpress.XtraPrinting.Native.NestedBrickIterator(Pages[e.PageIndex].InnerBricks);\n        while (iterator.MoveNext())\n        {\n            var visualBrick = iterator.CurrentBrick as VisualBrick;\n            if (visualBrick != null)\n                //PutStateToBrick(visualBrick, PrintingSystem);\n            {\n                if (visualBrick.BrickType == \"Table\")\n                //if (string.IsNullOrEmpty(visualBrick.Text) && string.IsNullOrEmpty(visualBrick.ID))\n                {\n                    if (ListStudentId.Any())\n                    {\n                        visualBrick.ID = \"StudentId\";\n                        //visualBrick.Text = listKey[visualBrick.ID];\n                        visualBrick.AnchorName = ListStudentId[0].ToString();\n                        ListStudentId.RemoveAt(0);\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n            }\n            //Do some actions based on your requirements\n        }\n        //}\n        //ListStudentId.RemoveAt(0);\n    }\n}\n```\n\n- #### 剩下的就是在打印预览界面(PrintPreview)双击Page弹出修改属性窗体后重新打印数据\n\n```c#\n/// <summary>\n/// 双击打印预览页面的事件处理方法\n/// </summary>\n/// <param name=\"sender\"></param>\n/// <param name=\"e\"></param>\nprivate void documentViewer1_BrickDoubleClick(object sender, DevExpress.XtraPrinting.Control.BrickEventArgs e)\n{\n    var studentId = string.Empty;\n    var iterator = new DevExpress.XtraPrinting.Native.NestedBrickIterator(e.Page.InnerBricks);\n    while (iterator.MoveNext())\n    {\n        VisualBrick visualBrick = null;\n        try\n        {\n            visualBrick = iterator.CurrentBrick as VisualBrick;\n        }\n        catch (ArgumentOutOfRangeException)\n        {\n            //对弹出的窗口点击确认后会报此异常,因为超出了report的范围\n            //对这种异常不做处理\n        }\n        if (visualBrick != null)\n            //PutStateToBrick(visualBrick, PrintingSystem);\n            //读取打印模板界面保存的report主键数据\n        {\n            if (visualBrick.ID == \"StudentId\")\n            {\n                studentId = visualBrick.AnchorName;\n            }\n        }\n\n        //Do some actions based on your requirements\n    }\n\n    if(string.IsNullOrEmpty(studentId))return;\n    else\n    {\n        //MessageBox.Show($\"点击的学生主键为{studentId}\");\n        var newForm = new EditProperties(ListReport.First().PModel.ListStudents\n            .SingleOrDefault(c => c.StudentId == Convert.ToInt32(studentId)));\n        var dlg= newForm.ShowDialog();\n        if (dlg == DialogResult.OK)\n        {\n            //重新打印\n            var newReport=ListReport.First();\n            newReport.SetDataSource(); \n            LoadData();\n        }\n    }\n}\n```\n\n其中，修改属性的窗体使用了类似设计器属性修改界面的[PropertyGridControl](https://documentation.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.PropertyGridControl.class)控件，当然你也可以自定义界面来实现类似功能，只要可以修改属性的值就行了\n\n文章描述内容的示例项目已放在了[Github](https://github.com/wangshuai-007/BlogsSample)上。","slug":"2017-10-7-Devexpress打印预览(PrintPreview)时修改打印数据","published":1,"updated":"2020-03-16T16:16:57.146Z","_id":"cl8vdlqhp000p3oo25euse1qs","comments":1,"photos":[],"link":"","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>打印功能对于一个系统来说通常是强需求，每个系统都会根据自己所提供的服务生成不同的打印模板，但光有模板往往不够用，因为有时会需要在打印预览(PrintPreview)时根据打印内容临时修改打印的数据，而且这种修改并不需要应用于打印数据源的修改，只需要打印出变更后的内容就行了；所以我们只需修改内存中的数据，然后重新打印就可以了。</p>\n<p>在最新的Devexpress 17.1中<a href=\"https://documentation.devexpress.com/XtraReports/17403/Concepts/Report-Controls/Label\">XRLable</a>，<a href=\"https://documentation.devexpress.com/XtraReports/9741/Concepts/Report-Controls/Table\">XRTableCell</a>和<a href=\"https://documentation.devexpress.com/XtraReports/117157/Concepts/Report-Controls/Character-Comb\">Character Comb</a>有<a href=\"https://documentation.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XRLabel.EditOptions.property\">EditOptions</a>属性，可以实现直接在打印预览界面(PrintPreview)上修改打印的数据，具体请参考<a href=\"https://documentation.devexpress.com/XtraReports/117343/Concepts/Creating-Reports/Navigation-and-Interaction/Content-Editing-in-Print-Preview\">官方示例</a>；但很可惜我相信大部分的系统都还和我用的一样，没有使用17.1，所以只能乖乖修改数据然后重新打印。</p>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"/img/reportPreview.gif\" alt=\"打印预览界面双击修改打印数据\"></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li><h4 id=\"首先我们设计好打印内容的模板\"><a href=\"#首先我们设计好打印内容的模板\" class=\"headerlink\" title=\"首先我们设计好打印内容的模板\"></a>首先我们设计好打印内容的模板</h4></li>\n</ul>\n<p>打印内容模板:</p>\n<p><img src=\"/img/report1.png\" alt=\"打印内容模板\"></p>\n<p>​    打印预览效果图:</p>\n<p><img src=\"/img/printpreviewbase0.png\" alt=\"打印预览效果图\"></p>\n<p>打印预览(PrintPreview)中的每一个Page表示一个model，我们需要一种方式来修改对应model的数据；通过查看<a href=\"https://documentation.devexpress.com/CoreLibraries/DevExpress.XtraPrinting.Brick.class\">官方示例</a>我们知道，打印预览界面(PrintPreview)的元素实际上都是Brick类型的子类，你点击每一个Page都触发的是<a href=\"https://documentation.devexpress.com/WindowsForms/DevExpress.XtraPrinting.Control.PrintControl.BrickClick.event\">BrickClick</a>事件：</p>\n<p><img src=\"/img/brickclick.png\"></p>\n<p>通过调试可以发现打印预览界面(PrintPreview)元素构成的层级关系：</p>\n<p><img src=\"/img/bricktable.png\" alt=\"层级关系\"></p>\n<p>所以我们可以把每一个model的主键保存在每一个Page中，我选用了BrickTable（你也可以选择其它元素，只是在我的例子中刚好每一个Page对应于一个Table）</p>\n<ul>\n<li>所以第二步是保存model的主键到BrickTable的AnchorName中（如果你在打印预览界面(PrintPreview)使用了目录功能，可能就需要用其它方式保存数据了）</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> 保存的打印页主键列表</span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span><br><span class=\"hljs-keyword\">private</span> List&lt;<span class=\"hljs-built_in\">int</span>&gt; ListStudentId &#123; <span class=\"hljs-keyword\">get</span>;<span class=\"hljs-keyword\">set</span>; &#125;<br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> 生成Table明细数据之后的事件处理方法</span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sender&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;e&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Detail1_AfterPrint</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">var</span> dtRowView = DetailReport.GetCurrentRow() <span class=\"hljs-keyword\">as</span> DataRowView;<br>    <span class=\"hljs-keyword\">if</span> (dtRowView != <span class=\"hljs-literal\">null</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">var</span> studentId =Convert.ToInt32(dtRowView[<span class=\"hljs-string\">&quot;StudentId&quot;</span>]);<br>     <br>        ListStudentId.Add(studentId);<span class=\"hljs-comment\">//将Key记录下来</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>第三步，在生成打印明细数据时将主键赋值到BrickTable的AnchorName上</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> 将生成打印明细的数据打印到界面上的事件处理方法</span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sender&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;e&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">tbStudentDetail_PrintOnPage</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, PrintOnPageEventArgs e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span> (ListStudentId.Any())<br>    &#123;<br>        <span class=\"hljs-comment\">//将主键保存到生成的打印对象的ID中</span><br>        <span class=\"hljs-keyword\">var</span> iterator = <span class=\"hljs-keyword\">new</span> DevExpress.XtraPrinting.Native.NestedBrickIterator(Pages[e.PageIndex].InnerBricks);<br>        <span class=\"hljs-keyword\">while</span> (iterator.MoveNext())<br>        &#123;<br>            <span class=\"hljs-keyword\">var</span> visualBrick = iterator.CurrentBrick <span class=\"hljs-keyword\">as</span> VisualBrick;<br>            <span class=\"hljs-keyword\">if</span> (visualBrick != <span class=\"hljs-literal\">null</span>)<br>                <span class=\"hljs-comment\">//PutStateToBrick(visualBrick, PrintingSystem);</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (visualBrick.BrickType == <span class=\"hljs-string\">&quot;Table&quot;</span>)<br>                <span class=\"hljs-comment\">//if (string.IsNullOrEmpty(visualBrick.Text) &amp;&amp; string.IsNullOrEmpty(visualBrick.ID))</span><br>                &#123;<br>                    <span class=\"hljs-keyword\">if</span> (ListStudentId.Any())<br>                    &#123;<br>                        visualBrick.ID = <span class=\"hljs-string\">&quot;StudentId&quot;</span>;<br>                        <span class=\"hljs-comment\">//visualBrick.Text = listKey[visualBrick.ID];</span><br>                        visualBrick.AnchorName = ListStudentId[<span class=\"hljs-number\">0</span>].ToString();<br>                        ListStudentId.RemoveAt(<span class=\"hljs-number\">0</span>);<br>                    &#125;<br>                    <span class=\"hljs-keyword\">else</span><br>                    &#123;<br>                        <span class=\"hljs-keyword\">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-comment\">//Do some actions based on your requirements</span><br>        &#125;<br>        <span class=\"hljs-comment\">//&#125;</span><br>        <span class=\"hljs-comment\">//ListStudentId.RemoveAt(0);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"剩下的就是在打印预览界面-PrintPreview-双击Page弹出修改属性窗体后重新打印数据\"><a href=\"#剩下的就是在打印预览界面-PrintPreview-双击Page弹出修改属性窗体后重新打印数据\" class=\"headerlink\" title=\"剩下的就是在打印预览界面(PrintPreview)双击Page弹出修改属性窗体后重新打印数据\"></a>剩下的就是在打印预览界面(PrintPreview)双击Page弹出修改属性窗体后重新打印数据</h4></li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> 双击打印预览页面的事件处理方法</span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sender&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;e&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">documentViewer1_BrickDoubleClick</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, DevExpress.XtraPrinting.Control.BrickEventArgs e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">var</span> studentId = <span class=\"hljs-built_in\">string</span>.Empty;<br>    <span class=\"hljs-keyword\">var</span> iterator = <span class=\"hljs-keyword\">new</span> DevExpress.XtraPrinting.Native.NestedBrickIterator(e.Page.InnerBricks);<br>    <span class=\"hljs-keyword\">while</span> (iterator.MoveNext())<br>    &#123;<br>        VisualBrick visualBrick = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">try</span><br>        &#123;<br>            visualBrick = iterator.CurrentBrick <span class=\"hljs-keyword\">as</span> VisualBrick;<br>        &#125;<br>        <span class=\"hljs-keyword\">catch</span> (ArgumentOutOfRangeException)<br>        &#123;<br>            <span class=\"hljs-comment\">//对弹出的窗口点击确认后会报此异常,因为超出了report的范围</span><br>            <span class=\"hljs-comment\">//对这种异常不做处理</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (visualBrick != <span class=\"hljs-literal\">null</span>)<br>            <span class=\"hljs-comment\">//PutStateToBrick(visualBrick, PrintingSystem);</span><br>            <span class=\"hljs-comment\">//读取打印模板界面保存的report主键数据</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (visualBrick.ID == <span class=\"hljs-string\">&quot;StudentId&quot;</span>)<br>            &#123;<br>                studentId = visualBrick.AnchorName;<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-comment\">//Do some actions based on your requirements</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">string</span>.IsNullOrEmpty(studentId))<span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-comment\">//MessageBox.Show($&quot;点击的学生主键为&#123;studentId&#125;&quot;);</span><br>        <span class=\"hljs-keyword\">var</span> newForm = <span class=\"hljs-keyword\">new</span> EditProperties(ListReport.First().PModel.ListStudents<br>            .SingleOrDefault(c =&gt; c.StudentId == Convert.ToInt32(studentId)));<br>        <span class=\"hljs-keyword\">var</span> dlg= newForm.ShowDialog();<br>        <span class=\"hljs-keyword\">if</span> (dlg == DialogResult.OK)<br>        &#123;<br>            <span class=\"hljs-comment\">//重新打印</span><br>            <span class=\"hljs-keyword\">var</span> newReport=ListReport.First();<br>            newReport.SetDataSource(); <br>            LoadData();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中，修改属性的窗体使用了类似设计器属性修改界面的<a href=\"https://documentation.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.PropertyGridControl.class\">PropertyGridControl</a>控件，当然你也可以自定义界面来实现类似功能，只要可以修改属性的值就行了</p>\n<p>文章描述内容的示例项目已放在了<a href=\"https://github.com/wangshuai-007/BlogsSample\">Github</a>上。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>打印功能对于一个系统来说通常是强需求，每个系统都会根据自己所提供的服务生成不同的打印模板，但光有模板往往不够用，因为有时会需要在打印预览(PrintPreview)时根据打印内容临时修改打印的数据，而且这种修改并不需要应用于打印数据源的修改，只需要打印出变更后的内容就行了；所以我们只需修改内存中的数据，然后重新打印就可以了。</p>\n<p>在最新的Devexpress 17.1中<a href=\"https://documentation.devexpress.com/XtraReports/17403/Concepts/Report-Controls/Label\">XRLable</a>，<a href=\"https://documentation.devexpress.com/XtraReports/9741/Concepts/Report-Controls/Table\">XRTableCell</a>和<a href=\"https://documentation.devexpress.com/XtraReports/117157/Concepts/Report-Controls/Character-Comb\">Character Comb</a>有<a href=\"https://documentation.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XRLabel.EditOptions.property\">EditOptions</a>属性，可以实现直接在打印预览界面(PrintPreview)上修改打印的数据，具体请参考<a href=\"https://documentation.devexpress.com/XtraReports/117343/Concepts/Creating-Reports/Navigation-and-Interaction/Content-Editing-in-Print-Preview\">官方示例</a>；但很可惜我相信大部分的系统都还和我用的一样，没有使用17.1，所以只能乖乖修改数据然后重新打印。</p>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"/img/reportPreview.gif\" alt=\"打印预览界面双击修改打印数据\"></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li><h4 id=\"首先我们设计好打印内容的模板\"><a href=\"#首先我们设计好打印内容的模板\" class=\"headerlink\" title=\"首先我们设计好打印内容的模板\"></a>首先我们设计好打印内容的模板</h4></li>\n</ul>\n<p>打印内容模板:</p>\n<p><img src=\"/img/report1.png\" alt=\"打印内容模板\"></p>\n<p>​    打印预览效果图:</p>\n<p><img src=\"/img/printpreviewbase0.png\" alt=\"打印预览效果图\"></p>\n<p>打印预览(PrintPreview)中的每一个Page表示一个model，我们需要一种方式来修改对应model的数据；通过查看<a href=\"https://documentation.devexpress.com/CoreLibraries/DevExpress.XtraPrinting.Brick.class\">官方示例</a>我们知道，打印预览界面(PrintPreview)的元素实际上都是Brick类型的子类，你点击每一个Page都触发的是<a href=\"https://documentation.devexpress.com/WindowsForms/DevExpress.XtraPrinting.Control.PrintControl.BrickClick.event\">BrickClick</a>事件：</p>\n<p><img src=\"/img/brickclick.png\"></p>\n<p>通过调试可以发现打印预览界面(PrintPreview)元素构成的层级关系：</p>\n<p><img src=\"/img/bricktable.png\" alt=\"层级关系\"></p>\n<p>所以我们可以把每一个model的主键保存在每一个Page中，我选用了BrickTable（你也可以选择其它元素，只是在我的例子中刚好每一个Page对应于一个Table）</p>\n<ul>\n<li>所以第二步是保存model的主键到BrickTable的AnchorName中（如果你在打印预览界面(PrintPreview)使用了目录功能，可能就需要用其它方式保存数据了）</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> 保存的打印页主键列表</span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span><br><span class=\"hljs-keyword\">private</span> List&lt;<span class=\"hljs-built_in\">int</span>&gt; ListStudentId &#123; <span class=\"hljs-keyword\">get</span>;<span class=\"hljs-keyword\">set</span>; &#125;<br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> 生成Table明细数据之后的事件处理方法</span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sender&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;e&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Detail1_AfterPrint</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">var</span> dtRowView = DetailReport.GetCurrentRow() <span class=\"hljs-keyword\">as</span> DataRowView;<br>    <span class=\"hljs-keyword\">if</span> (dtRowView != <span class=\"hljs-literal\">null</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">var</span> studentId =Convert.ToInt32(dtRowView[<span class=\"hljs-string\">&quot;StudentId&quot;</span>]);<br>     <br>        ListStudentId.Add(studentId);<span class=\"hljs-comment\">//将Key记录下来</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>第三步，在生成打印明细数据时将主键赋值到BrickTable的AnchorName上</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> 将生成打印明细的数据打印到界面上的事件处理方法</span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sender&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;e&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">tbStudentDetail_PrintOnPage</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, PrintOnPageEventArgs e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span> (ListStudentId.Any())<br>    &#123;<br>        <span class=\"hljs-comment\">//将主键保存到生成的打印对象的ID中</span><br>        <span class=\"hljs-keyword\">var</span> iterator = <span class=\"hljs-keyword\">new</span> DevExpress.XtraPrinting.Native.NestedBrickIterator(Pages[e.PageIndex].InnerBricks);<br>        <span class=\"hljs-keyword\">while</span> (iterator.MoveNext())<br>        &#123;<br>            <span class=\"hljs-keyword\">var</span> visualBrick = iterator.CurrentBrick <span class=\"hljs-keyword\">as</span> VisualBrick;<br>            <span class=\"hljs-keyword\">if</span> (visualBrick != <span class=\"hljs-literal\">null</span>)<br>                <span class=\"hljs-comment\">//PutStateToBrick(visualBrick, PrintingSystem);</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (visualBrick.BrickType == <span class=\"hljs-string\">&quot;Table&quot;</span>)<br>                <span class=\"hljs-comment\">//if (string.IsNullOrEmpty(visualBrick.Text) &amp;&amp; string.IsNullOrEmpty(visualBrick.ID))</span><br>                &#123;<br>                    <span class=\"hljs-keyword\">if</span> (ListStudentId.Any())<br>                    &#123;<br>                        visualBrick.ID = <span class=\"hljs-string\">&quot;StudentId&quot;</span>;<br>                        <span class=\"hljs-comment\">//visualBrick.Text = listKey[visualBrick.ID];</span><br>                        visualBrick.AnchorName = ListStudentId[<span class=\"hljs-number\">0</span>].ToString();<br>                        ListStudentId.RemoveAt(<span class=\"hljs-number\">0</span>);<br>                    &#125;<br>                    <span class=\"hljs-keyword\">else</span><br>                    &#123;<br>                        <span class=\"hljs-keyword\">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-comment\">//Do some actions based on your requirements</span><br>        &#125;<br>        <span class=\"hljs-comment\">//&#125;</span><br>        <span class=\"hljs-comment\">//ListStudentId.RemoveAt(0);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"剩下的就是在打印预览界面-PrintPreview-双击Page弹出修改属性窗体后重新打印数据\"><a href=\"#剩下的就是在打印预览界面-PrintPreview-双击Page弹出修改属性窗体后重新打印数据\" class=\"headerlink\" title=\"剩下的就是在打印预览界面(PrintPreview)双击Page弹出修改属性窗体后重新打印数据\"></a>剩下的就是在打印预览界面(PrintPreview)双击Page弹出修改属性窗体后重新打印数据</h4></li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> 双击打印预览页面的事件处理方法</span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sender&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;e&quot;&gt;</span><span class=\"hljs-doctag\">&lt;/param&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">documentViewer1_BrickDoubleClick</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, DevExpress.XtraPrinting.Control.BrickEventArgs e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">var</span> studentId = <span class=\"hljs-built_in\">string</span>.Empty;<br>    <span class=\"hljs-keyword\">var</span> iterator = <span class=\"hljs-keyword\">new</span> DevExpress.XtraPrinting.Native.NestedBrickIterator(e.Page.InnerBricks);<br>    <span class=\"hljs-keyword\">while</span> (iterator.MoveNext())<br>    &#123;<br>        VisualBrick visualBrick = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">try</span><br>        &#123;<br>            visualBrick = iterator.CurrentBrick <span class=\"hljs-keyword\">as</span> VisualBrick;<br>        &#125;<br>        <span class=\"hljs-keyword\">catch</span> (ArgumentOutOfRangeException)<br>        &#123;<br>            <span class=\"hljs-comment\">//对弹出的窗口点击确认后会报此异常,因为超出了report的范围</span><br>            <span class=\"hljs-comment\">//对这种异常不做处理</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (visualBrick != <span class=\"hljs-literal\">null</span>)<br>            <span class=\"hljs-comment\">//PutStateToBrick(visualBrick, PrintingSystem);</span><br>            <span class=\"hljs-comment\">//读取打印模板界面保存的report主键数据</span><br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (visualBrick.ID == <span class=\"hljs-string\">&quot;StudentId&quot;</span>)<br>            &#123;<br>                studentId = visualBrick.AnchorName;<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-comment\">//Do some actions based on your requirements</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">string</span>.IsNullOrEmpty(studentId))<span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-comment\">//MessageBox.Show($&quot;点击的学生主键为&#123;studentId&#125;&quot;);</span><br>        <span class=\"hljs-keyword\">var</span> newForm = <span class=\"hljs-keyword\">new</span> EditProperties(ListReport.First().PModel.ListStudents<br>            .SingleOrDefault(c =&gt; c.StudentId == Convert.ToInt32(studentId)));<br>        <span class=\"hljs-keyword\">var</span> dlg= newForm.ShowDialog();<br>        <span class=\"hljs-keyword\">if</span> (dlg == DialogResult.OK)<br>        &#123;<br>            <span class=\"hljs-comment\">//重新打印</span><br>            <span class=\"hljs-keyword\">var</span> newReport=ListReport.First();<br>            newReport.SetDataSource(); <br>            LoadData();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中，修改属性的窗体使用了类似设计器属性修改界面的<a href=\"https://documentation.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.PropertyGridControl.class\">PropertyGridControl</a>控件，当然你也可以自定义界面来实现类似功能，只要可以修改属性的值就行了</p>\n<p>文章描述内容的示例项目已放在了<a href=\"https://github.com/wangshuai-007/BlogsSample\">Github</a>上。</p>\n"},{"layout":"post","title":"无需VPS,使用重新打tag的方式 拉取、转存mcr.microsoft.com的镜像","subtitle":"使用Azure Devops的pipelines功能一键ReTag转存","date":"2020-01-16T16:00:00.000Z","author":"王帅","catalog":true,"sitemap":{"lastmod":"2020-4-15"},"typora-root-url":"..","_content":"\n## 引言\n\n用`docker`的都知道镜像加速，通过配置阿里云、腾讯云的镜像源确实可以大幅提升`docker pull`的效果，但对于某些不常用或新版的镜像却收效甚微。\n\n比如最近想要部署私有ExceptionLess服务，它的dockerfile使用了`mcr.microsoft.com/dotnet/core/sdk:2.2.401`和`mcr.microsoft.com/dotnet/core/aspnet:2.2`，这两个镜像拉取非常慢，只能使用手动`tag`的方式来解决。\n\n另外，本人在腾讯云中创建了`dotnet-core`命名空间，源自`mcr.microsoft.com`可直接使用`ccr.ccs.tencentyun.com/dotnet-core/runtime`\n\n![image-20200415142923048](/img/tencenyun_aspnet_core_repository.png)\n\n## 解决办法\n\n----------\n\n**2020-04-15更新**\n\n原标题为：*使用travis-ci的Trigger build功能一键转存*\n\n但是本人多次实测，`travis-ci`的`Build`带宽限制严重，如果你要Retag `Runtime`还好，设置`travis_wait 30`基本也能用；但是如果是SDK，基本都会超时\n\n```bash\nStill running (50 of 300): sudo docker push ccr.ccs.tencentyun.com/dotnet-core/sdk:5.0\nThe job exceeded the maximum time limit for jobs, and has been terminated.\n```\n\n因此改用`Azure Devops`\n\n------\n\n**2020-3-9**更新:\n\n### ~~使用Azure官方镜像mirror~~\n\n~~根据此issue:[dockerhub.azk8s.cn how to get the multiple path image](https://github.com/Azure/container-service-for-azure-china/issues/52)，可使用`mcr.azk8s.cn`仓库替换`mcr.microsoft.com`，即，将`mcr.microsoft.com/dotnet/core/aspnet:2.2`替换为`mcr.azk8s.cn/dotnet/core/aspnet:2.2`~~\n\n此方案只能在Azure中使用。。。\n\n-------\n\n### 手动Tag\n\n如果你有一台国外的VPS，那很简单；只需执行`docker pull`、`docker login`、`docker tag`、`docker push`就OK了。无奈我的VPS到期了，只能另寻它法，google之后从这篇文章找到灵感：[使用重新打 tag 的方式，拉取 k8s.gcr.io 的镜像](https://www.zhoujiangang.com/p/fetch-google-image-use-tag/)。\n\n### 使用Azure Devops\n\n* 首先，去腾讯云中创建保存`image`的仓库\n  ![image.png](/img/qcloud_images_list.png)\n\n* 参考[create-a-service-connection](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml#create-a-service-connection)，在project→project settings →Service connections →New ervice connection中新建一个名为`tencentyun`的`Docker Registry`，其中`Docker Registry`地址为：https://ccr.ccs.tencentyun.com/v2/，用户名和密码请查看腾讯云的镜像使用指引\n\n![image-20200415111820887](/img/AzureDevops_createTencentyun_DockerRegistry.png)\n\n* 在你项目里面的`Piplines`中新建一个连接到Github仓库的yml，创建模板随便选\n\n![image-20200415135902763](/img/AzureDevops_CreatePipline_yml.png)\n\n* 最后把Review中的yml文件替换成如下：\n\n```yml\ntrigger:\n- master\n\npool:\n  vmImage: 'ubuntu-latest'\n\nvariables:\n  tag: 'aspnet:5.0'\n\nsteps:\n- task: Docker@2\n  inputs:\n    containerRegistry: 'tencentyun'\n    command: 'login'\n- task: PowerShell@2\n  inputs:\n    targetType: 'inline'\n    script: |\n      $env:version=\"$(tag)\"\n      \n      docker pull mcr.microsoft.com/dotnet/core/$env:version\n      \n      docker tag mcr.microsoft.com/dotnet/core/$env:version ccr.ccs.tencentyun.com/dotnet-core/$env:version\n      docker push ccr.ccs.tencentyun.com/dotnet-core/$env:version\n```\n\n* 然后点击`Save and run`(或者也可以在自己的仓库中创建一个上述的`azure-pipelines.yml`文件,在Azure Devops中连接好后提交)就可以了 \n\n### ~~使用travis-ci自动Tag~~\n\n`travis-ci`的`Build`带宽限制严重，已改用Azure Devops，以下步骤仅作参考\n\n-----\n\n使用第三方的CI、CD服务`push`镜像到国内私有仓库中解决`docker pull`过慢的问题，本例的CI-CD使用的是[travis-ci](https://travis-ci.com/)，由于自己使用了腾讯云的容器服务，因此私有库使用了腾讯云提供的免费镜像仓库。\n\n* 首先，去腾讯云中创建保存`image`的仓库\n![image.png](/img/qcloud_images_list.png)\n* 其次，访问[travis-ci](https://travis-ci.com/)，并授权其对自己git库的访问权限(**随便什么仓库都行，因为我们并不需要使用里面的代码**)\n* 参照腾讯云提供的镜像使用指引，编写`.travis.yml`脚本文件\n![image.png](/img/qcloud_images_guid.png)\n我的脚本文件如下：\n\n```bash\nlanguage: bash\nenv:\n  - version=sdk:2.2\nservices:\n  - docker\nsudo: required\nbranches:\n  only:\n    - master\nscript:\n  - echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin ccr.ccs.tencentyun.com\n  - docker pull mcr.microsoft.com/dotnet/core/$version\n\nafter_success:\n  - sudo docker tag mcr.microsoft.com/dotnet/core/$version ccr.ccs.tencentyun.com/dotnet-core/$version\n  - sudo docker push ccr.ccs.tencentyun.com/dotnet-core/$version\n```\n\n* 在[travis-ci](https://travis-ci.com/)的首页上，任意选择一个仓库，然后在`More Options`→`Settings`里面添加docker登陆的用户名密码环境变量`DOCKER_USERNAME`和`DOCKER_PASSWORD`\n\n![image-20200410113527361](/img/travis-ci_setEnv.png)\n\n* 在`More Options`→`Trigger build`的`CUSTOM CONFIG`中粘贴写好的`.travis.yml`脚本并点击`Trigger custom build`\n![image.png](/img/travis-ci_Trigger_Custom_Build.png)\n* ~~稍等几分钟即可在`job log`中看到脚本的执行结果~~\n\n这里并不会立即出结果，图示是因为images已经存在于`ccr.ccs.tencentyun.com`中了，所以给人以速度很快的假象\n\n![image.png](/img/travis-ci_wait_job_result.png)\n\n### 参考链接\n\n* [push-image](https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/containers/push-image?view=azure-devops)\n\n* [share-docker-image](https://docs.travis-ci.com/user/build-stages/share-docker-image/)\n* [docker](https://docs.travis-ci.com/user/docker/)","source":"_posts/2020-01-17-无需VPS，使用重新打tag的方式，拉取、转存mcr.microsoft.com的镜像.md","raw":"---\nlayout:     post\ntitle:      无需VPS,使用重新打tag的方式 拉取、转存mcr.microsoft.com的镜像\nsubtitle:   使用Azure Devops的pipelines功能一键ReTag转存\ndate:       2020-1-17\nauthor:     王帅\ncatalog: true\nsitemap:\n  lastmod:  2020-4-15\ntags:\n    - docker\n    - Azure Devops    \n    - mirror\n    - tag\n    - travis-ci\n    - docker-images\ntypora-root-url: ..\n---\n\n## 引言\n\n用`docker`的都知道镜像加速，通过配置阿里云、腾讯云的镜像源确实可以大幅提升`docker pull`的效果，但对于某些不常用或新版的镜像却收效甚微。\n\n比如最近想要部署私有ExceptionLess服务，它的dockerfile使用了`mcr.microsoft.com/dotnet/core/sdk:2.2.401`和`mcr.microsoft.com/dotnet/core/aspnet:2.2`，这两个镜像拉取非常慢，只能使用手动`tag`的方式来解决。\n\n另外，本人在腾讯云中创建了`dotnet-core`命名空间，源自`mcr.microsoft.com`可直接使用`ccr.ccs.tencentyun.com/dotnet-core/runtime`\n\n![image-20200415142923048](/img/tencenyun_aspnet_core_repository.png)\n\n## 解决办法\n\n----------\n\n**2020-04-15更新**\n\n原标题为：*使用travis-ci的Trigger build功能一键转存*\n\n但是本人多次实测，`travis-ci`的`Build`带宽限制严重，如果你要Retag `Runtime`还好，设置`travis_wait 30`基本也能用；但是如果是SDK，基本都会超时\n\n```bash\nStill running (50 of 300): sudo docker push ccr.ccs.tencentyun.com/dotnet-core/sdk:5.0\nThe job exceeded the maximum time limit for jobs, and has been terminated.\n```\n\n因此改用`Azure Devops`\n\n------\n\n**2020-3-9**更新:\n\n### ~~使用Azure官方镜像mirror~~\n\n~~根据此issue:[dockerhub.azk8s.cn how to get the multiple path image](https://github.com/Azure/container-service-for-azure-china/issues/52)，可使用`mcr.azk8s.cn`仓库替换`mcr.microsoft.com`，即，将`mcr.microsoft.com/dotnet/core/aspnet:2.2`替换为`mcr.azk8s.cn/dotnet/core/aspnet:2.2`~~\n\n此方案只能在Azure中使用。。。\n\n-------\n\n### 手动Tag\n\n如果你有一台国外的VPS，那很简单；只需执行`docker pull`、`docker login`、`docker tag`、`docker push`就OK了。无奈我的VPS到期了，只能另寻它法，google之后从这篇文章找到灵感：[使用重新打 tag 的方式，拉取 k8s.gcr.io 的镜像](https://www.zhoujiangang.com/p/fetch-google-image-use-tag/)。\n\n### 使用Azure Devops\n\n* 首先，去腾讯云中创建保存`image`的仓库\n  ![image.png](/img/qcloud_images_list.png)\n\n* 参考[create-a-service-connection](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml#create-a-service-connection)，在project→project settings →Service connections →New ervice connection中新建一个名为`tencentyun`的`Docker Registry`，其中`Docker Registry`地址为：https://ccr.ccs.tencentyun.com/v2/，用户名和密码请查看腾讯云的镜像使用指引\n\n![image-20200415111820887](/img/AzureDevops_createTencentyun_DockerRegistry.png)\n\n* 在你项目里面的`Piplines`中新建一个连接到Github仓库的yml，创建模板随便选\n\n![image-20200415135902763](/img/AzureDevops_CreatePipline_yml.png)\n\n* 最后把Review中的yml文件替换成如下：\n\n```yml\ntrigger:\n- master\n\npool:\n  vmImage: 'ubuntu-latest'\n\nvariables:\n  tag: 'aspnet:5.0'\n\nsteps:\n- task: Docker@2\n  inputs:\n    containerRegistry: 'tencentyun'\n    command: 'login'\n- task: PowerShell@2\n  inputs:\n    targetType: 'inline'\n    script: |\n      $env:version=\"$(tag)\"\n      \n      docker pull mcr.microsoft.com/dotnet/core/$env:version\n      \n      docker tag mcr.microsoft.com/dotnet/core/$env:version ccr.ccs.tencentyun.com/dotnet-core/$env:version\n      docker push ccr.ccs.tencentyun.com/dotnet-core/$env:version\n```\n\n* 然后点击`Save and run`(或者也可以在自己的仓库中创建一个上述的`azure-pipelines.yml`文件,在Azure Devops中连接好后提交)就可以了 \n\n### ~~使用travis-ci自动Tag~~\n\n`travis-ci`的`Build`带宽限制严重，已改用Azure Devops，以下步骤仅作参考\n\n-----\n\n使用第三方的CI、CD服务`push`镜像到国内私有仓库中解决`docker pull`过慢的问题，本例的CI-CD使用的是[travis-ci](https://travis-ci.com/)，由于自己使用了腾讯云的容器服务，因此私有库使用了腾讯云提供的免费镜像仓库。\n\n* 首先，去腾讯云中创建保存`image`的仓库\n![image.png](/img/qcloud_images_list.png)\n* 其次，访问[travis-ci](https://travis-ci.com/)，并授权其对自己git库的访问权限(**随便什么仓库都行，因为我们并不需要使用里面的代码**)\n* 参照腾讯云提供的镜像使用指引，编写`.travis.yml`脚本文件\n![image.png](/img/qcloud_images_guid.png)\n我的脚本文件如下：\n\n```bash\nlanguage: bash\nenv:\n  - version=sdk:2.2\nservices:\n  - docker\nsudo: required\nbranches:\n  only:\n    - master\nscript:\n  - echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin ccr.ccs.tencentyun.com\n  - docker pull mcr.microsoft.com/dotnet/core/$version\n\nafter_success:\n  - sudo docker tag mcr.microsoft.com/dotnet/core/$version ccr.ccs.tencentyun.com/dotnet-core/$version\n  - sudo docker push ccr.ccs.tencentyun.com/dotnet-core/$version\n```\n\n* 在[travis-ci](https://travis-ci.com/)的首页上，任意选择一个仓库，然后在`More Options`→`Settings`里面添加docker登陆的用户名密码环境变量`DOCKER_USERNAME`和`DOCKER_PASSWORD`\n\n![image-20200410113527361](/img/travis-ci_setEnv.png)\n\n* 在`More Options`→`Trigger build`的`CUSTOM CONFIG`中粘贴写好的`.travis.yml`脚本并点击`Trigger custom build`\n![image.png](/img/travis-ci_Trigger_Custom_Build.png)\n* ~~稍等几分钟即可在`job log`中看到脚本的执行结果~~\n\n这里并不会立即出结果，图示是因为images已经存在于`ccr.ccs.tencentyun.com`中了，所以给人以速度很快的假象\n\n![image.png](/img/travis-ci_wait_job_result.png)\n\n### 参考链接\n\n* [push-image](https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/containers/push-image?view=azure-devops)\n\n* [share-docker-image](https://docs.travis-ci.com/user/build-stages/share-docker-image/)\n* [docker](https://docs.travis-ci.com/user/docker/)","slug":"2020-01-17-无需VPS，使用重新打tag的方式，拉取、转存mcr.microsoft.com的镜像","published":1,"updated":"2020-04-23T14:10:43.047Z","_id":"cl8vdlqhz000u3oo2eqki3y3v","comments":1,"photos":[],"link":"","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>用<code>docker</code>的都知道镜像加速，通过配置阿里云、腾讯云的镜像源确实可以大幅提升<code>docker pull</code>的效果，但对于某些不常用或新版的镜像却收效甚微。</p>\n<p>比如最近想要部署私有ExceptionLess服务，它的dockerfile使用了<code>mcr.microsoft.com/dotnet/core/sdk:2.2.401</code>和<code>mcr.microsoft.com/dotnet/core/aspnet:2.2</code>，这两个镜像拉取非常慢，只能使用手动<code>tag</code>的方式来解决。</p>\n<p>另外，本人在腾讯云中创建了<code>dotnet-core</code>命名空间，源自<code>mcr.microsoft.com</code>可直接使用<code>ccr.ccs.tencentyun.com/dotnet-core/runtime</code></p>\n<p><img src=\"/img/tencenyun_aspnet_core_repository.png\" alt=\"image-20200415142923048\"></p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><hr>\n<p><strong>2020-04-15更新</strong></p>\n<p>原标题为：<em>使用travis-ci的Trigger build功能一键转存</em></p>\n<p>但是本人多次实测，<code>travis-ci</code>的<code>Build</code>带宽限制严重，如果你要Retag <code>Runtime</code>还好，设置<code>travis_wait 30</code>基本也能用；但是如果是SDK，基本都会超时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Still running (50 of 300): sudo docker push ccr.ccs.tencentyun.com/dotnet-core/sdk:5.0<br>The job exceeded the maximum time <span class=\"hljs-built_in\">limit</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">jobs</span>, and has been terminated.<br></code></pre></td></tr></table></figure>\n\n<p>因此改用<code>Azure Devops</code></p>\n<hr>\n<p><strong>2020-3-9</strong>更新:</p>\n<h3 id=\"使用Azure官方镜像mirror\"><a href=\"#使用Azure官方镜像mirror\" class=\"headerlink\" title=\"使用Azure官方镜像mirror\"></a><del>使用Azure官方镜像mirror</del></h3><p><del>根据此issue:<a href=\"https://github.com/Azure/container-service-for-azure-china/issues/52\">dockerhub.azk8s.cn how to get the multiple path image</a>，可使用<code>mcr.azk8s.cn</code>仓库替换<code>mcr.microsoft.com</code>，即，将<code>mcr.microsoft.com/dotnet/core/aspnet:2.2</code>替换为<code>mcr.azk8s.cn/dotnet/core/aspnet:2.2</code></del></p>\n<p>此方案只能在Azure中使用。。。</p>\n<hr>\n<h3 id=\"手动Tag\"><a href=\"#手动Tag\" class=\"headerlink\" title=\"手动Tag\"></a>手动Tag</h3><p>如果你有一台国外的VPS，那很简单；只需执行<code>docker pull</code>、<code>docker login</code>、<code>docker tag</code>、<code>docker push</code>就OK了。无奈我的VPS到期了，只能另寻它法，google之后从这篇文章找到灵感：<a href=\"https://www.zhoujiangang.com/p/fetch-google-image-use-tag/\">使用重新打 tag 的方式，拉取 k8s.gcr.io 的镜像</a>。</p>\n<h3 id=\"使用Azure-Devops\"><a href=\"#使用Azure-Devops\" class=\"headerlink\" title=\"使用Azure Devops\"></a>使用Azure Devops</h3><ul>\n<li><p>首先，去腾讯云中创建保存<code>image</code>的仓库<br><img src=\"/img/qcloud_images_list.png\" alt=\"image.png\"></p>\n</li>\n<li><p>参考<a href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml#create-a-service-connection\">create-a-service-connection</a>，在project→project settings →Service connections →New ervice connection中新建一个名为<code>tencentyun</code>的<code>Docker Registry</code>，其中<code>Docker Registry</code>地址为：<a href=\"https://ccr.ccs.tencentyun.com/v2/%EF%BC%8C%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E8%AF%B7%E6%9F%A5%E7%9C%8B%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9A%84%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8%E6%8C%87%E5%BC%95\">https://ccr.ccs.tencentyun.com/v2/，用户名和密码请查看腾讯云的镜像使用指引</a></p>\n</li>\n</ul>\n<p><img src=\"/img/AzureDevops_createTencentyun_DockerRegistry.png\" alt=\"image-20200415111820887\"></p>\n<ul>\n<li>在你项目里面的<code>Piplines</code>中新建一个连接到Github仓库的yml，创建模板随便选</li>\n</ul>\n<p><img src=\"/img/AzureDevops_CreatePipline_yml.png\" alt=\"image-20200415135902763\"></p>\n<ul>\n<li>最后把Review中的yml文件替换成如下：</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">trigger:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master</span><br><br><span class=\"hljs-attr\">pool:</span><br>  <span class=\"hljs-attr\">vmImage:</span> <span class=\"hljs-string\">&#x27;ubuntu-latest&#x27;</span><br><br><span class=\"hljs-attr\">variables:</span><br>  <span class=\"hljs-attr\">tag:</span> <span class=\"hljs-string\">&#x27;aspnet:5.0&#x27;</span><br><br><span class=\"hljs-attr\">steps:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">task:</span> <span class=\"hljs-string\">Docker@2</span><br>  <span class=\"hljs-attr\">inputs:</span><br>    <span class=\"hljs-attr\">containerRegistry:</span> <span class=\"hljs-string\">&#x27;tencentyun&#x27;</span><br>    <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">&#x27;login&#x27;</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">task:</span> <span class=\"hljs-string\">PowerShell@2</span><br>  <span class=\"hljs-attr\">inputs:</span><br>    <span class=\"hljs-attr\">targetType:</span> <span class=\"hljs-string\">&#x27;inline&#x27;</span><br>    <span class=\"hljs-attr\">script:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">      $env:version=&quot;$(tag)&quot;</span><br><span class=\"hljs-string\"></span>      <br>      <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">pull</span> <span class=\"hljs-string\">mcr.microsoft.com/dotnet/core/$env:version</span><br>      <br>      <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">tag</span> <span class=\"hljs-string\">mcr.microsoft.com/dotnet/core/$env:version</span> <span class=\"hljs-string\">ccr.ccs.tencentyun.com/dotnet-core/$env:version</span><br>      <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">push</span> <span class=\"hljs-string\">ccr.ccs.tencentyun.com/dotnet-core/$env:version</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>然后点击<code>Save and run</code>(或者也可以在自己的仓库中创建一个上述的<code>azure-pipelines.yml</code>文件,在Azure Devops中连接好后提交)就可以了 </li>\n</ul>\n<h3 id=\"使用travis-ci自动Tag\"><a href=\"#使用travis-ci自动Tag\" class=\"headerlink\" title=\"使用travis-ci自动Tag\"></a><del>使用travis-ci自动Tag</del></h3><p><code>travis-ci</code>的<code>Build</code>带宽限制严重，已改用Azure Devops，以下步骤仅作参考</p>\n<hr>\n<p>使用第三方的CI、CD服务<code>push</code>镜像到国内私有仓库中解决<code>docker pull</code>过慢的问题，本例的CI-CD使用的是<a href=\"https://travis-ci.com/\">travis-ci</a>，由于自己使用了腾讯云的容器服务，因此私有库使用了腾讯云提供的免费镜像仓库。</p>\n<ul>\n<li>首先，去腾讯云中创建保存<code>image</code>的仓库<br><img src=\"/img/qcloud_images_list.png\" alt=\"image.png\"></li>\n<li>其次，访问<a href=\"https://travis-ci.com/\">travis-ci</a>，并授权其对自己git库的访问权限(<strong>随便什么仓库都行，因为我们并不需要使用里面的代码</strong>)</li>\n<li>参照腾讯云提供的镜像使用指引，编写<code>.travis.yml</code>脚本文件<br><img src=\"/img/qcloud_images_guid.png\" alt=\"image.png\"><br>我的脚本文件如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">language: bash<br><span class=\"hljs-built_in\">env</span>:<br>  - version=sdk:2.2<br>services:<br>  - docker<br>sudo: required<br>branches:<br>  only:<br>    - master<br>script:<br>  - <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DOCKER_PASSWORD</span>&quot;</span> | docker login -u <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DOCKER_USERNAME</span>&quot;</span> --password-stdin ccr.ccs.tencentyun.com<br>  - docker pull mcr.microsoft.com/dotnet/core/<span class=\"hljs-variable\">$version</span><br><br>after_success:<br>  - sudo docker tag mcr.microsoft.com/dotnet/core/<span class=\"hljs-variable\">$version</span> ccr.ccs.tencentyun.com/dotnet-core/<span class=\"hljs-variable\">$version</span><br>  - sudo docker push ccr.ccs.tencentyun.com/dotnet-core/<span class=\"hljs-variable\">$version</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>在<a href=\"https://travis-ci.com/\">travis-ci</a>的首页上，任意选择一个仓库，然后在<code>More Options</code>→<code>Settings</code>里面添加docker登陆的用户名密码环境变量<code>DOCKER_USERNAME</code>和<code>DOCKER_PASSWORD</code></li>\n</ul>\n<p><img src=\"/img/travis-ci_setEnv.png\" alt=\"image-20200410113527361\"></p>\n<ul>\n<li>在<code>More Options</code>→<code>Trigger build</code>的<code>CUSTOM CONFIG</code>中粘贴写好的<code>.travis.yml</code>脚本并点击<code>Trigger custom build</code><br><img src=\"/img/travis-ci_Trigger_Custom_Build.png\" alt=\"image.png\"></li>\n<li><del>稍等几分钟即可在<code>job log</code>中看到脚本的执行结果</del></li>\n</ul>\n<p>这里并不会立即出结果，图示是因为images已经存在于<code>ccr.ccs.tencentyun.com</code>中了，所以给人以速度很快的假象</p>\n<p><img src=\"/img/travis-ci_wait_job_result.png\" alt=\"image.png\"></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><p><a href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/containers/push-image?view=azure-devops\">push-image</a></p>\n</li>\n<li><p><a href=\"https://docs.travis-ci.com/user/build-stages/share-docker-image/\">share-docker-image</a></p>\n</li>\n<li><p><a href=\"https://docs.travis-ci.com/user/docker/\">docker</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>用<code>docker</code>的都知道镜像加速，通过配置阿里云、腾讯云的镜像源确实可以大幅提升<code>docker pull</code>的效果，但对于某些不常用或新版的镜像却收效甚微。</p>\n<p>比如最近想要部署私有ExceptionLess服务，它的dockerfile使用了<code>mcr.microsoft.com/dotnet/core/sdk:2.2.401</code>和<code>mcr.microsoft.com/dotnet/core/aspnet:2.2</code>，这两个镜像拉取非常慢，只能使用手动<code>tag</code>的方式来解决。</p>\n<p>另外，本人在腾讯云中创建了<code>dotnet-core</code>命名空间，源自<code>mcr.microsoft.com</code>可直接使用<code>ccr.ccs.tencentyun.com/dotnet-core/runtime</code></p>\n<p><img src=\"/img/tencenyun_aspnet_core_repository.png\" alt=\"image-20200415142923048\"></p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><hr>\n<p><strong>2020-04-15更新</strong></p>\n<p>原标题为：<em>使用travis-ci的Trigger build功能一键转存</em></p>\n<p>但是本人多次实测，<code>travis-ci</code>的<code>Build</code>带宽限制严重，如果你要Retag <code>Runtime</code>还好，设置<code>travis_wait 30</code>基本也能用；但是如果是SDK，基本都会超时</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Still running (50 of 300): sudo docker push ccr.ccs.tencentyun.com/dotnet-core/sdk:5.0<br>The job exceeded the maximum time <span class=\"hljs-built_in\">limit</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">jobs</span>, and has been terminated.<br></code></pre></td></tr></table></figure>\n\n<p>因此改用<code>Azure Devops</code></p>\n<hr>\n<p><strong>2020-3-9</strong>更新:</p>\n<h3 id=\"使用Azure官方镜像mirror\"><a href=\"#使用Azure官方镜像mirror\" class=\"headerlink\" title=\"使用Azure官方镜像mirror\"></a><del>使用Azure官方镜像mirror</del></h3><p><del>根据此issue:<a href=\"https://github.com/Azure/container-service-for-azure-china/issues/52\">dockerhub.azk8s.cn how to get the multiple path image</a>，可使用<code>mcr.azk8s.cn</code>仓库替换<code>mcr.microsoft.com</code>，即，将<code>mcr.microsoft.com/dotnet/core/aspnet:2.2</code>替换为<code>mcr.azk8s.cn/dotnet/core/aspnet:2.2</code></del></p>\n<p>此方案只能在Azure中使用。。。</p>\n<hr>\n<h3 id=\"手动Tag\"><a href=\"#手动Tag\" class=\"headerlink\" title=\"手动Tag\"></a>手动Tag</h3><p>如果你有一台国外的VPS，那很简单；只需执行<code>docker pull</code>、<code>docker login</code>、<code>docker tag</code>、<code>docker push</code>就OK了。无奈我的VPS到期了，只能另寻它法，google之后从这篇文章找到灵感：<a href=\"https://www.zhoujiangang.com/p/fetch-google-image-use-tag/\">使用重新打 tag 的方式，拉取 k8s.gcr.io 的镜像</a>。</p>\n<h3 id=\"使用Azure-Devops\"><a href=\"#使用Azure-Devops\" class=\"headerlink\" title=\"使用Azure Devops\"></a>使用Azure Devops</h3><ul>\n<li><p>首先，去腾讯云中创建保存<code>image</code>的仓库<br><img src=\"/img/qcloud_images_list.png\" alt=\"image.png\"></p>\n</li>\n<li><p>参考<a href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml#create-a-service-connection\">create-a-service-connection</a>，在project→project settings →Service connections →New ervice connection中新建一个名为<code>tencentyun</code>的<code>Docker Registry</code>，其中<code>Docker Registry</code>地址为：<a href=\"https://ccr.ccs.tencentyun.com/v2/%EF%BC%8C%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E8%AF%B7%E6%9F%A5%E7%9C%8B%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9A%84%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8%E6%8C%87%E5%BC%95\">https://ccr.ccs.tencentyun.com/v2/，用户名和密码请查看腾讯云的镜像使用指引</a></p>\n</li>\n</ul>\n<p><img src=\"/img/AzureDevops_createTencentyun_DockerRegistry.png\" alt=\"image-20200415111820887\"></p>\n<ul>\n<li>在你项目里面的<code>Piplines</code>中新建一个连接到Github仓库的yml，创建模板随便选</li>\n</ul>\n<p><img src=\"/img/AzureDevops_CreatePipline_yml.png\" alt=\"image-20200415135902763\"></p>\n<ul>\n<li>最后把Review中的yml文件替换成如下：</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">trigger:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master</span><br><br><span class=\"hljs-attr\">pool:</span><br>  <span class=\"hljs-attr\">vmImage:</span> <span class=\"hljs-string\">&#x27;ubuntu-latest&#x27;</span><br><br><span class=\"hljs-attr\">variables:</span><br>  <span class=\"hljs-attr\">tag:</span> <span class=\"hljs-string\">&#x27;aspnet:5.0&#x27;</span><br><br><span class=\"hljs-attr\">steps:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">task:</span> <span class=\"hljs-string\">Docker@2</span><br>  <span class=\"hljs-attr\">inputs:</span><br>    <span class=\"hljs-attr\">containerRegistry:</span> <span class=\"hljs-string\">&#x27;tencentyun&#x27;</span><br>    <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">&#x27;login&#x27;</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">task:</span> <span class=\"hljs-string\">PowerShell@2</span><br>  <span class=\"hljs-attr\">inputs:</span><br>    <span class=\"hljs-attr\">targetType:</span> <span class=\"hljs-string\">&#x27;inline&#x27;</span><br>    <span class=\"hljs-attr\">script:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">      $env:version=&quot;$(tag)&quot;</span><br><span class=\"hljs-string\"></span>      <br>      <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">pull</span> <span class=\"hljs-string\">mcr.microsoft.com/dotnet/core/$env:version</span><br>      <br>      <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">tag</span> <span class=\"hljs-string\">mcr.microsoft.com/dotnet/core/$env:version</span> <span class=\"hljs-string\">ccr.ccs.tencentyun.com/dotnet-core/$env:version</span><br>      <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">push</span> <span class=\"hljs-string\">ccr.ccs.tencentyun.com/dotnet-core/$env:version</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>然后点击<code>Save and run</code>(或者也可以在自己的仓库中创建一个上述的<code>azure-pipelines.yml</code>文件,在Azure Devops中连接好后提交)就可以了 </li>\n</ul>\n<h3 id=\"使用travis-ci自动Tag\"><a href=\"#使用travis-ci自动Tag\" class=\"headerlink\" title=\"使用travis-ci自动Tag\"></a><del>使用travis-ci自动Tag</del></h3><p><code>travis-ci</code>的<code>Build</code>带宽限制严重，已改用Azure Devops，以下步骤仅作参考</p>\n<hr>\n<p>使用第三方的CI、CD服务<code>push</code>镜像到国内私有仓库中解决<code>docker pull</code>过慢的问题，本例的CI-CD使用的是<a href=\"https://travis-ci.com/\">travis-ci</a>，由于自己使用了腾讯云的容器服务，因此私有库使用了腾讯云提供的免费镜像仓库。</p>\n<ul>\n<li>首先，去腾讯云中创建保存<code>image</code>的仓库<br><img src=\"/img/qcloud_images_list.png\" alt=\"image.png\"></li>\n<li>其次，访问<a href=\"https://travis-ci.com/\">travis-ci</a>，并授权其对自己git库的访问权限(<strong>随便什么仓库都行，因为我们并不需要使用里面的代码</strong>)</li>\n<li>参照腾讯云提供的镜像使用指引，编写<code>.travis.yml</code>脚本文件<br><img src=\"/img/qcloud_images_guid.png\" alt=\"image.png\"><br>我的脚本文件如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">language: bash<br><span class=\"hljs-built_in\">env</span>:<br>  - version=sdk:2.2<br>services:<br>  - docker<br>sudo: required<br>branches:<br>  only:<br>    - master<br>script:<br>  - <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DOCKER_PASSWORD</span>&quot;</span> | docker login -u <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DOCKER_USERNAME</span>&quot;</span> --password-stdin ccr.ccs.tencentyun.com<br>  - docker pull mcr.microsoft.com/dotnet/core/<span class=\"hljs-variable\">$version</span><br><br>after_success:<br>  - sudo docker tag mcr.microsoft.com/dotnet/core/<span class=\"hljs-variable\">$version</span> ccr.ccs.tencentyun.com/dotnet-core/<span class=\"hljs-variable\">$version</span><br>  - sudo docker push ccr.ccs.tencentyun.com/dotnet-core/<span class=\"hljs-variable\">$version</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>在<a href=\"https://travis-ci.com/\">travis-ci</a>的首页上，任意选择一个仓库，然后在<code>More Options</code>→<code>Settings</code>里面添加docker登陆的用户名密码环境变量<code>DOCKER_USERNAME</code>和<code>DOCKER_PASSWORD</code></li>\n</ul>\n<p><img src=\"/img/travis-ci_setEnv.png\" alt=\"image-20200410113527361\"></p>\n<ul>\n<li>在<code>More Options</code>→<code>Trigger build</code>的<code>CUSTOM CONFIG</code>中粘贴写好的<code>.travis.yml</code>脚本并点击<code>Trigger custom build</code><br><img src=\"/img/travis-ci_Trigger_Custom_Build.png\" alt=\"image.png\"></li>\n<li><del>稍等几分钟即可在<code>job log</code>中看到脚本的执行结果</del></li>\n</ul>\n<p>这里并不会立即出结果，图示是因为images已经存在于<code>ccr.ccs.tencentyun.com</code>中了，所以给人以速度很快的假象</p>\n<p><img src=\"/img/travis-ci_wait_job_result.png\" alt=\"image.png\"></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><p><a href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/containers/push-image?view=azure-devops\">push-image</a></p>\n</li>\n<li><p><a href=\"https://docs.travis-ci.com/user/build-stages/share-docker-image/\">share-docker-image</a></p>\n</li>\n<li><p><a href=\"https://docs.travis-ci.com/user/docker/\">docker</a></p>\n</li>\n</ul>\n"},{"layout":"post","title":"任天堂各区最新实时会员价格","subtitle":"每日获取各区官网原价及汇率计算人民币售价","excerpt":"横向对比后可以找到最便宜的价格","date":"2022-09-20T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 说明\n\n最近打算开通任天堂在线会员，但是找了一圈互联网却并没有那么一个汇总各区价格的地方；于是花两个月时间做了这样一个任天堂会员价格表。\n\n\n\n已知任天堂会员可以全区通用，所以找到一个最便宜的区开通在线会员是一个省钱的方法。\n\n下面汇总了已知的常用区的会员价格，原价和汇率每日更新。\n\n### 实时价格(点击后可查看原价)\n\n<iframe width=\"640\" height=\"450\" src=\"https://nsonlineprice.wangshuai.app/#/home\" border=\"0\" framespacing=\"0\" allowfullscreen=\"true\" __idm_id__=\"2465793\" style=\"\n    width: 100%;frameborder=\"no\"> </iframe>\n\n","source":"_posts/2022-09-21-任天堂各区最新实时会员价格.md","raw":"---\nlayout:     post\ntitle:      任天堂各区最新实时会员价格\nsubtitle:   每日获取各区官网原价及汇率计算人民币售价\nexcerpt:    横向对比后可以找到最便宜的价格\ndate:       2022-9-21\nauthor:     王帅\ncatalog: true\ntags:\n    - nintendo\n    - nintendo switch online\ntypora-root-url: ..\n---\n\n### 说明\n\n最近打算开通任天堂在线会员，但是找了一圈互联网却并没有那么一个汇总各区价格的地方；于是花两个月时间做了这样一个任天堂会员价格表。\n\n\n\n已知任天堂会员可以全区通用，所以找到一个最便宜的区开通在线会员是一个省钱的方法。\n\n下面汇总了已知的常用区的会员价格，原价和汇率每日更新。\n\n### 实时价格(点击后可查看原价)\n\n<iframe width=\"640\" height=\"450\" src=\"https://nsonlineprice.wangshuai.app/#/home\" border=\"0\" framespacing=\"0\" allowfullscreen=\"true\" __idm_id__=\"2465793\" style=\"\n    width: 100%;frameborder=\"no\"> </iframe>\n\n","slug":"2022-09-21-任天堂各区最新实时会员价格","published":1,"updated":"2022-09-22T14:48:44.419Z","_id":"cl8vdlqij00163oo2erc9hmyr","comments":1,"photos":[],"link":"","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>最近打算开通任天堂在线会员，但是找了一圈互联网却并没有那么一个汇总各区价格的地方；于是花两个月时间做了这样一个任天堂会员价格表。</p>\n<p>已知任天堂会员可以全区通用，所以找到一个最便宜的区开通在线会员是一个省钱的方法。</p>\n<p>下面汇总了已知的常用区的会员价格，原价和汇率每日更新。</p>\n<h3 id=\"实时价格-点击后可查看原价\"><a href=\"#实时价格-点击后可查看原价\" class=\"headerlink\" title=\"实时价格(点击后可查看原价)\"></a>实时价格(点击后可查看原价)</h3><iframe width=\"640\" height=\"450\" src=\"https://nsonlineprice.wangshuai.app/#/home\" border=\"0\" framespacing=\"0\" allowfullscreen=\"true\" __idm_id__=\"2465793\" style=\"\n    width: 100%;frameborder=\"no\"> </iframe>\n\n","site":{"data":{}},"more":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>最近打算开通任天堂在线会员，但是找了一圈互联网却并没有那么一个汇总各区价格的地方；于是花两个月时间做了这样一个任天堂会员价格表。</p>\n<p>已知任天堂会员可以全区通用，所以找到一个最便宜的区开通在线会员是一个省钱的方法。</p>\n<p>下面汇总了已知的常用区的会员价格，原价和汇率每日更新。</p>\n<h3 id=\"实时价格-点击后可查看原价\"><a href=\"#实时价格-点击后可查看原价\" class=\"headerlink\" title=\"实时价格(点击后可查看原价)\"></a>实时价格(点击后可查看原价)</h3><iframe width=\"640\" height=\"450\" src=\"https://nsonlineprice.wangshuai.app/#/home\" border=\"0\" framespacing=\"0\" allowfullscreen=\"true\" __idm_id__=\"2465793\" style=\"\n    width: 100%;frameborder=\"no\"> </iframe>\n\n"},{"layout":"post","title":"官方支持,解决国内docker pull mcr.microsoft.com 镜像过慢的问题","subtitle":"使用Azure提供的 mcr.azk8s.cn 国内官方镜像仓库pull dotnet 镜像","date":"2020-03-08T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n## 解决办法\n\n~~根据此issue:[dockerhub.azk8s.cn how to get the multiple path image](https://github.com/Azure/container-service-for-azure-china/issues/52)，可使用`mcr.azk8s.cn`仓库替换`mcr.microsoft.com`，即，如果你需要`mcr.microsoft.com/dotnet/core/aspnet:2.2`，那你将`mcr.microsoft.com`替换为`mcr.azk8s.cn`;变成`mcr.azk8s.cn/dotnet/core/aspnet:2.2`即可~~\n\n此仓库已被限制为只能在Azure中使用，如果想要有更快的`docker pull` 速度，可以参考另一篇文章[无需VPS,使用重新打tag的方式 拉取、转存mcr.microsoft.com的镜像](/2020/01/17/无需VPS-使用重新打tag的方式-拉取-转存mcr.microsoft.com的镜像/)","source":"_posts/2020-03-09-官方支持，解决国内docker pull mcr.microsoft.com 镜像过慢的问题.md","raw":"---\nlayout:     post\ntitle:      官方支持,解决国内docker pull mcr.microsoft.com 镜像过慢的问题\nsubtitle:   使用Azure提供的 mcr.azk8s.cn 国内官方镜像仓库pull dotnet 镜像\ndate:       2020-3-9\nauthor:     王帅\ncatalog: true\ntags:\n    - docker\n    - mirror\n    - docker-images\ntypora-root-url: ..\n\n---\n\n## 解决办法\n\n~~根据此issue:[dockerhub.azk8s.cn how to get the multiple path image](https://github.com/Azure/container-service-for-azure-china/issues/52)，可使用`mcr.azk8s.cn`仓库替换`mcr.microsoft.com`，即，如果你需要`mcr.microsoft.com/dotnet/core/aspnet:2.2`，那你将`mcr.microsoft.com`替换为`mcr.azk8s.cn`;变成`mcr.azk8s.cn/dotnet/core/aspnet:2.2`即可~~\n\n此仓库已被限制为只能在Azure中使用，如果想要有更快的`docker pull` 速度，可以参考另一篇文章[无需VPS,使用重新打tag的方式 拉取、转存mcr.microsoft.com的镜像](/2020/01/17/无需VPS-使用重新打tag的方式-拉取-转存mcr.microsoft.com的镜像/)","slug":"2020-03-09-官方支持，解决国内docker pull mcr.microsoft.com 镜像过慢的问题","published":1,"updated":"2020-04-10T01:47:25.035Z","_id":"cl8vdlqin00173oo2gafu4zja","comments":1,"photos":[],"link":"","content":"<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p><del>根据此issue:<a href=\"https://github.com/Azure/container-service-for-azure-china/issues/52\">dockerhub.azk8s.cn how to get the multiple path image</a>，可使用<code>mcr.azk8s.cn</code>仓库替换<code>mcr.microsoft.com</code>，即，如果你需要<code>mcr.microsoft.com/dotnet/core/aspnet:2.2</code>，那你将<code>mcr.microsoft.com</code>替换为<code>mcr.azk8s.cn</code>;变成<code>mcr.azk8s.cn/dotnet/core/aspnet:2.2</code>即可</del></p>\n<p>此仓库已被限制为只能在Azure中使用，如果想要有更快的<code>docker pull</code> 速度，可以参考另一篇文章<a href=\"/2020/01/17/%E6%97%A0%E9%9C%80VPS-%E4%BD%BF%E7%94%A8%E9%87%8D%E6%96%B0%E6%89%93tag%E7%9A%84%E6%96%B9%E5%BC%8F-%E6%8B%89%E5%8F%96-%E8%BD%AC%E5%AD%98mcr.microsoft.com%E7%9A%84%E9%95%9C%E5%83%8F/\">无需VPS,使用重新打tag的方式 拉取、转存mcr.microsoft.com的镜像</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p><del>根据此issue:<a href=\"https://github.com/Azure/container-service-for-azure-china/issues/52\">dockerhub.azk8s.cn how to get the multiple path image</a>，可使用<code>mcr.azk8s.cn</code>仓库替换<code>mcr.microsoft.com</code>，即，如果你需要<code>mcr.microsoft.com/dotnet/core/aspnet:2.2</code>，那你将<code>mcr.microsoft.com</code>替换为<code>mcr.azk8s.cn</code>;变成<code>mcr.azk8s.cn/dotnet/core/aspnet:2.2</code>即可</del></p>\n<p>此仓库已被限制为只能在Azure中使用，如果想要有更快的<code>docker pull</code> 速度，可以参考另一篇文章<a href=\"/2020/01/17/%E6%97%A0%E9%9C%80VPS-%E4%BD%BF%E7%94%A8%E9%87%8D%E6%96%B0%E6%89%93tag%E7%9A%84%E6%96%B9%E5%BC%8F-%E6%8B%89%E5%8F%96-%E8%BD%AC%E5%AD%98mcr.microsoft.com%E7%9A%84%E9%95%9C%E5%83%8F/\">无需VPS,使用重新打tag的方式 拉取、转存mcr.microsoft.com的镜像</a></p>\n"},{"layout":"post","title":"fastreport显示带[] 方括号的文本或表达式","subtitle":"修改Brackets属性改变变量标识符","date":"2020-03-11T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n## 引言\n\nFastreport默认使用`[]`标识变量及表达式，如果你显示的文本中有方括号就会报错\n\n```c#\n    FastReport.TextObjectBase.CalcAndFormatExpression(String expression,Int32 expressionIndex)\n    FastReport.TextObject.GetData()\n    FastReport.BandBase.GetData()\n    FastReport.Engine.ReportEngine.PrepareBand(BandBase band, Boolean getData)        \tFastReport.Engine.ReportEngine.ShowBandToPreparedPages(BandBase band, Boolean getData)\n    FastReport.Engine.ReportEngine.ShowBand(BandBase band, Boolean getData)\n    FastReport.Engine.ReportEngine.ShowDataBand(DataBand dataBand, Int32 rowCount)\n    FastReport.Engine.ReportEngine.RunDataBand(DataBand dataBand, Int32 rowCount, Boolean keepFirstRow, Boolean keepLastRow)\n    FastReport.Engine.ReportEngine.RunDataBand(DataBand dataBand)\n    FastReport.Engine.ReportEngine.RunBands(BandCollection bands)       FastReport.Engine.ReportEngine.RenderOuterSubreports(BandBase parentBand)\n    FastReport.Engine.ReportEngine.ShowBand(BandBase band, Boolean getData)\n    FastReport.Engine.ReportEngine.ShowDataBand(DataBand dataBand, Int32 rowCount)\n    FastReport.Engine.ReportEngine.RunDataBand(DataBand dataBand, Int32 rowCount, Boolean keepFirstRow, Boolean keepLastRow)    FastReport.Engine.ReportEngine.ShowGroupTree(GroupTreeItem root)     FastReport.Engine.ReportEngine.ShowGroupTree(GroupTreeItem root)\n    FastReport.Engine.ReportEngine.RunGroup(GroupHeaderBand groupBand)\n    FastReport.Engine.ReportEngine.RunBands(BandCollection bands)\n    FastReport.Engine.ReportEngine.RunReportPage(ReportPage page)\n    FastReport.Engine.ReportEngine.RunReportPages()\n    FastReport.Engine.ReportEngine.RunReportPages(ReportPage page)\n    FastReport.Engine.ReportEngine.Run(Boolean runDialogs, Boolean append, Boolean resetDataState, ReportPage page)\n    FastReport.Report.Prepare(Boolean append)\n```\n\n此时你首先想到的就是转义，其实`Fastreport`提供了简单的方法\n\n## 解决办法\n\n变量标识符叫`Brackets`，它默认是`[,]`，你可以把它替换成其它的`\"<,>\",`、` \"<!,!>\"`；但是任何其它的标识符也难免有作为文本的时候，此时你可以删除`Brackets`属性，那它就会直接把你的值作为变量来使用，而不会解析文本中的`[]`\n\n## 参考资料：\n\n* [escape-square-brackets-in-fast-report-strings](https://stackoverflow.com/questions/12636732/escape-square-brackets-in-fast-report-strings)\n* [Displaying the expressions](https://www.fast-report.com/documentation/UserManFrNET-en/index.html?textobjectexpressions.htm)\n* [Expressions](https://fastreports.github.io/FastReport.Documentation/Expressions.html)\n\n","source":"_posts/2020-03-12-fastreport显示带[] 方括号的文本.md","raw":"---\nlayout:     post\ntitle:      fastreport显示带[] 方括号的文本或表达式\nsubtitle:   修改Brackets属性改变变量标识符\ndate:       2020-3-12\nauthor:     王帅\ncatalog: true\ntags:\n    - fastreport\n    - winfrom\n    - Brackets\ntypora-root-url: ..\n\n---\n\n## 引言\n\nFastreport默认使用`[]`标识变量及表达式，如果你显示的文本中有方括号就会报错\n\n```c#\n    FastReport.TextObjectBase.CalcAndFormatExpression(String expression,Int32 expressionIndex)\n    FastReport.TextObject.GetData()\n    FastReport.BandBase.GetData()\n    FastReport.Engine.ReportEngine.PrepareBand(BandBase band, Boolean getData)        \tFastReport.Engine.ReportEngine.ShowBandToPreparedPages(BandBase band, Boolean getData)\n    FastReport.Engine.ReportEngine.ShowBand(BandBase band, Boolean getData)\n    FastReport.Engine.ReportEngine.ShowDataBand(DataBand dataBand, Int32 rowCount)\n    FastReport.Engine.ReportEngine.RunDataBand(DataBand dataBand, Int32 rowCount, Boolean keepFirstRow, Boolean keepLastRow)\n    FastReport.Engine.ReportEngine.RunDataBand(DataBand dataBand)\n    FastReport.Engine.ReportEngine.RunBands(BandCollection bands)       FastReport.Engine.ReportEngine.RenderOuterSubreports(BandBase parentBand)\n    FastReport.Engine.ReportEngine.ShowBand(BandBase band, Boolean getData)\n    FastReport.Engine.ReportEngine.ShowDataBand(DataBand dataBand, Int32 rowCount)\n    FastReport.Engine.ReportEngine.RunDataBand(DataBand dataBand, Int32 rowCount, Boolean keepFirstRow, Boolean keepLastRow)    FastReport.Engine.ReportEngine.ShowGroupTree(GroupTreeItem root)     FastReport.Engine.ReportEngine.ShowGroupTree(GroupTreeItem root)\n    FastReport.Engine.ReportEngine.RunGroup(GroupHeaderBand groupBand)\n    FastReport.Engine.ReportEngine.RunBands(BandCollection bands)\n    FastReport.Engine.ReportEngine.RunReportPage(ReportPage page)\n    FastReport.Engine.ReportEngine.RunReportPages()\n    FastReport.Engine.ReportEngine.RunReportPages(ReportPage page)\n    FastReport.Engine.ReportEngine.Run(Boolean runDialogs, Boolean append, Boolean resetDataState, ReportPage page)\n    FastReport.Report.Prepare(Boolean append)\n```\n\n此时你首先想到的就是转义，其实`Fastreport`提供了简单的方法\n\n## 解决办法\n\n变量标识符叫`Brackets`，它默认是`[,]`，你可以把它替换成其它的`\"<,>\",`、` \"<!,!>\"`；但是任何其它的标识符也难免有作为文本的时候，此时你可以删除`Brackets`属性，那它就会直接把你的值作为变量来使用，而不会解析文本中的`[]`\n\n## 参考资料：\n\n* [escape-square-brackets-in-fast-report-strings](https://stackoverflow.com/questions/12636732/escape-square-brackets-in-fast-report-strings)\n* [Displaying the expressions](https://www.fast-report.com/documentation/UserManFrNET-en/index.html?textobjectexpressions.htm)\n* [Expressions](https://fastreports.github.io/FastReport.Documentation/Expressions.html)\n\n","slug":"2020-03-12-fastreport显示带[] 方括号的文本","published":1,"updated":"2020-03-16T16:16:57.154Z","_id":"cl8vdlqj0001f3oo2devwa05j","comments":1,"photos":[],"link":"","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>Fastreport默认使用<code>[]</code>标识变量及表达式，如果你显示的文本中有方括号就会报错</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">FastReport.TextObjectBase.CalcAndFormatExpression(String expression,Int32 expressionIndex)<br>FastReport.TextObject.GetData()<br>FastReport.BandBase.GetData()<br>FastReport.Engine.ReportEngine.PrepareBand(BandBase band, Boolean getData)        \tFastReport.Engine.ReportEngine.ShowBandToPreparedPages(BandBase band, Boolean getData)<br>FastReport.Engine.ReportEngine.ShowBand(BandBase band, Boolean getData)<br>FastReport.Engine.ReportEngine.ShowDataBand(DataBand dataBand, Int32 rowCount)<br>FastReport.Engine.ReportEngine.RunDataBand(DataBand dataBand, Int32 rowCount, Boolean keepFirstRow, Boolean keepLastRow)<br>FastReport.Engine.ReportEngine.RunDataBand(DataBand dataBand)<br>FastReport.Engine.ReportEngine.RunBands(BandCollection bands)       FastReport.Engine.ReportEngine.RenderOuterSubreports(BandBase parentBand)<br>FastReport.Engine.ReportEngine.ShowBand(BandBase band, Boolean getData)<br>FastReport.Engine.ReportEngine.ShowDataBand(DataBand dataBand, Int32 rowCount)<br>FastReport.Engine.ReportEngine.RunDataBand(DataBand dataBand, Int32 rowCount, Boolean keepFirstRow, Boolean keepLastRow)    FastReport.Engine.ReportEngine.ShowGroupTree(GroupTreeItem root)     FastReport.Engine.ReportEngine.ShowGroupTree(GroupTreeItem root)<br>FastReport.Engine.ReportEngine.RunGroup(GroupHeaderBand groupBand)<br>FastReport.Engine.ReportEngine.RunBands(BandCollection bands)<br>FastReport.Engine.ReportEngine.RunReportPage(ReportPage page)<br>FastReport.Engine.ReportEngine.RunReportPages()<br>FastReport.Engine.ReportEngine.RunReportPages(ReportPage page)<br>FastReport.Engine.ReportEngine.Run(Boolean runDialogs, Boolean append, Boolean resetDataState, ReportPage page)<br>FastReport.Report.Prepare(Boolean append)<br></code></pre></td></tr></table></figure>\n\n<p>此时你首先想到的就是转义，其实<code>Fastreport</code>提供了简单的方法</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>变量标识符叫<code>Brackets</code>，它默认是<code>[,]</code>，你可以把它替换成其它的<code>&quot;&lt;,&gt;&quot;,</code>、<code> &quot;&lt;!,!&gt;&quot;</code>；但是任何其它的标识符也难免有作为文本的时候，此时你可以删除<code>Brackets</code>属性，那它就会直接把你的值作为变量来使用，而不会解析文本中的<code>[]</code></p>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/12636732/escape-square-brackets-in-fast-report-strings\">escape-square-brackets-in-fast-report-strings</a></li>\n<li><a href=\"https://www.fast-report.com/documentation/UserManFrNET-en/index.html?textobjectexpressions.htm\">Displaying the expressions</a></li>\n<li><a href=\"https://fastreports.github.io/FastReport.Documentation/Expressions.html\">Expressions</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>Fastreport默认使用<code>[]</code>标识变量及表达式，如果你显示的文本中有方括号就会报错</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">FastReport.TextObjectBase.CalcAndFormatExpression(String expression,Int32 expressionIndex)<br>FastReport.TextObject.GetData()<br>FastReport.BandBase.GetData()<br>FastReport.Engine.ReportEngine.PrepareBand(BandBase band, Boolean getData)        \tFastReport.Engine.ReportEngine.ShowBandToPreparedPages(BandBase band, Boolean getData)<br>FastReport.Engine.ReportEngine.ShowBand(BandBase band, Boolean getData)<br>FastReport.Engine.ReportEngine.ShowDataBand(DataBand dataBand, Int32 rowCount)<br>FastReport.Engine.ReportEngine.RunDataBand(DataBand dataBand, Int32 rowCount, Boolean keepFirstRow, Boolean keepLastRow)<br>FastReport.Engine.ReportEngine.RunDataBand(DataBand dataBand)<br>FastReport.Engine.ReportEngine.RunBands(BandCollection bands)       FastReport.Engine.ReportEngine.RenderOuterSubreports(BandBase parentBand)<br>FastReport.Engine.ReportEngine.ShowBand(BandBase band, Boolean getData)<br>FastReport.Engine.ReportEngine.ShowDataBand(DataBand dataBand, Int32 rowCount)<br>FastReport.Engine.ReportEngine.RunDataBand(DataBand dataBand, Int32 rowCount, Boolean keepFirstRow, Boolean keepLastRow)    FastReport.Engine.ReportEngine.ShowGroupTree(GroupTreeItem root)     FastReport.Engine.ReportEngine.ShowGroupTree(GroupTreeItem root)<br>FastReport.Engine.ReportEngine.RunGroup(GroupHeaderBand groupBand)<br>FastReport.Engine.ReportEngine.RunBands(BandCollection bands)<br>FastReport.Engine.ReportEngine.RunReportPage(ReportPage page)<br>FastReport.Engine.ReportEngine.RunReportPages()<br>FastReport.Engine.ReportEngine.RunReportPages(ReportPage page)<br>FastReport.Engine.ReportEngine.Run(Boolean runDialogs, Boolean append, Boolean resetDataState, ReportPage page)<br>FastReport.Report.Prepare(Boolean append)<br></code></pre></td></tr></table></figure>\n\n<p>此时你首先想到的就是转义，其实<code>Fastreport</code>提供了简单的方法</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>变量标识符叫<code>Brackets</code>，它默认是<code>[,]</code>，你可以把它替换成其它的<code>&quot;&lt;,&gt;&quot;,</code>、<code> &quot;&lt;!,!&gt;&quot;</code>；但是任何其它的标识符也难免有作为文本的时候，此时你可以删除<code>Brackets</code>属性，那它就会直接把你的值作为变量来使用，而不会解析文本中的<code>[]</code></p>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/12636732/escape-square-brackets-in-fast-report-strings\">escape-square-brackets-in-fast-report-strings</a></li>\n<li><a href=\"https://www.fast-report.com/documentation/UserManFrNET-en/index.html?textobjectexpressions.htm\">Displaying the expressions</a></li>\n<li><a href=\"https://fastreports.github.io/FastReport.Documentation/Expressions.html\">Expressions</a></li>\n</ul>\n"},{"layout":"post","title":"fastreport debug 调试frx文件","subtitle":"使用visual studio 跟踪frx流程查看frx变量","date":"2020-03-12T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n## 引言\n\n`Fastreport`自带设计器的代码编辑功能非常糟糕，如果你写了很多逻辑在frx文件里面，你几乎无法debug调试，唯有使用`MessageBox.Show()`方法查看变量的值，而如果你要查看一个循环中的值。。。\n\n## 解决办法\n\n`Fastreport`的frx文件提供有导出为C#代码的功能，使用visual studio执行C#代码即可解决调试难的问题\n\n## 步骤\n\n打开frx文件，选择file→Save As→保存类型→C#file\n\n![saveAsC#](/img/fastreport_saveAsCSharpfile.png)\n\n生成的文件可能有错误，删除无效的引用后一般就可以编译通过了\n\n在控制台中使用以下代码\n\n```c#\n//using FastReport;\nvar reportCtrl = new frx();//frx保存的c#类\n\n//设置报表参数\nforeach (var item in paramsDic.Keys)\n{\n    reportCtrl.SetParameterValue(item, paramsDic[item]);\n}\n\n//注册报表数据源\nreportCtrl.RegisterData(dataByte);\n\nreportCtrl.Show();\n\n```\n\n在生成的frx里面打上断点,执行上述代码就能中断并查看变量了\n\n![image-20200313175310786](/img/fastreport_debug.png)","source":"_posts/2020-03-13-fastreport-debug 调试frx文件.md","raw":"---\nlayout:     post\ntitle:      fastreport debug 调试frx文件\nsubtitle:   使用visual studio 跟踪frx流程查看frx变量\ndate:       2020-3-13\nauthor:     王帅\ncatalog: true\ntags:\n    - fastreport\n    - winfrom\n    - Debug\ntypora-root-url: ..\n\n---\n\n## 引言\n\n`Fastreport`自带设计器的代码编辑功能非常糟糕，如果你写了很多逻辑在frx文件里面，你几乎无法debug调试，唯有使用`MessageBox.Show()`方法查看变量的值，而如果你要查看一个循环中的值。。。\n\n## 解决办法\n\n`Fastreport`的frx文件提供有导出为C#代码的功能，使用visual studio执行C#代码即可解决调试难的问题\n\n## 步骤\n\n打开frx文件，选择file→Save As→保存类型→C#file\n\n![saveAsC#](/img/fastreport_saveAsCSharpfile.png)\n\n生成的文件可能有错误，删除无效的引用后一般就可以编译通过了\n\n在控制台中使用以下代码\n\n```c#\n//using FastReport;\nvar reportCtrl = new frx();//frx保存的c#类\n\n//设置报表参数\nforeach (var item in paramsDic.Keys)\n{\n    reportCtrl.SetParameterValue(item, paramsDic[item]);\n}\n\n//注册报表数据源\nreportCtrl.RegisterData(dataByte);\n\nreportCtrl.Show();\n\n```\n\n在生成的frx里面打上断点,执行上述代码就能中断并查看变量了\n\n![image-20200313175310786](/img/fastreport_debug.png)","slug":"2020-03-13-fastreport-debug 调试frx文件","published":1,"updated":"2020-03-16T16:16:57.155Z","_id":"cl8vdlqjn001m3oo2bbtyhl0p","comments":1,"photos":[],"link":"","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p><code>Fastreport</code>自带设计器的代码编辑功能非常糟糕，如果你写了很多逻辑在frx文件里面，你几乎无法debug调试，唯有使用<code>MessageBox.Show()</code>方法查看变量的值，而如果你要查看一个循环中的值。。。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p><code>Fastreport</code>的frx文件提供有导出为C#代码的功能，使用visual studio执行C#代码即可解决调试难的问题</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>打开frx文件，选择file→Save As→保存类型→C#file</p>\n<p><img src=\"/img/fastreport_saveAsCSharpfile.png\" alt=\"saveAsC#\"></p>\n<p>生成的文件可能有错误，删除无效的引用后一般就可以编译通过了</p>\n<p>在控制台中使用以下代码</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-comment\">//using FastReport;</span><br><span class=\"hljs-keyword\">var</span> reportCtrl = <span class=\"hljs-keyword\">new</span> frx();<span class=\"hljs-comment\">//frx保存的c#类</span><br><br><span class=\"hljs-comment\">//设置报表参数</span><br><span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> item <span class=\"hljs-keyword\">in</span> paramsDic.Keys)<br>&#123;<br>    reportCtrl.SetParameterValue(item, paramsDic[item]);<br>&#125;<br><br><span class=\"hljs-comment\">//注册报表数据源</span><br>reportCtrl.RegisterData(dataByte);<br><br>reportCtrl.Show();<br><br></code></pre></td></tr></table></figure>\n\n<p>在生成的frx里面打上断点,执行上述代码就能中断并查看变量了</p>\n<p><img src=\"/img/fastreport_debug.png\" alt=\"image-20200313175310786\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p><code>Fastreport</code>自带设计器的代码编辑功能非常糟糕，如果你写了很多逻辑在frx文件里面，你几乎无法debug调试，唯有使用<code>MessageBox.Show()</code>方法查看变量的值，而如果你要查看一个循环中的值。。。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p><code>Fastreport</code>的frx文件提供有导出为C#代码的功能，使用visual studio执行C#代码即可解决调试难的问题</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>打开frx文件，选择file→Save As→保存类型→C#file</p>\n<p><img src=\"/img/fastreport_saveAsCSharpfile.png\" alt=\"saveAsC#\"></p>\n<p>生成的文件可能有错误，删除无效的引用后一般就可以编译通过了</p>\n<p>在控制台中使用以下代码</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-comment\">//using FastReport;</span><br><span class=\"hljs-keyword\">var</span> reportCtrl = <span class=\"hljs-keyword\">new</span> frx();<span class=\"hljs-comment\">//frx保存的c#类</span><br><br><span class=\"hljs-comment\">//设置报表参数</span><br><span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> item <span class=\"hljs-keyword\">in</span> paramsDic.Keys)<br>&#123;<br>    reportCtrl.SetParameterValue(item, paramsDic[item]);<br>&#125;<br><br><span class=\"hljs-comment\">//注册报表数据源</span><br>reportCtrl.RegisterData(dataByte);<br><br>reportCtrl.Show();<br><br></code></pre></td></tr></table></figure>\n\n<p>在生成的frx里面打上断点,执行上述代码就能中断并查看变量了</p>\n<p><img src=\"/img/fastreport_debug.png\" alt=\"image-20200313175310786\"></p>\n"},{"layout":"post","title":"fastreport 查询系统变量总页数 Report.GetVariableValue(\"TotalPages\")总是返回1","subtitle":"Report.Engine.CurPage的值正常而TotalPages总是1","date":"2020-03-15T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n\n\n## 解决办法\n\n* 返回0\n\n参考官方文档[**Reference to system variables**](https://www.fast-report.com/documentation/UserManFrNET-en/index.html?usesystemvariablesinexpressions.htm)和[The TOTALPAGES variable always returns 0.](https://www.fast-report.com/en/faq/3/24/)，如果`Report.GetVariableValue(\"TotalPages\")`总是返回0，那你应该在`Report`→`Options`中设置**Double Pass**\n\n![image-20200316175041619](/img/fastreport_doublepass.png)\n\n* 返回1\n\n方法如果总是返回1，那你应该在取值上下文中取消**Reset Page Number**选项\n\n![image-20200316175516777](/img/fastreport_GroupSetResetPageNumber.png)\n\n","source":"_posts/2020-03-16-fastreport查询系统变量总页数 Report.GetVariableValue(TotalPages)总是返回1.md","raw":"---\nlayout:     post\ntitle:      fastreport 查询系统变量总页数 Report.GetVariableValue(\"TotalPages\")总是返回1\nsubtitle:   Report.Engine.CurPage的值正常而TotalPages总是1\ndate:       2020-3-16\nauthor:     王帅\ncatalog: true\ntags:\n    - fastreport\n    - winfrom\ntypora-root-url: ..\n\n---\n\n\n\n## 解决办法\n\n* 返回0\n\n参考官方文档[**Reference to system variables**](https://www.fast-report.com/documentation/UserManFrNET-en/index.html?usesystemvariablesinexpressions.htm)和[The TOTALPAGES variable always returns 0.](https://www.fast-report.com/en/faq/3/24/)，如果`Report.GetVariableValue(\"TotalPages\")`总是返回0，那你应该在`Report`→`Options`中设置**Double Pass**\n\n![image-20200316175041619](/img/fastreport_doublepass.png)\n\n* 返回1\n\n方法如果总是返回1，那你应该在取值上下文中取消**Reset Page Number**选项\n\n![image-20200316175516777](/img/fastreport_GroupSetResetPageNumber.png)\n\n","slug":"2020-03-16-fastreport查询系统变量总页数 Report.GetVariableValue(TotalPages)总是返回1","published":1,"updated":"2020-03-16T16:16:57.157Z","_id":"cl8vdlqkn001r3oo2a1uc3dd1","comments":1,"photos":[],"link":"","content":"<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><ul>\n<li>返回0</li>\n</ul>\n<p>参考官方文档<a href=\"https://www.fast-report.com/documentation/UserManFrNET-en/index.html?usesystemvariablesinexpressions.htm\"><strong>Reference to system variables</strong></a>和<a href=\"https://www.fast-report.com/en/faq/3/24/\">The TOTALPAGES variable always returns 0.</a>，如果<code>Report.GetVariableValue(&quot;TotalPages&quot;)</code>总是返回0，那你应该在<code>Report</code>→<code>Options</code>中设置<strong>Double Pass</strong></p>\n<p><img src=\"/img/fastreport_doublepass.png\" alt=\"image-20200316175041619\"></p>\n<ul>\n<li>返回1</li>\n</ul>\n<p>方法如果总是返回1，那你应该在取值上下文中取消<strong>Reset Page Number</strong>选项</p>\n<p><img src=\"/img/fastreport_GroupSetResetPageNumber.png\" alt=\"image-20200316175516777\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><ul>\n<li>返回0</li>\n</ul>\n<p>参考官方文档<a href=\"https://www.fast-report.com/documentation/UserManFrNET-en/index.html?usesystemvariablesinexpressions.htm\"><strong>Reference to system variables</strong></a>和<a href=\"https://www.fast-report.com/en/faq/3/24/\">The TOTALPAGES variable always returns 0.</a>，如果<code>Report.GetVariableValue(&quot;TotalPages&quot;)</code>总是返回0，那你应该在<code>Report</code>→<code>Options</code>中设置<strong>Double Pass</strong></p>\n<p><img src=\"/img/fastreport_doublepass.png\" alt=\"image-20200316175041619\"></p>\n<ul>\n<li>返回1</li>\n</ul>\n<p>方法如果总是返回1，那你应该在取值上下文中取消<strong>Reset Page Number</strong>选项</p>\n<p><img src=\"/img/fastreport_GroupSetResetPageNumber.png\" alt=\"image-20200316175516777\"></p>\n"},{"layout":"post","title":"单元测试CommandLineUtils中的命令","subtitle":"UnitTest the command of CommandLineUtils","date":"2020-04-05T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\n\n使用[CommandLineUtils](https://github.com/natemcmaster/CommandLineUtils)可以创建便捷的dotnet tool工具,官方的[docs / samples /](https://github.com/natemcmaster/CommandLineUtils/blob/master/docs/samples)中包含有很多示例;但是对于如何运行`Command`却没有明示,如果你要单元测试自己创建的命令,要到[test](https://github.com/natemcmaster/CommandLineUtils/tree/master/test/CommandLineUtils.Tests)目录下参考官方的单元测试代码,以下列出自己实践的方法.\n\n## 解决办法\n\n* 对于不使用依赖注入的`Command`,直接使用`CommandLineApplication.Execute<Show>(\"-a\");`即可,其中`Show`为`[Command(\"show\", Description = \"\")]`\n* 对于使用依赖注入的`Command`可以参考这个示例\n\n```c#\nvar commandLineApplication = new CommandLineApplication<Show>();\nvar services = new ServiceCollection()\n    .AddLogging()\n    .AddSingleton(Program.Configuration)\n    .AddSingleton(Program.Configuration.Get<APPConfig>())//添加依赖注入\n    .BuildServiceProvider();\n\ncommandLineApplication.Conventions\n    .UseDefaultConventions()\n    .UseConstructorInjection(services);\n\ncommandLineApplication.Parse();\n\nvar result = commandLineApplication.Execute(@\"--path=/CUSTDB/1901-0048.rar\", \"--taskid=1907-7777\");//执行命令\n\nresult.Should().Be(0);//using FluentAssertions\n```\n\n","source":"_posts/2020-04-6-单元测试CommandLineUtils中的命令.md","raw":"---\nlayout:     post\ntitle:      单元测试CommandLineUtils中的命令\nsubtitle:   UnitTest the command of CommandLineUtils\ndate:       2020-4-6\nauthor:     王帅\ncatalog: true\ntags:\n    - CommandLineUtils\n    - UnitTests\n    - dotnet tool\ntypora-root-url: ..\n---\n\n### 引言\n\n使用[CommandLineUtils](https://github.com/natemcmaster/CommandLineUtils)可以创建便捷的dotnet tool工具,官方的[docs / samples /](https://github.com/natemcmaster/CommandLineUtils/blob/master/docs/samples)中包含有很多示例;但是对于如何运行`Command`却没有明示,如果你要单元测试自己创建的命令,要到[test](https://github.com/natemcmaster/CommandLineUtils/tree/master/test/CommandLineUtils.Tests)目录下参考官方的单元测试代码,以下列出自己实践的方法.\n\n## 解决办法\n\n* 对于不使用依赖注入的`Command`,直接使用`CommandLineApplication.Execute<Show>(\"-a\");`即可,其中`Show`为`[Command(\"show\", Description = \"\")]`\n* 对于使用依赖注入的`Command`可以参考这个示例\n\n```c#\nvar commandLineApplication = new CommandLineApplication<Show>();\nvar services = new ServiceCollection()\n    .AddLogging()\n    .AddSingleton(Program.Configuration)\n    .AddSingleton(Program.Configuration.Get<APPConfig>())//添加依赖注入\n    .BuildServiceProvider();\n\ncommandLineApplication.Conventions\n    .UseDefaultConventions()\n    .UseConstructorInjection(services);\n\ncommandLineApplication.Parse();\n\nvar result = commandLineApplication.Execute(@\"--path=/CUSTDB/1901-0048.rar\", \"--taskid=1907-7777\");//执行命令\n\nresult.Should().Be(0);//using FluentAssertions\n```\n\n","slug":"2020-04-6-单元测试CommandLineUtils中的命令","published":1,"updated":"2020-04-06T13:16:06.789Z","_id":"cl8vdlqlf001u3oo23a6q6kge","comments":1,"photos":[],"link":"","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>使用<a href=\"https://github.com/natemcmaster/CommandLineUtils\">CommandLineUtils</a>可以创建便捷的dotnet tool工具,官方的<a href=\"https://github.com/natemcmaster/CommandLineUtils/blob/master/docs/samples\">docs / samples /</a>中包含有很多示例;但是对于如何运行<code>Command</code>却没有明示,如果你要单元测试自己创建的命令,要到<a href=\"https://github.com/natemcmaster/CommandLineUtils/tree/master/test/CommandLineUtils.Tests\">test</a>目录下参考官方的单元测试代码,以下列出自己实践的方法.</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><ul>\n<li>对于不使用依赖注入的<code>Command</code>,直接使用<code>CommandLineApplication.Execute&lt;Show&gt;(&quot;-a&quot;);</code>即可,其中<code>Show</code>为<code>[Command(&quot;show&quot;, Description = &quot;&quot;)]</code></li>\n<li>对于使用依赖注入的<code>Command</code>可以参考这个示例</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-keyword\">var</span> commandLineApplication = <span class=\"hljs-keyword\">new</span> CommandLineApplication&lt;Show&gt;();<br><span class=\"hljs-keyword\">var</span> services = <span class=\"hljs-keyword\">new</span> ServiceCollection()<br>    .AddLogging()<br>    .AddSingleton(Program.Configuration)<br>    .AddSingleton(Program.Configuration.Get&lt;APPConfig&gt;())<span class=\"hljs-comment\">//添加依赖注入</span><br>    .BuildServiceProvider();<br><br>commandLineApplication.Conventions<br>    .UseDefaultConventions()<br>    .UseConstructorInjection(services);<br><br>commandLineApplication.Parse();<br><br><span class=\"hljs-keyword\">var</span> result = commandLineApplication.Execute(<span class=\"hljs-string\">@&quot;--path=/CUSTDB/1901-0048.rar&quot;</span>, <span class=\"hljs-string\">&quot;--taskid=1907-7777&quot;</span>);<span class=\"hljs-comment\">//执行命令</span><br><br>result.Should().Be(<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//using FluentAssertions</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>使用<a href=\"https://github.com/natemcmaster/CommandLineUtils\">CommandLineUtils</a>可以创建便捷的dotnet tool工具,官方的<a href=\"https://github.com/natemcmaster/CommandLineUtils/blob/master/docs/samples\">docs / samples /</a>中包含有很多示例;但是对于如何运行<code>Command</code>却没有明示,如果你要单元测试自己创建的命令,要到<a href=\"https://github.com/natemcmaster/CommandLineUtils/tree/master/test/CommandLineUtils.Tests\">test</a>目录下参考官方的单元测试代码,以下列出自己实践的方法.</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><ul>\n<li>对于不使用依赖注入的<code>Command</code>,直接使用<code>CommandLineApplication.Execute&lt;Show&gt;(&quot;-a&quot;);</code>即可,其中<code>Show</code>为<code>[Command(&quot;show&quot;, Description = &quot;&quot;)]</code></li>\n<li>对于使用依赖注入的<code>Command</code>可以参考这个示例</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-keyword\">var</span> commandLineApplication = <span class=\"hljs-keyword\">new</span> CommandLineApplication&lt;Show&gt;();<br><span class=\"hljs-keyword\">var</span> services = <span class=\"hljs-keyword\">new</span> ServiceCollection()<br>    .AddLogging()<br>    .AddSingleton(Program.Configuration)<br>    .AddSingleton(Program.Configuration.Get&lt;APPConfig&gt;())<span class=\"hljs-comment\">//添加依赖注入</span><br>    .BuildServiceProvider();<br><br>commandLineApplication.Conventions<br>    .UseDefaultConventions()<br>    .UseConstructorInjection(services);<br><br>commandLineApplication.Parse();<br><br><span class=\"hljs-keyword\">var</span> result = commandLineApplication.Execute(<span class=\"hljs-string\">@&quot;--path=/CUSTDB/1901-0048.rar&quot;</span>, <span class=\"hljs-string\">&quot;--taskid=1907-7777&quot;</span>);<span class=\"hljs-comment\">//执行命令</span><br><br>result.Should().Be(<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//using FluentAssertions</span><br></code></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"查看mcr.microsoft.com中所有docker 镜像的Tag","subtitle":"Get list all docker image tags of mcr.microsoft.com","date":"2020-04-09T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 解决方案\n\n参考这个链接:[how-can-i-list-all-tags-for-a-docker-image-on-a-remote-registry](https://stackoverflow.com/questions/28320134/how-can-i-list-all-tags-for-a-docker-image-on-a-remote-registry)\n\n直接访问：~~[https://mcr.microsoft.com/v2/dotnet/core/runtime/tags/list](https://mcr.microsoft.com/v2/dotnet/core/runtime/tags/list)~~即可\n\n参考此issue：\n\n[.NET 5.0 repository rename announcement](https://github.com/dotnet/dotnet-docker/issues/2375).\n\n新的URL为：[https://mcr.microsoft.com/v2/dotnet/runtime/tags/list](https://mcr.microsoft.com/v2/dotnet/runtime/tags/list)\n\n其它的`sdk`、`aspnet`同理","source":"_posts/2020-04-10-查看mcr.microsoft.com中所有的Tag.md","raw":"---\nlayout:     post\ntitle:      查看mcr.microsoft.com中所有docker 镜像的Tag\nsubtitle:   Get list all docker image tags of mcr.microsoft.com\ndate:       2020-4-10\nauthor:     王帅\ncatalog: true\ntags:\n    - docker\n    - Tags\n    - images\ntypora-root-url: ..\n---\n\n### 解决方案\n\n参考这个链接:[how-can-i-list-all-tags-for-a-docker-image-on-a-remote-registry](https://stackoverflow.com/questions/28320134/how-can-i-list-all-tags-for-a-docker-image-on-a-remote-registry)\n\n直接访问：~~[https://mcr.microsoft.com/v2/dotnet/core/runtime/tags/list](https://mcr.microsoft.com/v2/dotnet/core/runtime/tags/list)~~即可\n\n参考此issue：\n\n[.NET 5.0 repository rename announcement](https://github.com/dotnet/dotnet-docker/issues/2375).\n\n新的URL为：[https://mcr.microsoft.com/v2/dotnet/runtime/tags/list](https://mcr.microsoft.com/v2/dotnet/runtime/tags/list)\n\n其它的`sdk`、`aspnet`同理","slug":"2020-04-10-查看mcr.microsoft.com中所有的Tag","published":1,"updated":"2021-05-31T05:29:02.719Z","_id":"cl8vdlqlj00213oo25nlhalm6","comments":1,"photos":[],"link":"","content":"<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>参考这个链接:<a href=\"https://stackoverflow.com/questions/28320134/how-can-i-list-all-tags-for-a-docker-image-on-a-remote-registry\">how-can-i-list-all-tags-for-a-docker-image-on-a-remote-registry</a></p>\n<p>直接访问：<del><a href=\"https://mcr.microsoft.com/v2/dotnet/core/runtime/tags/list\">https://mcr.microsoft.com/v2/dotnet/core/runtime/tags/list</a></del>即可</p>\n<p>参考此issue：</p>\n<p><a href=\"https://github.com/dotnet/dotnet-docker/issues/2375\">.NET 5.0 repository rename announcement</a>.</p>\n<p>新的URL为：<a href=\"https://mcr.microsoft.com/v2/dotnet/runtime/tags/list\">https://mcr.microsoft.com/v2/dotnet/runtime/tags/list</a></p>\n<p>其它的<code>sdk</code>、<code>aspnet</code>同理</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>参考这个链接:<a href=\"https://stackoverflow.com/questions/28320134/how-can-i-list-all-tags-for-a-docker-image-on-a-remote-registry\">how-can-i-list-all-tags-for-a-docker-image-on-a-remote-registry</a></p>\n<p>直接访问：<del><a href=\"https://mcr.microsoft.com/v2/dotnet/core/runtime/tags/list\">https://mcr.microsoft.com/v2/dotnet/core/runtime/tags/list</a></del>即可</p>\n<p>参考此issue：</p>\n<p><a href=\"https://github.com/dotnet/dotnet-docker/issues/2375\">.NET 5.0 repository rename announcement</a>.</p>\n<p>新的URL为：<a href=\"https://mcr.microsoft.com/v2/dotnet/runtime/tags/list\">https://mcr.microsoft.com/v2/dotnet/runtime/tags/list</a></p>\n<p>其它的<code>sdk</code>、<code>aspnet</code>同理</p>\n"},{"layout":"post","title":"使用PowerShell查看使用RDP登录到远程服务器的客户端IP","subtitle":"Get the login ip of RDP client","date":"2020-06-25T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\nTeamViewer是一个非常好的远程支持工具，但是我们公司资金有限，所以只在局域网里面配备了一台正版客户端；当同事需要远程支持的时候再使用局域网RDP（mstsc）连接到那台PC。这个teamviewer有一个限制，就是一台电脑只能一个用户使用，当你其它用户登录的时候再连接就会提示无法连接。基于这个原因，我需要知道是谁登录到这个用户了。\n\n### 解决方案\n\n参考[这篇文章](https://serverfault.com/questions/361565/how-can-i-get-the-ip-address-of-a-remote-desktop-client-and-how-can-i-trigger-a)我编写了一个PowerShell脚本来通知当前登录的IP\n\n```powershell\n$output= netstat -n | find --% \":3389\" | find --% \"ESTABLISHED\"\n\n##Invoke-RestMethod -Uri \"https://sc.ftqq.com/[SCKey].send?text=mstscLogin&desp=$output\"\n$Uri = 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=[workWXkey]'\n\n$json2= \"{        \"\"msgtype\"\": \"\"text\"\",        \"\"text\"\": {           \"\"content\"\": \"\"$output\"\"        }   }\"\n $json2\n$Result = Invoke-RestMethod -Uri $Uri -Method Post -Body $JSON2 -ContentType \"application/json\"\n$Result\n```\n\n通知的方式我选择的是微信，如果你常用企业微信，那你可以参考[这篇文章](https://work.weixin.qq.com/api/doc/90000/90136/91770)配置群机器人得到通知消息，如果不常用企业微信，那可以用[Server酱](http://sc.ftqq.com/3.version)，登录后把脚本中的Key替换成自己的就能收到通知了（微信不能发送空消息，所以你要在远程的电脑上执行脚本才有效果）\n\n### 常见问题\n\n* 脚本的执行方式\n\n由于我登录的用户只有一般的权限，所以我使用任务计划（Task scheduler），创建一个每次连接到用户（虽然我期望的是登录用户执行我的脚本，但其实这里触发器的触发条件应该用连接用户)就执行的计划来执行这个脚本\n\n* 连接到用户后弹出命令行执行窗口\n\n如果你选择连接到用户后执行上述的PowerShell脚本，那会弹出一个一闪而过的命令行黑窗，参考[这个文章](https://social.technet.microsoft.com/Forums/windows/en-US/24d1b052-b56d-4a34-b39b-602ca84cf4bd/task-scheduler-hidden-powershell-with-no-popup?forum=winserverpowershell)，使用以下VBS脚本执行PowerShell代码，这样就不会弹窗了\n\n```powershell\ncommand = \"powershell.exe -nologo -command C:\\Scripts\\YourScript.ps1\"\n set shell = CreateObject(\"WScript.Shell\")\n shell.Run command,0\n```\n\n\n\n","source":"_posts/2020-06-26-使用PowerShell查看使用RDP登录到远程服务器的客户端IP.md","raw":"---\nlayout:     post\ntitle:      使用PowerShell查看使用RDP登录到远程服务器的客户端IP\nsubtitle:   Get the login ip of RDP client\ndate:       2020-6-26\nauthor:     王帅\ncatalog: true\ntags:\n    - RDP\n    - mstsc\n    - ip\n    - PowerShell\ntypora-root-url: ..\n---\n\n### 引言\nTeamViewer是一个非常好的远程支持工具，但是我们公司资金有限，所以只在局域网里面配备了一台正版客户端；当同事需要远程支持的时候再使用局域网RDP（mstsc）连接到那台PC。这个teamviewer有一个限制，就是一台电脑只能一个用户使用，当你其它用户登录的时候再连接就会提示无法连接。基于这个原因，我需要知道是谁登录到这个用户了。\n\n### 解决方案\n\n参考[这篇文章](https://serverfault.com/questions/361565/how-can-i-get-the-ip-address-of-a-remote-desktop-client-and-how-can-i-trigger-a)我编写了一个PowerShell脚本来通知当前登录的IP\n\n```powershell\n$output= netstat -n | find --% \":3389\" | find --% \"ESTABLISHED\"\n\n##Invoke-RestMethod -Uri \"https://sc.ftqq.com/[SCKey].send?text=mstscLogin&desp=$output\"\n$Uri = 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=[workWXkey]'\n\n$json2= \"{        \"\"msgtype\"\": \"\"text\"\",        \"\"text\"\": {           \"\"content\"\": \"\"$output\"\"        }   }\"\n $json2\n$Result = Invoke-RestMethod -Uri $Uri -Method Post -Body $JSON2 -ContentType \"application/json\"\n$Result\n```\n\n通知的方式我选择的是微信，如果你常用企业微信，那你可以参考[这篇文章](https://work.weixin.qq.com/api/doc/90000/90136/91770)配置群机器人得到通知消息，如果不常用企业微信，那可以用[Server酱](http://sc.ftqq.com/3.version)，登录后把脚本中的Key替换成自己的就能收到通知了（微信不能发送空消息，所以你要在远程的电脑上执行脚本才有效果）\n\n### 常见问题\n\n* 脚本的执行方式\n\n由于我登录的用户只有一般的权限，所以我使用任务计划（Task scheduler），创建一个每次连接到用户（虽然我期望的是登录用户执行我的脚本，但其实这里触发器的触发条件应该用连接用户)就执行的计划来执行这个脚本\n\n* 连接到用户后弹出命令行执行窗口\n\n如果你选择连接到用户后执行上述的PowerShell脚本，那会弹出一个一闪而过的命令行黑窗，参考[这个文章](https://social.technet.microsoft.com/Forums/windows/en-US/24d1b052-b56d-4a34-b39b-602ca84cf4bd/task-scheduler-hidden-powershell-with-no-popup?forum=winserverpowershell)，使用以下VBS脚本执行PowerShell代码，这样就不会弹窗了\n\n```powershell\ncommand = \"powershell.exe -nologo -command C:\\Scripts\\YourScript.ps1\"\n set shell = CreateObject(\"WScript.Shell\")\n shell.Run command,0\n```\n\n\n\n","slug":"2020-06-26-使用PowerShell查看使用RDP登录到远程服务器的客户端IP","published":1,"updated":"2020-06-26T16:26:28.883Z","_id":"cl8vdlqm400253oo23jf2bv0t","comments":1,"photos":[],"link":"","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>TeamViewer是一个非常好的远程支持工具，但是我们公司资金有限，所以只在局域网里面配备了一台正版客户端；当同事需要远程支持的时候再使用局域网RDP（mstsc）连接到那台PC。这个teamviewer有一个限制，就是一台电脑只能一个用户使用，当你其它用户登录的时候再连接就会提示无法连接。基于这个原因，我需要知道是谁登录到这个用户了。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>参考<a href=\"https://serverfault.com/questions/361565/how-can-i-get-the-ip-address-of-a-remote-desktop-client-and-how-can-i-trigger-a\">这篇文章</a>我编写了一个PowerShell脚本来通知当前登录的IP</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$output</span>= netstat <span class=\"hljs-literal\">-n</span> | find <span class=\"hljs-literal\">--</span>% <span class=\"hljs-string\">&quot;:3389&quot;</span> | find <span class=\"hljs-literal\">--</span>% <span class=\"hljs-string\">&quot;ESTABLISHED&quot;</span><br><br><span class=\"hljs-comment\">##Invoke-RestMethod -Uri &quot;https://sc.ftqq.com/[SCKey].send?text=mstscLogin&amp;desp=$output&quot;</span><br><span class=\"hljs-variable\">$Uri</span> = <span class=\"hljs-string\">&#x27;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=[workWXkey]&#x27;</span><br><br><span class=\"hljs-variable\">$json2</span>= <span class=\"hljs-string\">&quot;&#123;        &quot;</span><span class=\"hljs-string\">&quot;msgtype&quot;</span><span class=\"hljs-string\">&quot;: &quot;</span><span class=\"hljs-string\">&quot;text&quot;</span><span class=\"hljs-string\">&quot;,        &quot;</span><span class=\"hljs-string\">&quot;text&quot;</span><span class=\"hljs-string\">&quot;: &#123;           &quot;</span><span class=\"hljs-string\">&quot;content&quot;</span><span class=\"hljs-string\">&quot;: &quot;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$output</span>&quot;</span><span class=\"hljs-string\">&quot;        &#125;   &#125;&quot;</span><br> <span class=\"hljs-variable\">$json2</span><br><span class=\"hljs-variable\">$Result</span> = <span class=\"hljs-built_in\">Invoke-RestMethod</span> <span class=\"hljs-literal\">-Uri</span> <span class=\"hljs-variable\">$Uri</span> <span class=\"hljs-literal\">-Method</span> Post <span class=\"hljs-literal\">-Body</span> <span class=\"hljs-variable\">$JSON2</span> <span class=\"hljs-literal\">-ContentType</span> <span class=\"hljs-string\">&quot;application/json&quot;</span><br><span class=\"hljs-variable\">$Result</span><br></code></pre></td></tr></table></figure>\n\n<p>通知的方式我选择的是微信，如果你常用企业微信，那你可以参考<a href=\"https://work.weixin.qq.com/api/doc/90000/90136/91770\">这篇文章</a>配置群机器人得到通知消息，如果不常用企业微信，那可以用<a href=\"http://sc.ftqq.com/3.version\">Server酱</a>，登录后把脚本中的Key替换成自己的就能收到通知了（微信不能发送空消息，所以你要在远程的电脑上执行脚本才有效果）</p>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li>脚本的执行方式</li>\n</ul>\n<p>由于我登录的用户只有一般的权限，所以我使用任务计划（Task scheduler），创建一个每次连接到用户（虽然我期望的是登录用户执行我的脚本，但其实这里触发器的触发条件应该用连接用户)就执行的计划来执行这个脚本</p>\n<ul>\n<li>连接到用户后弹出命令行执行窗口</li>\n</ul>\n<p>如果你选择连接到用户后执行上述的PowerShell脚本，那会弹出一个一闪而过的命令行黑窗，参考<a href=\"https://social.technet.microsoft.com/Forums/windows/en-US/24d1b052-b56d-4a34-b39b-602ca84cf4bd/task-scheduler-hidden-powershell-with-no-popup?forum=winserverpowershell\">这个文章</a>，使用以下VBS脚本执行PowerShell代码，这样就不会弹窗了</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">command = <span class=\"hljs-string\">&quot;powershell.exe -nologo -command C:\\Scripts\\YourScript.ps1&quot;</span><br> <span class=\"hljs-built_in\">set</span> shell = CreateObject(<span class=\"hljs-string\">&quot;WScript.Shell&quot;</span>)<br> shell.Run command,<span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>TeamViewer是一个非常好的远程支持工具，但是我们公司资金有限，所以只在局域网里面配备了一台正版客户端；当同事需要远程支持的时候再使用局域网RDP（mstsc）连接到那台PC。这个teamviewer有一个限制，就是一台电脑只能一个用户使用，当你其它用户登录的时候再连接就会提示无法连接。基于这个原因，我需要知道是谁登录到这个用户了。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>参考<a href=\"https://serverfault.com/questions/361565/how-can-i-get-the-ip-address-of-a-remote-desktop-client-and-how-can-i-trigger-a\">这篇文章</a>我编写了一个PowerShell脚本来通知当前登录的IP</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$output</span>= netstat <span class=\"hljs-literal\">-n</span> | find <span class=\"hljs-literal\">--</span>% <span class=\"hljs-string\">&quot;:3389&quot;</span> | find <span class=\"hljs-literal\">--</span>% <span class=\"hljs-string\">&quot;ESTABLISHED&quot;</span><br><br><span class=\"hljs-comment\">##Invoke-RestMethod -Uri &quot;https://sc.ftqq.com/[SCKey].send?text=mstscLogin&amp;desp=$output&quot;</span><br><span class=\"hljs-variable\">$Uri</span> = <span class=\"hljs-string\">&#x27;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=[workWXkey]&#x27;</span><br><br><span class=\"hljs-variable\">$json2</span>= <span class=\"hljs-string\">&quot;&#123;        &quot;</span><span class=\"hljs-string\">&quot;msgtype&quot;</span><span class=\"hljs-string\">&quot;: &quot;</span><span class=\"hljs-string\">&quot;text&quot;</span><span class=\"hljs-string\">&quot;,        &quot;</span><span class=\"hljs-string\">&quot;text&quot;</span><span class=\"hljs-string\">&quot;: &#123;           &quot;</span><span class=\"hljs-string\">&quot;content&quot;</span><span class=\"hljs-string\">&quot;: &quot;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$output</span>&quot;</span><span class=\"hljs-string\">&quot;        &#125;   &#125;&quot;</span><br> <span class=\"hljs-variable\">$json2</span><br><span class=\"hljs-variable\">$Result</span> = <span class=\"hljs-built_in\">Invoke-RestMethod</span> <span class=\"hljs-literal\">-Uri</span> <span class=\"hljs-variable\">$Uri</span> <span class=\"hljs-literal\">-Method</span> Post <span class=\"hljs-literal\">-Body</span> <span class=\"hljs-variable\">$JSON2</span> <span class=\"hljs-literal\">-ContentType</span> <span class=\"hljs-string\">&quot;application/json&quot;</span><br><span class=\"hljs-variable\">$Result</span><br></code></pre></td></tr></table></figure>\n\n<p>通知的方式我选择的是微信，如果你常用企业微信，那你可以参考<a href=\"https://work.weixin.qq.com/api/doc/90000/90136/91770\">这篇文章</a>配置群机器人得到通知消息，如果不常用企业微信，那可以用<a href=\"http://sc.ftqq.com/3.version\">Server酱</a>，登录后把脚本中的Key替换成自己的就能收到通知了（微信不能发送空消息，所以你要在远程的电脑上执行脚本才有效果）</p>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li>脚本的执行方式</li>\n</ul>\n<p>由于我登录的用户只有一般的权限，所以我使用任务计划（Task scheduler），创建一个每次连接到用户（虽然我期望的是登录用户执行我的脚本，但其实这里触发器的触发条件应该用连接用户)就执行的计划来执行这个脚本</p>\n<ul>\n<li>连接到用户后弹出命令行执行窗口</li>\n</ul>\n<p>如果你选择连接到用户后执行上述的PowerShell脚本，那会弹出一个一闪而过的命令行黑窗，参考<a href=\"https://social.technet.microsoft.com/Forums/windows/en-US/24d1b052-b56d-4a34-b39b-602ca84cf4bd/task-scheduler-hidden-powershell-with-no-popup?forum=winserverpowershell\">这个文章</a>，使用以下VBS脚本执行PowerShell代码，这样就不会弹窗了</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">command = <span class=\"hljs-string\">&quot;powershell.exe -nologo -command C:\\Scripts\\YourScript.ps1&quot;</span><br> <span class=\"hljs-built_in\">set</span> shell = CreateObject(<span class=\"hljs-string\">&quot;WScript.Shell&quot;</span>)<br> shell.Run command,<span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n\n\n"},{"layout":"post","title":"使用Zxing.Net 创建透明背景艺术二维码","subtitle":"Create art transparent background QR Code by Zxing.Net","date":"2020-08-04T16:00:00.000Z","author":"王帅","catalog":true,"header-img":"img/post-bg-qrcode-blogURL.jpg","typora-root-url":"..","_content":"\n### 引言\n用过微信的都知道，里面有一个个性化二维码名片的功能；\n\n![image-20200805152257211](/img/wechat_qrcode_businesscard.png)\n\n最近接到需求要做一个类似的好看一点的二维码，微信里面不支持手动添加背景图片，估计是做的模板；但是配色不是我擅长的事，要做很多模板出来让用户选是不现实的，我期望有自动合成颜色的方法，一番搜索之后找到一个商用产品[qrcode.studio](https://qrcode.studio/)，里面有一个透明背景的功能，可以实现我的要求。\n\n![image-20200805154119073](/img/qrcode_studio_link_zhidao.png)\n\n于是参照实现了一个可以融合背景图片的透明背景图功能\n\n### 解决方案\n\n在visual studio中打开从[qrcode.studio](https://qrcode.studio/)下载下来的png二维码文件，放大之后可以看到module的形状\n\n![image-20200805155633543](/img/qrcode_studio_link_zoom_moduleShape.png)\n\n因此，在黑的地方画一个点，周围再自动做颜色渐变就可以了；这里的径向渐变可以使用[RadialGradientBrush](https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.media.radialgradientbrush?view=netcore-3.1)，但是我是Winform，没有这个画刷；于是我参考[c# radial gradient brush effect in GDI and winforms](https://stackoverflow.com/questions/3519835/c-sharp-radial-gradient-brush-effect-in-gdi-and-winforms)使用了`PathGradientBrush`\n\n主要的代码在这里，完整demo在最后\n\n```c#\npublic override Bitmap Render(BitMatrix matrix, BarcodeFormat format, string content, EncodingOptions options)\n{\n    int width = matrix.Width;\n    int height = matrix.Height;\n    Foreground = Color.Black;\n    bool hasBackImage = false;\n    var qrCode = Encoder.encode(content, ErrorCorrectionLevel.L,options.Hints);\n\n    var qrCodeMatrix = qrCode.Matrix;\n    Console.WriteLine(\"-----------------------------\");\n    foreach (var point in qrCodeMatrix.Array)\n    {\n        Console.WriteLine(string.Join(string.Empty, point.Select(s =>\n        {\n            if (s == 0) return \" \";\n            return s.ToString();\n        })));\n    }\n\n    var det=new Detector(matrix);\n    var detPoints = det.detect().Points;\n\n\n    var backgroundBrush = new LinearGradientBrush(\n       new Rectangle(0, 0, width, height), BackgroundGradientColor, BackgroundGradientColor, LinearGradientMode.Vertical);\n    var foregroundBrush = new LinearGradientBrush(\n       new Rectangle(0, 0, width, height), ForegroundGradientColor, ForegroundGradientColor, LinearGradientMode.ForwardDia\n\n    var bmp = new Bitmap(width,height);\n    var gg = Graphics.FromImage(bmp);\n    if (File.Exists(BackImageFullName))\n    {\n        var backImageTemp=new Bitmap(BackImageFullName);\n        bmp= new Bitmap(backImageTemp, new Size(width, height));\n        gg=Graphics.FromImage(bmp);\n        hasBackImage = true;\n    }\n    else\n    {\n        gg.Clear(BackgroundGradientColor);\n    }\n\n   \n    Point startPoint=new Point(0,0);\n    Point endPoint=new Point(0,0);\n    bool isStartPoint = false;\n\n    //var foreColor = Color.Black;\n    //var backColor = Color.White;\n    var foreColor = ForegroundGradientColor;\n    var backColor = BackgroundGradientColor;\n\n    if (hasBackImage && IsMergeBackColor)\n    {\n        var rateX = bmp.Width / qrCodeMatrix.Width;\n        var rateY = bmp.Height / qrCodeMatrix.Height;\n        if (rateY > rateX)\n        {\n            rateY = rateX;\n        }\n        else\n        {\n            rateX = rateY;\n        }\n\n        //todo boarder效果\n        var defaultBorder = 0;\n        var largeImage = new Bitmap(bmp, qrCodeMatrix.Width * rateX+defaultBorder, qrCodeMatrix.Height * rateY+defaultBord\n        var largeG = Graphics.FromImage(largeImage);\n        for (int inputY = 0; inputY < qrCodeMatrix.Height; inputY++)\n        {\n            for (int inputX = 0; inputX < qrCodeMatrix.Width; inputX++)\n            {\n                Rectangle foreRectangle = new Rectangle(inputX * rateX+defaultBorder, inputY * rateY+defaultBorder, rateX,\n\n                //定点位使用黑白,其它位置使用PathGradientBrush根据module点的坐标画出图形\n                if (IsInDetect(qrCodeMatrix, inputX, inputY))\n                {\n                    if (qrCodeMatrix[inputX, inputY] == 1)\n                    {\n                        largeG.FillRectangle(new SolidBrush(foreColor), foreRectangle);\n                    }\n                    else\n                    {\n                        largeG.FillRectangle(new SolidBrush(backColor), foreRectangle);\n                    }\n                }\n                else\n                {\n                    using (var ellipsePath = new GraphicsPath())\n                    {\n\n                        ellipsePath.AddEllipse(foreRectangle);\n                        var brush = new PathGradientBrush(ellipsePath);\n\n                        var color = bmp.GetPixel(foreRectangle.X, foreRectangle.Y);\n\n                        brush.CenterPoint = new PointF(foreRectangle.Width / 2 + foreRectangle.X,\n                            foreRectangle.Height / 2 + foreRectangle.Y);\n                        brush.SurroundColors = new[] {color};\n                        brush.FocusScales = new PointF(0, 0);\n                        if (qrCodeMatrix[inputX, inputY] == 1)\n                        {\n\n                            brush.CenterColor = foreColor;\n                        }\n                        else\n                        {\n                            brush.CenterColor = backColor;\n                        }\n\n                        largeG.FillRectangle(brush, foreRectangle);\n                    }\n                }\n            }\n        }\n\n        return largeImage;\n    }\n\n    for (int x = 0; x < width - 1; x++)\n    {\n        for (int y = 0; y < height - 1; y++)\n        {\n            if (matrix[x, y])\n            {\n                if (!isStartPoint)\n                {\n                    isStartPoint = true;\n                    startPoint = new Point(x, y);\n                    endPoint = new Point(width - x, height - y);\n                }\n                \n                gg.FillRectangle(foregroundBrush, x, y, 1, 1);\n            }\n            else\n            {\n                if (x < endPoint.X && y < endPoint.Y && x > startPoint.X && y > startPoint.Y)\n                {\n                    if (hasBackImage)\n                        gg.FillRectangle(backgroundBrush, x, y, 1, 1);\n\n                }\n            }\n        }\n    }\n\n\n\n    if (File.Exists(IconFullName))\n    {\n        var icon = new Bitmap(IconFullName);\n        Image circleIcon;\n        if (IconShape == IconShape.Round)\n        {\n            circleIcon = CutCircle(IconFullName, 0, 0, icon.Height);\n        }\n        else\n        {\n            circleIcon = icon;\n        }\n        circleIcon = new Bitmap(circleIcon, new Size(33, 33));\n        gg.DrawImage(circleIcon,\n            new PointF((startPoint.X + endPoint.X) / 2 - circleIcon.Width / 2,\n                (startPoint.Y + endPoint.Y) / 2 - circleIcon.Height / 2));\n    }\n\n    if (hasBackImage)\n        gg.DrawRectangle(new Pen(Color.White, 5), startPoint.X - 3, startPoint.Y - 3,\n            endPoint.X - startPoint.X + 4,\n            endPoint.Y - startPoint.Y + 4);\n\n    return bmp;\n}\n\n```\n\n还是使用林克作为背景，生成的二维码如下：\n\n![testQR000007](/img/qrcode_studio_link_zhidao_custom.png)\n\n虽然看起来差了点，但是基本可以实现需求\n\n### 常见问题\n\n* 关于二维码\n\n初次接触二维码建议看一下[qrcode.com](https://www.qrcode.com/en/howto/cell.html)\n\n* 如何debug查看生成的图片\n\n中断的时候调用[bmp.Save(\"123.png“)](https://docs.microsoft.com/en-us/dotnet/api/system.drawing.image.save)方法就行了\n\n* 其它参考资料\n\n  * [https://www.codeproject.com/Articles/20018/Gradients-made-easy](https://www.codeproject.com/Articles/20018/Gradients-made-easy)\n  * [https://blog.qrstuff.com/2015/09/09/colour-qr-codes](https://blog.qrstuff.com/2015/09/09/colour-qr-codes)\n\n* 完整demo见此仓库：[https://github.com/wangshuai-007/QRCode](https://github.com/wangshuai-007/QRCode)\n\n","source":"_posts/2020-08-05-使用Zxing.Net 创建透明背景艺术二维码.md","raw":"---\nlayout:     post\ntitle:      使用Zxing.Net 创建透明背景艺术二维码\nsubtitle:   Create art transparent background QR Code by Zxing.Net\ndate:       2020-8-5\nauthor:     王帅\ncatalog: true\nheader-img: img/post-bg-qrcode-blogURL.jpg\ntags:\n    - Zxing.Net\n    - QR code\n    - Transparent background\n    - 透明背景\n    - 艺术二维码\n    - C#\ntypora-root-url: ..\n---\n\n### 引言\n用过微信的都知道，里面有一个个性化二维码名片的功能；\n\n![image-20200805152257211](/img/wechat_qrcode_businesscard.png)\n\n最近接到需求要做一个类似的好看一点的二维码，微信里面不支持手动添加背景图片，估计是做的模板；但是配色不是我擅长的事，要做很多模板出来让用户选是不现实的，我期望有自动合成颜色的方法，一番搜索之后找到一个商用产品[qrcode.studio](https://qrcode.studio/)，里面有一个透明背景的功能，可以实现我的要求。\n\n![image-20200805154119073](/img/qrcode_studio_link_zhidao.png)\n\n于是参照实现了一个可以融合背景图片的透明背景图功能\n\n### 解决方案\n\n在visual studio中打开从[qrcode.studio](https://qrcode.studio/)下载下来的png二维码文件，放大之后可以看到module的形状\n\n![image-20200805155633543](/img/qrcode_studio_link_zoom_moduleShape.png)\n\n因此，在黑的地方画一个点，周围再自动做颜色渐变就可以了；这里的径向渐变可以使用[RadialGradientBrush](https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.media.radialgradientbrush?view=netcore-3.1)，但是我是Winform，没有这个画刷；于是我参考[c# radial gradient brush effect in GDI and winforms](https://stackoverflow.com/questions/3519835/c-sharp-radial-gradient-brush-effect-in-gdi-and-winforms)使用了`PathGradientBrush`\n\n主要的代码在这里，完整demo在最后\n\n```c#\npublic override Bitmap Render(BitMatrix matrix, BarcodeFormat format, string content, EncodingOptions options)\n{\n    int width = matrix.Width;\n    int height = matrix.Height;\n    Foreground = Color.Black;\n    bool hasBackImage = false;\n    var qrCode = Encoder.encode(content, ErrorCorrectionLevel.L,options.Hints);\n\n    var qrCodeMatrix = qrCode.Matrix;\n    Console.WriteLine(\"-----------------------------\");\n    foreach (var point in qrCodeMatrix.Array)\n    {\n        Console.WriteLine(string.Join(string.Empty, point.Select(s =>\n        {\n            if (s == 0) return \" \";\n            return s.ToString();\n        })));\n    }\n\n    var det=new Detector(matrix);\n    var detPoints = det.detect().Points;\n\n\n    var backgroundBrush = new LinearGradientBrush(\n       new Rectangle(0, 0, width, height), BackgroundGradientColor, BackgroundGradientColor, LinearGradientMode.Vertical);\n    var foregroundBrush = new LinearGradientBrush(\n       new Rectangle(0, 0, width, height), ForegroundGradientColor, ForegroundGradientColor, LinearGradientMode.ForwardDia\n\n    var bmp = new Bitmap(width,height);\n    var gg = Graphics.FromImage(bmp);\n    if (File.Exists(BackImageFullName))\n    {\n        var backImageTemp=new Bitmap(BackImageFullName);\n        bmp= new Bitmap(backImageTemp, new Size(width, height));\n        gg=Graphics.FromImage(bmp);\n        hasBackImage = true;\n    }\n    else\n    {\n        gg.Clear(BackgroundGradientColor);\n    }\n\n   \n    Point startPoint=new Point(0,0);\n    Point endPoint=new Point(0,0);\n    bool isStartPoint = false;\n\n    //var foreColor = Color.Black;\n    //var backColor = Color.White;\n    var foreColor = ForegroundGradientColor;\n    var backColor = BackgroundGradientColor;\n\n    if (hasBackImage && IsMergeBackColor)\n    {\n        var rateX = bmp.Width / qrCodeMatrix.Width;\n        var rateY = bmp.Height / qrCodeMatrix.Height;\n        if (rateY > rateX)\n        {\n            rateY = rateX;\n        }\n        else\n        {\n            rateX = rateY;\n        }\n\n        //todo boarder效果\n        var defaultBorder = 0;\n        var largeImage = new Bitmap(bmp, qrCodeMatrix.Width * rateX+defaultBorder, qrCodeMatrix.Height * rateY+defaultBord\n        var largeG = Graphics.FromImage(largeImage);\n        for (int inputY = 0; inputY < qrCodeMatrix.Height; inputY++)\n        {\n            for (int inputX = 0; inputX < qrCodeMatrix.Width; inputX++)\n            {\n                Rectangle foreRectangle = new Rectangle(inputX * rateX+defaultBorder, inputY * rateY+defaultBorder, rateX,\n\n                //定点位使用黑白,其它位置使用PathGradientBrush根据module点的坐标画出图形\n                if (IsInDetect(qrCodeMatrix, inputX, inputY))\n                {\n                    if (qrCodeMatrix[inputX, inputY] == 1)\n                    {\n                        largeG.FillRectangle(new SolidBrush(foreColor), foreRectangle);\n                    }\n                    else\n                    {\n                        largeG.FillRectangle(new SolidBrush(backColor), foreRectangle);\n                    }\n                }\n                else\n                {\n                    using (var ellipsePath = new GraphicsPath())\n                    {\n\n                        ellipsePath.AddEllipse(foreRectangle);\n                        var brush = new PathGradientBrush(ellipsePath);\n\n                        var color = bmp.GetPixel(foreRectangle.X, foreRectangle.Y);\n\n                        brush.CenterPoint = new PointF(foreRectangle.Width / 2 + foreRectangle.X,\n                            foreRectangle.Height / 2 + foreRectangle.Y);\n                        brush.SurroundColors = new[] {color};\n                        brush.FocusScales = new PointF(0, 0);\n                        if (qrCodeMatrix[inputX, inputY] == 1)\n                        {\n\n                            brush.CenterColor = foreColor;\n                        }\n                        else\n                        {\n                            brush.CenterColor = backColor;\n                        }\n\n                        largeG.FillRectangle(brush, foreRectangle);\n                    }\n                }\n            }\n        }\n\n        return largeImage;\n    }\n\n    for (int x = 0; x < width - 1; x++)\n    {\n        for (int y = 0; y < height - 1; y++)\n        {\n            if (matrix[x, y])\n            {\n                if (!isStartPoint)\n                {\n                    isStartPoint = true;\n                    startPoint = new Point(x, y);\n                    endPoint = new Point(width - x, height - y);\n                }\n                \n                gg.FillRectangle(foregroundBrush, x, y, 1, 1);\n            }\n            else\n            {\n                if (x < endPoint.X && y < endPoint.Y && x > startPoint.X && y > startPoint.Y)\n                {\n                    if (hasBackImage)\n                        gg.FillRectangle(backgroundBrush, x, y, 1, 1);\n\n                }\n            }\n        }\n    }\n\n\n\n    if (File.Exists(IconFullName))\n    {\n        var icon = new Bitmap(IconFullName);\n        Image circleIcon;\n        if (IconShape == IconShape.Round)\n        {\n            circleIcon = CutCircle(IconFullName, 0, 0, icon.Height);\n        }\n        else\n        {\n            circleIcon = icon;\n        }\n        circleIcon = new Bitmap(circleIcon, new Size(33, 33));\n        gg.DrawImage(circleIcon,\n            new PointF((startPoint.X + endPoint.X) / 2 - circleIcon.Width / 2,\n                (startPoint.Y + endPoint.Y) / 2 - circleIcon.Height / 2));\n    }\n\n    if (hasBackImage)\n        gg.DrawRectangle(new Pen(Color.White, 5), startPoint.X - 3, startPoint.Y - 3,\n            endPoint.X - startPoint.X + 4,\n            endPoint.Y - startPoint.Y + 4);\n\n    return bmp;\n}\n\n```\n\n还是使用林克作为背景，生成的二维码如下：\n\n![testQR000007](/img/qrcode_studio_link_zhidao_custom.png)\n\n虽然看起来差了点，但是基本可以实现需求\n\n### 常见问题\n\n* 关于二维码\n\n初次接触二维码建议看一下[qrcode.com](https://www.qrcode.com/en/howto/cell.html)\n\n* 如何debug查看生成的图片\n\n中断的时候调用[bmp.Save(\"123.png“)](https://docs.microsoft.com/en-us/dotnet/api/system.drawing.image.save)方法就行了\n\n* 其它参考资料\n\n  * [https://www.codeproject.com/Articles/20018/Gradients-made-easy](https://www.codeproject.com/Articles/20018/Gradients-made-easy)\n  * [https://blog.qrstuff.com/2015/09/09/colour-qr-codes](https://blog.qrstuff.com/2015/09/09/colour-qr-codes)\n\n* 完整demo见此仓库：[https://github.com/wangshuai-007/QRCode](https://github.com/wangshuai-007/QRCode)\n\n","slug":"2020-08-05-使用Zxing.Net 创建透明背景艺术二维码","published":1,"updated":"2020-08-06T08:41:52.800Z","_id":"cl8vdlqm600263oo2b4jef16m","comments":1,"photos":[],"link":"","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>用过微信的都知道，里面有一个个性化二维码名片的功能；</p>\n<p><img src=\"/img/wechat_qrcode_businesscard.png\" alt=\"image-20200805152257211\"></p>\n<p>最近接到需求要做一个类似的好看一点的二维码，微信里面不支持手动添加背景图片，估计是做的模板；但是配色不是我擅长的事，要做很多模板出来让用户选是不现实的，我期望有自动合成颜色的方法，一番搜索之后找到一个商用产品<a href=\"https://qrcode.studio/\">qrcode.studio</a>，里面有一个透明背景的功能，可以实现我的要求。</p>\n<p><img src=\"/img/qrcode_studio_link_zhidao.png\" alt=\"image-20200805154119073\"></p>\n<p>于是参照实现了一个可以融合背景图片的透明背景图功能</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>在visual studio中打开从<a href=\"https://qrcode.studio/\">qrcode.studio</a>下载下来的png二维码文件，放大之后可以看到module的形状</p>\n<p><img src=\"/img/qrcode_studio_link_zoom_moduleShape.png\" alt=\"image-20200805155633543\"></p>\n<p>因此，在黑的地方画一个点，周围再自动做颜色渐变就可以了；这里的径向渐变可以使用<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.media.radialgradientbrush?view=netcore-3.1\">RadialGradientBrush</a>，但是我是Winform，没有这个画刷；于是我参考<a href=\"https://stackoverflow.com/questions/3519835/c-sharp-radial-gradient-brush-effect-in-gdi-and-winforms\">c# radial gradient brush effect in GDI and winforms</a>使用了<code>PathGradientBrush</code></p>\n<p>主要的代码在这里，完整demo在最后</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> Bitmap <span class=\"hljs-title\">Render</span>(<span class=\"hljs-params\">BitMatrix matrix, BarcodeFormat format, <span class=\"hljs-built_in\">string</span> content, EncodingOptions options</span>)</span><br>&#123;<br>    <span class=\"hljs-built_in\">int</span> width = matrix.Width;<br>    <span class=\"hljs-built_in\">int</span> height = matrix.Height;<br>    Foreground = Color.Black;<br>    <span class=\"hljs-built_in\">bool</span> hasBackImage = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">var</span> qrCode = Encoder.encode(content, ErrorCorrectionLevel.L,options.Hints);<br><br>    <span class=\"hljs-keyword\">var</span> qrCodeMatrix = qrCode.Matrix;<br>    Console.WriteLine(<span class=\"hljs-string\">&quot;-----------------------------&quot;</span>);<br>    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> point <span class=\"hljs-keyword\">in</span> qrCodeMatrix.Array)<br>    &#123;<br>        Console.WriteLine(<span class=\"hljs-built_in\">string</span>.Join(<span class=\"hljs-built_in\">string</span>.Empty, point.Select(s =&gt;<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot; &quot;</span>;<br>            <span class=\"hljs-keyword\">return</span> s.ToString();<br>        &#125;)));<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> det=<span class=\"hljs-keyword\">new</span> Detector(matrix);<br>    <span class=\"hljs-keyword\">var</span> detPoints = det.detect().Points;<br><br><br>    <span class=\"hljs-keyword\">var</span> backgroundBrush = <span class=\"hljs-keyword\">new</span> LinearGradientBrush(<br>       <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, width, height), BackgroundGradientColor, BackgroundGradientColor, LinearGradientMode.Vertical);<br>    <span class=\"hljs-keyword\">var</span> foregroundBrush = <span class=\"hljs-keyword\">new</span> LinearGradientBrush(<br>       <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, width, height), ForegroundGradientColor, ForegroundGradientColor, LinearGradientMode.ForwardDia<br><br>    <span class=\"hljs-keyword\">var</span> bmp = <span class=\"hljs-keyword\">new</span> Bitmap(width,height);<br>    <span class=\"hljs-keyword\">var</span> gg = Graphics.FromImage(bmp);<br>    <span class=\"hljs-keyword\">if</span> (File.Exists(BackImageFullName))<br>    &#123;<br>        <span class=\"hljs-keyword\">var</span> backImageTemp=<span class=\"hljs-keyword\">new</span> Bitmap(BackImageFullName);<br>        bmp= <span class=\"hljs-keyword\">new</span> Bitmap(backImageTemp, <span class=\"hljs-keyword\">new</span> Size(width, height));<br>        gg=Graphics.FromImage(bmp);<br>        hasBackImage = <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        gg.Clear(BackgroundGradientColor);<br>    &#125;<br><br>   <br>    Point startPoint=<span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);<br>    Point endPoint=<span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-built_in\">bool</span> isStartPoint = <span class=\"hljs-literal\">false</span>;<br><br>    <span class=\"hljs-comment\">//var foreColor = Color.Black;</span><br>    <span class=\"hljs-comment\">//var backColor = Color.White;</span><br>    <span class=\"hljs-keyword\">var</span> foreColor = ForegroundGradientColor;<br>    <span class=\"hljs-keyword\">var</span> backColor = BackgroundGradientColor;<br><br>    <span class=\"hljs-keyword\">if</span> (hasBackImage &amp;&amp; IsMergeBackColor)<br>    &#123;<br>        <span class=\"hljs-keyword\">var</span> rateX = bmp.Width / qrCodeMatrix.Width;<br>        <span class=\"hljs-keyword\">var</span> rateY = bmp.Height / qrCodeMatrix.Height;<br>        <span class=\"hljs-keyword\">if</span> (rateY &gt; rateX)<br>        &#123;<br>            rateY = rateX;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            rateX = rateY;<br>        &#125;<br><br>        <span class=\"hljs-comment\">//todo boarder效果</span><br>        <span class=\"hljs-keyword\">var</span> defaultBorder = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">var</span> largeImage = <span class=\"hljs-keyword\">new</span> Bitmap(bmp, qrCodeMatrix.Width * rateX+defaultBorder, qrCodeMatrix.Height * rateY+defaultBord<br>        <span class=\"hljs-keyword\">var</span> largeG = Graphics.FromImage(largeImage);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> inputY = <span class=\"hljs-number\">0</span>; inputY &lt; qrCodeMatrix.Height; inputY++)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> inputX = <span class=\"hljs-number\">0</span>; inputX &lt; qrCodeMatrix.Width; inputX++)<br>            &#123;<br>                Rectangle foreRectangle = <span class=\"hljs-keyword\">new</span> Rectangle(inputX * rateX+defaultBorder, inputY * rateY+defaultBorder, rateX,<br><br>                <span class=\"hljs-comment\">//定点位使用黑白,其它位置使用PathGradientBrush根据module点的坐标画出图形</span><br>                <span class=\"hljs-keyword\">if</span> (IsInDetect(qrCodeMatrix, inputX, inputY))<br>                &#123;<br>                    <span class=\"hljs-keyword\">if</span> (qrCodeMatrix[inputX, inputY] == <span class=\"hljs-number\">1</span>)<br>                    &#123;<br>                        largeG.FillRectangle(<span class=\"hljs-keyword\">new</span> SolidBrush(foreColor), foreRectangle);<br>                    &#125;<br>                    <span class=\"hljs-keyword\">else</span><br>                    &#123;<br>                        largeG.FillRectangle(<span class=\"hljs-keyword\">new</span> SolidBrush(backColor), foreRectangle);<br>                    &#125;<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span><br>                &#123;<br>                    <span class=\"hljs-keyword\">using</span> (<span class=\"hljs-keyword\">var</span> ellipsePath = <span class=\"hljs-keyword\">new</span> GraphicsPath())<br>                    &#123;<br><br>                        ellipsePath.AddEllipse(foreRectangle);<br>                        <span class=\"hljs-keyword\">var</span> brush = <span class=\"hljs-keyword\">new</span> PathGradientBrush(ellipsePath);<br><br>                        <span class=\"hljs-keyword\">var</span> color = bmp.GetPixel(foreRectangle.X, foreRectangle.Y);<br><br>                        brush.CenterPoint = <span class=\"hljs-keyword\">new</span> PointF(foreRectangle.Width / <span class=\"hljs-number\">2</span> + foreRectangle.X,<br>                            foreRectangle.Height / <span class=\"hljs-number\">2</span> + foreRectangle.Y);<br>                        brush.SurroundColors = <span class=\"hljs-keyword\">new</span>[] &#123;color&#125;;<br>                        brush.FocusScales = <span class=\"hljs-keyword\">new</span> PointF(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">if</span> (qrCodeMatrix[inputX, inputY] == <span class=\"hljs-number\">1</span>)<br>                        &#123;<br><br>                            brush.CenterColor = foreColor;<br>                        &#125;<br>                        <span class=\"hljs-keyword\">else</span><br>                        &#123;<br>                            brush.CenterColor = backColor;<br>                        &#125;<br><br>                        largeG.FillRectangle(brush, foreRectangle);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> largeImage;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> x = <span class=\"hljs-number\">0</span>; x &lt; width - <span class=\"hljs-number\">1</span>; x++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> y = <span class=\"hljs-number\">0</span>; y &lt; height - <span class=\"hljs-number\">1</span>; y++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (matrix[x, y])<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (!isStartPoint)<br>                &#123;<br>                    isStartPoint = <span class=\"hljs-literal\">true</span>;<br>                    startPoint = <span class=\"hljs-keyword\">new</span> Point(x, y);<br>                    endPoint = <span class=\"hljs-keyword\">new</span> Point(width - x, height - y);<br>                &#125;<br>                <br>                gg.FillRectangle(foregroundBrush, x, y, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (x &lt; endPoint.X &amp;&amp; y &lt; endPoint.Y &amp;&amp; x &gt; startPoint.X &amp;&amp; y &gt; startPoint.Y)<br>                &#123;<br>                    <span class=\"hljs-keyword\">if</span> (hasBackImage)<br>                        gg.FillRectangle(backgroundBrush, x, y, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);<br><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br>    <span class=\"hljs-keyword\">if</span> (File.Exists(IconFullName))<br>    &#123;<br>        <span class=\"hljs-keyword\">var</span> icon = <span class=\"hljs-keyword\">new</span> Bitmap(IconFullName);<br>        Image circleIcon;<br>        <span class=\"hljs-keyword\">if</span> (IconShape == IconShape.Round)<br>        &#123;<br>            circleIcon = CutCircle(IconFullName, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, icon.Height);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            circleIcon = icon;<br>        &#125;<br>        circleIcon = <span class=\"hljs-keyword\">new</span> Bitmap(circleIcon, <span class=\"hljs-keyword\">new</span> Size(<span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">33</span>));<br>        gg.DrawImage(circleIcon,<br>            <span class=\"hljs-keyword\">new</span> PointF((startPoint.X + endPoint.X) / <span class=\"hljs-number\">2</span> - circleIcon.Width / <span class=\"hljs-number\">2</span>,<br>                (startPoint.Y + endPoint.Y) / <span class=\"hljs-number\">2</span> - circleIcon.Height / <span class=\"hljs-number\">2</span>));<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (hasBackImage)<br>        gg.DrawRectangle(<span class=\"hljs-keyword\">new</span> Pen(Color.White, <span class=\"hljs-number\">5</span>), startPoint.X - <span class=\"hljs-number\">3</span>, startPoint.Y - <span class=\"hljs-number\">3</span>,<br>            endPoint.X - startPoint.X + <span class=\"hljs-number\">4</span>,<br>            endPoint.Y - startPoint.Y + <span class=\"hljs-number\">4</span>);<br><br>    <span class=\"hljs-keyword\">return</span> bmp;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>还是使用林克作为背景，生成的二维码如下：</p>\n<p><img src=\"/img/qrcode_studio_link_zhidao_custom.png\" alt=\"testQR000007\"></p>\n<p>虽然看起来差了点，但是基本可以实现需求</p>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li>关于二维码</li>\n</ul>\n<p>初次接触二维码建议看一下<a href=\"https://www.qrcode.com/en/howto/cell.html\">qrcode.com</a></p>\n<ul>\n<li>如何debug查看生成的图片</li>\n</ul>\n<p>中断的时候调用<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.drawing.image.save\">bmp.Save(“123.png“)</a>方法就行了</p>\n<ul>\n<li><p>其它参考资料</p>\n<ul>\n<li><a href=\"https://www.codeproject.com/Articles/20018/Gradients-made-easy\">https://www.codeproject.com/Articles/20018/Gradients-made-easy</a></li>\n<li><a href=\"https://blog.qrstuff.com/2015/09/09/colour-qr-codes\">https://blog.qrstuff.com/2015/09/09/colour-qr-codes</a></li>\n</ul>\n</li>\n<li><p>完整demo见此仓库：<a href=\"https://github.com/wangshuai-007/QRCode\">https://github.com/wangshuai-007/QRCode</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>用过微信的都知道，里面有一个个性化二维码名片的功能；</p>\n<p><img src=\"/img/wechat_qrcode_businesscard.png\" alt=\"image-20200805152257211\"></p>\n<p>最近接到需求要做一个类似的好看一点的二维码，微信里面不支持手动添加背景图片，估计是做的模板；但是配色不是我擅长的事，要做很多模板出来让用户选是不现实的，我期望有自动合成颜色的方法，一番搜索之后找到一个商用产品<a href=\"https://qrcode.studio/\">qrcode.studio</a>，里面有一个透明背景的功能，可以实现我的要求。</p>\n<p><img src=\"/img/qrcode_studio_link_zhidao.png\" alt=\"image-20200805154119073\"></p>\n<p>于是参照实现了一个可以融合背景图片的透明背景图功能</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>在visual studio中打开从<a href=\"https://qrcode.studio/\">qrcode.studio</a>下载下来的png二维码文件，放大之后可以看到module的形状</p>\n<p><img src=\"/img/qrcode_studio_link_zoom_moduleShape.png\" alt=\"image-20200805155633543\"></p>\n<p>因此，在黑的地方画一个点，周围再自动做颜色渐变就可以了；这里的径向渐变可以使用<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.media.radialgradientbrush?view=netcore-3.1\">RadialGradientBrush</a>，但是我是Winform，没有这个画刷；于是我参考<a href=\"https://stackoverflow.com/questions/3519835/c-sharp-radial-gradient-brush-effect-in-gdi-and-winforms\">c# radial gradient brush effect in GDI and winforms</a>使用了<code>PathGradientBrush</code></p>\n<p>主要的代码在这里，完整demo在最后</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> Bitmap <span class=\"hljs-title\">Render</span>(<span class=\"hljs-params\">BitMatrix matrix, BarcodeFormat format, <span class=\"hljs-built_in\">string</span> content, EncodingOptions options</span>)</span><br>&#123;<br>    <span class=\"hljs-built_in\">int</span> width = matrix.Width;<br>    <span class=\"hljs-built_in\">int</span> height = matrix.Height;<br>    Foreground = Color.Black;<br>    <span class=\"hljs-built_in\">bool</span> hasBackImage = <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">var</span> qrCode = Encoder.encode(content, ErrorCorrectionLevel.L,options.Hints);<br><br>    <span class=\"hljs-keyword\">var</span> qrCodeMatrix = qrCode.Matrix;<br>    Console.WriteLine(<span class=\"hljs-string\">&quot;-----------------------------&quot;</span>);<br>    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> point <span class=\"hljs-keyword\">in</span> qrCodeMatrix.Array)<br>    &#123;<br>        Console.WriteLine(<span class=\"hljs-built_in\">string</span>.Join(<span class=\"hljs-built_in\">string</span>.Empty, point.Select(s =&gt;<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot; &quot;</span>;<br>            <span class=\"hljs-keyword\">return</span> s.ToString();<br>        &#125;)));<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> det=<span class=\"hljs-keyword\">new</span> Detector(matrix);<br>    <span class=\"hljs-keyword\">var</span> detPoints = det.detect().Points;<br><br><br>    <span class=\"hljs-keyword\">var</span> backgroundBrush = <span class=\"hljs-keyword\">new</span> LinearGradientBrush(<br>       <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, width, height), BackgroundGradientColor, BackgroundGradientColor, LinearGradientMode.Vertical);<br>    <span class=\"hljs-keyword\">var</span> foregroundBrush = <span class=\"hljs-keyword\">new</span> LinearGradientBrush(<br>       <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, width, height), ForegroundGradientColor, ForegroundGradientColor, LinearGradientMode.ForwardDia<br><br>    <span class=\"hljs-keyword\">var</span> bmp = <span class=\"hljs-keyword\">new</span> Bitmap(width,height);<br>    <span class=\"hljs-keyword\">var</span> gg = Graphics.FromImage(bmp);<br>    <span class=\"hljs-keyword\">if</span> (File.Exists(BackImageFullName))<br>    &#123;<br>        <span class=\"hljs-keyword\">var</span> backImageTemp=<span class=\"hljs-keyword\">new</span> Bitmap(BackImageFullName);<br>        bmp= <span class=\"hljs-keyword\">new</span> Bitmap(backImageTemp, <span class=\"hljs-keyword\">new</span> Size(width, height));<br>        gg=Graphics.FromImage(bmp);<br>        hasBackImage = <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        gg.Clear(BackgroundGradientColor);<br>    &#125;<br><br>   <br>    Point startPoint=<span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);<br>    Point endPoint=<span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-built_in\">bool</span> isStartPoint = <span class=\"hljs-literal\">false</span>;<br><br>    <span class=\"hljs-comment\">//var foreColor = Color.Black;</span><br>    <span class=\"hljs-comment\">//var backColor = Color.White;</span><br>    <span class=\"hljs-keyword\">var</span> foreColor = ForegroundGradientColor;<br>    <span class=\"hljs-keyword\">var</span> backColor = BackgroundGradientColor;<br><br>    <span class=\"hljs-keyword\">if</span> (hasBackImage &amp;&amp; IsMergeBackColor)<br>    &#123;<br>        <span class=\"hljs-keyword\">var</span> rateX = bmp.Width / qrCodeMatrix.Width;<br>        <span class=\"hljs-keyword\">var</span> rateY = bmp.Height / qrCodeMatrix.Height;<br>        <span class=\"hljs-keyword\">if</span> (rateY &gt; rateX)<br>        &#123;<br>            rateY = rateX;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            rateX = rateY;<br>        &#125;<br><br>        <span class=\"hljs-comment\">//todo boarder效果</span><br>        <span class=\"hljs-keyword\">var</span> defaultBorder = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">var</span> largeImage = <span class=\"hljs-keyword\">new</span> Bitmap(bmp, qrCodeMatrix.Width * rateX+defaultBorder, qrCodeMatrix.Height * rateY+defaultBord<br>        <span class=\"hljs-keyword\">var</span> largeG = Graphics.FromImage(largeImage);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> inputY = <span class=\"hljs-number\">0</span>; inputY &lt; qrCodeMatrix.Height; inputY++)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> inputX = <span class=\"hljs-number\">0</span>; inputX &lt; qrCodeMatrix.Width; inputX++)<br>            &#123;<br>                Rectangle foreRectangle = <span class=\"hljs-keyword\">new</span> Rectangle(inputX * rateX+defaultBorder, inputY * rateY+defaultBorder, rateX,<br><br>                <span class=\"hljs-comment\">//定点位使用黑白,其它位置使用PathGradientBrush根据module点的坐标画出图形</span><br>                <span class=\"hljs-keyword\">if</span> (IsInDetect(qrCodeMatrix, inputX, inputY))<br>                &#123;<br>                    <span class=\"hljs-keyword\">if</span> (qrCodeMatrix[inputX, inputY] == <span class=\"hljs-number\">1</span>)<br>                    &#123;<br>                        largeG.FillRectangle(<span class=\"hljs-keyword\">new</span> SolidBrush(foreColor), foreRectangle);<br>                    &#125;<br>                    <span class=\"hljs-keyword\">else</span><br>                    &#123;<br>                        largeG.FillRectangle(<span class=\"hljs-keyword\">new</span> SolidBrush(backColor), foreRectangle);<br>                    &#125;<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span><br>                &#123;<br>                    <span class=\"hljs-keyword\">using</span> (<span class=\"hljs-keyword\">var</span> ellipsePath = <span class=\"hljs-keyword\">new</span> GraphicsPath())<br>                    &#123;<br><br>                        ellipsePath.AddEllipse(foreRectangle);<br>                        <span class=\"hljs-keyword\">var</span> brush = <span class=\"hljs-keyword\">new</span> PathGradientBrush(ellipsePath);<br><br>                        <span class=\"hljs-keyword\">var</span> color = bmp.GetPixel(foreRectangle.X, foreRectangle.Y);<br><br>                        brush.CenterPoint = <span class=\"hljs-keyword\">new</span> PointF(foreRectangle.Width / <span class=\"hljs-number\">2</span> + foreRectangle.X,<br>                            foreRectangle.Height / <span class=\"hljs-number\">2</span> + foreRectangle.Y);<br>                        brush.SurroundColors = <span class=\"hljs-keyword\">new</span>[] &#123;color&#125;;<br>                        brush.FocusScales = <span class=\"hljs-keyword\">new</span> PointF(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>                        <span class=\"hljs-keyword\">if</span> (qrCodeMatrix[inputX, inputY] == <span class=\"hljs-number\">1</span>)<br>                        &#123;<br><br>                            brush.CenterColor = foreColor;<br>                        &#125;<br>                        <span class=\"hljs-keyword\">else</span><br>                        &#123;<br>                            brush.CenterColor = backColor;<br>                        &#125;<br><br>                        largeG.FillRectangle(brush, foreRectangle);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> largeImage;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> x = <span class=\"hljs-number\">0</span>; x &lt; width - <span class=\"hljs-number\">1</span>; x++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> y = <span class=\"hljs-number\">0</span>; y &lt; height - <span class=\"hljs-number\">1</span>; y++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (matrix[x, y])<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (!isStartPoint)<br>                &#123;<br>                    isStartPoint = <span class=\"hljs-literal\">true</span>;<br>                    startPoint = <span class=\"hljs-keyword\">new</span> Point(x, y);<br>                    endPoint = <span class=\"hljs-keyword\">new</span> Point(width - x, height - y);<br>                &#125;<br>                <br>                gg.FillRectangle(foregroundBrush, x, y, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (x &lt; endPoint.X &amp;&amp; y &lt; endPoint.Y &amp;&amp; x &gt; startPoint.X &amp;&amp; y &gt; startPoint.Y)<br>                &#123;<br>                    <span class=\"hljs-keyword\">if</span> (hasBackImage)<br>                        gg.FillRectangle(backgroundBrush, x, y, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);<br><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br>    <span class=\"hljs-keyword\">if</span> (File.Exists(IconFullName))<br>    &#123;<br>        <span class=\"hljs-keyword\">var</span> icon = <span class=\"hljs-keyword\">new</span> Bitmap(IconFullName);<br>        Image circleIcon;<br>        <span class=\"hljs-keyword\">if</span> (IconShape == IconShape.Round)<br>        &#123;<br>            circleIcon = CutCircle(IconFullName, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, icon.Height);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            circleIcon = icon;<br>        &#125;<br>        circleIcon = <span class=\"hljs-keyword\">new</span> Bitmap(circleIcon, <span class=\"hljs-keyword\">new</span> Size(<span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">33</span>));<br>        gg.DrawImage(circleIcon,<br>            <span class=\"hljs-keyword\">new</span> PointF((startPoint.X + endPoint.X) / <span class=\"hljs-number\">2</span> - circleIcon.Width / <span class=\"hljs-number\">2</span>,<br>                (startPoint.Y + endPoint.Y) / <span class=\"hljs-number\">2</span> - circleIcon.Height / <span class=\"hljs-number\">2</span>));<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (hasBackImage)<br>        gg.DrawRectangle(<span class=\"hljs-keyword\">new</span> Pen(Color.White, <span class=\"hljs-number\">5</span>), startPoint.X - <span class=\"hljs-number\">3</span>, startPoint.Y - <span class=\"hljs-number\">3</span>,<br>            endPoint.X - startPoint.X + <span class=\"hljs-number\">4</span>,<br>            endPoint.Y - startPoint.Y + <span class=\"hljs-number\">4</span>);<br><br>    <span class=\"hljs-keyword\">return</span> bmp;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>还是使用林克作为背景，生成的二维码如下：</p>\n<p><img src=\"/img/qrcode_studio_link_zhidao_custom.png\" alt=\"testQR000007\"></p>\n<p>虽然看起来差了点，但是基本可以实现需求</p>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li>关于二维码</li>\n</ul>\n<p>初次接触二维码建议看一下<a href=\"https://www.qrcode.com/en/howto/cell.html\">qrcode.com</a></p>\n<ul>\n<li>如何debug查看生成的图片</li>\n</ul>\n<p>中断的时候调用<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.drawing.image.save\">bmp.Save(“123.png“)</a>方法就行了</p>\n<ul>\n<li><p>其它参考资料</p>\n<ul>\n<li><a href=\"https://www.codeproject.com/Articles/20018/Gradients-made-easy\">https://www.codeproject.com/Articles/20018/Gradients-made-easy</a></li>\n<li><a href=\"https://blog.qrstuff.com/2015/09/09/colour-qr-codes\">https://blog.qrstuff.com/2015/09/09/colour-qr-codes</a></li>\n</ul>\n</li>\n<li><p>完整demo见此仓库：<a href=\"https://github.com/wangshuai-007/QRCode\">https://github.com/wangshuai-007/QRCode</a></p>\n</li>\n</ul>\n"},{"layout":"post","title":"通过路由器监控家中是否停电","subtitle":"使用腾讯云函数和梅林路由器监控家中是否停电","date":"2020-09-04T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\n由于不常在家，而最近家中的漏电保护器又有点问题；因为跳闸，冰箱中的东西损失惨重；因此开发这样一个小工具监控家中的电路通断状态。\n\n### 解决方案\n\n要在断电后得知家中的情况是不可能的，因为此时路由器无法工作；但是可以采用变通方案：在通电时定时记录通电状态，并定期检查这个状态；一旦一段时间未收到通电日志，即时发送消息告警。\n\n因此，整体的方案就有了；创建一个记录路由器在线状态的服务`LogPower`和定时检查日志判断通电状态的服务`CheckPowerAndSendMsg`；在路由器中使用定时任务调用`LogPower`服务定时记录状态\n\n通知的方式我选择的是微信，如果你常用企业微信，那你可以参考[这篇文章](https://work.weixin.qq.com/api/doc/90000/90136/91770)配置群机器人得到通知消息，如果不常用企业微信，那可以用[Server酱](http://sc.ftqq.com/3.version)，登录后把脚本中的Key替换成自己的就能收到通知了\n\n#### 在腾讯云开发（CloudBase）中创建云函数和云数据库并添加云接入\n\n在[腾讯云开发](https://console.cloud.tencent.com/tcb)中创建[云函数](https://console.cloud.tencent.com/tcb/scf)`LogPower`，选择`Nodejs 10.15`的运行环境，其中，函数代码如下：\n\n```js\n'use strict';\nconst tcb = require('@cloudbase/node-sdk')\n\nconst app = tcb.init({\n    env: '[]'//环境Id\n})\nexports.main = (event, context, callback) => {\n    //console.log(\"Hello World\")\n    console.log(event)\n    //console.log(event[\"non-exist\"])\n    console.log(context)\n    // 1. 获取数据库引用\n    var db = app.database()\n\n    db.collection('PowerLog')\n        .add({\n            // _id: 'todo-identifiant-aleatoire', // 可选自定义 _id，在此处场景下用数据库自动分配的就可以了            \n            LogTime: new Date() ,\n            DeviceName:\"\"          \n        })\n        .then(res => {\n            console.log(\"保存成功\")\n            console.log(res)\n        })\n        return {\n            Msg:\"LogSuccess!\"\n        }\n    //callback(null, event);\n};\n\n```\n\n添加一个`package.json`文件，并输入以下内容：\n\n```json\n{\n  \"name\": \"app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {},\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@cloudbase/node-sdk\": \"latest\"\n  }\n}\n```\n\n点击`保存并安装依赖`\n\n![](/img/blog_qcloud_cloudBase_CreateHttp.png)\n\n### 常见问题\n\n* 脚本的执行方式\n\n由于我登录的用户只有一般的权限，所以我使用任务计划（Task scheduler），创建一个每次连接到用户（虽然我期望的是登录用户执行我的脚本，但其实这里触发器的触发条件应该用连接用户)就执行的计划来执行这个脚本\n\n* 连接到用户后弹出命令行执行窗口\n\n如果你选择连接到用户后执行上述的PowerShell脚本，那会弹出一个一闪而过的命令行黑窗，参考[这个文章](https://social.technet.microsoft.com/Forums/windows/en-US/24d1b052-b56d-4a34-b39b-602ca84cf4bd/task-scheduler-hidden-powershell-with-no-popup?forum=winserverpowershell)，使用以下VBS脚本执行PowerShell代码，这样就不会弹窗了\n\n```powershell\ncommand = \"powershell.exe -nologo -command C:\\Scripts\\YourScript.ps1\"\n set shell = CreateObject(\"WScript.Shell\")\n shell.Run command,0\n```\n\n\n\n","source":"_posts/2020-09-05-通过路由器监控家中是否停电.md","raw":"---\nlayout:     post\ntitle:      通过路由器监控家中是否停电\nsubtitle:   使用腾讯云函数和梅林路由器监控家中是否停电\ndate:       2020-9-05\nauthor:     王帅\ncatalog: true\ntags:\n    - merlin\n    - CloudBase\n    - \n    - PowerShell\ntypora-root-url: ..\n---\n\n### 引言\n由于不常在家，而最近家中的漏电保护器又有点问题；因为跳闸，冰箱中的东西损失惨重；因此开发这样一个小工具监控家中的电路通断状态。\n\n### 解决方案\n\n要在断电后得知家中的情况是不可能的，因为此时路由器无法工作；但是可以采用变通方案：在通电时定时记录通电状态，并定期检查这个状态；一旦一段时间未收到通电日志，即时发送消息告警。\n\n因此，整体的方案就有了；创建一个记录路由器在线状态的服务`LogPower`和定时检查日志判断通电状态的服务`CheckPowerAndSendMsg`；在路由器中使用定时任务调用`LogPower`服务定时记录状态\n\n通知的方式我选择的是微信，如果你常用企业微信，那你可以参考[这篇文章](https://work.weixin.qq.com/api/doc/90000/90136/91770)配置群机器人得到通知消息，如果不常用企业微信，那可以用[Server酱](http://sc.ftqq.com/3.version)，登录后把脚本中的Key替换成自己的就能收到通知了\n\n#### 在腾讯云开发（CloudBase）中创建云函数和云数据库并添加云接入\n\n在[腾讯云开发](https://console.cloud.tencent.com/tcb)中创建[云函数](https://console.cloud.tencent.com/tcb/scf)`LogPower`，选择`Nodejs 10.15`的运行环境，其中，函数代码如下：\n\n```js\n'use strict';\nconst tcb = require('@cloudbase/node-sdk')\n\nconst app = tcb.init({\n    env: '[]'//环境Id\n})\nexports.main = (event, context, callback) => {\n    //console.log(\"Hello World\")\n    console.log(event)\n    //console.log(event[\"non-exist\"])\n    console.log(context)\n    // 1. 获取数据库引用\n    var db = app.database()\n\n    db.collection('PowerLog')\n        .add({\n            // _id: 'todo-identifiant-aleatoire', // 可选自定义 _id，在此处场景下用数据库自动分配的就可以了            \n            LogTime: new Date() ,\n            DeviceName:\"\"          \n        })\n        .then(res => {\n            console.log(\"保存成功\")\n            console.log(res)\n        })\n        return {\n            Msg:\"LogSuccess!\"\n        }\n    //callback(null, event);\n};\n\n```\n\n添加一个`package.json`文件，并输入以下内容：\n\n```json\n{\n  \"name\": \"app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {},\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@cloudbase/node-sdk\": \"latest\"\n  }\n}\n```\n\n点击`保存并安装依赖`\n\n![](/img/blog_qcloud_cloudBase_CreateHttp.png)\n\n### 常见问题\n\n* 脚本的执行方式\n\n由于我登录的用户只有一般的权限，所以我使用任务计划（Task scheduler），创建一个每次连接到用户（虽然我期望的是登录用户执行我的脚本，但其实这里触发器的触发条件应该用连接用户)就执行的计划来执行这个脚本\n\n* 连接到用户后弹出命令行执行窗口\n\n如果你选择连接到用户后执行上述的PowerShell脚本，那会弹出一个一闪而过的命令行黑窗，参考[这个文章](https://social.technet.microsoft.com/Forums/windows/en-US/24d1b052-b56d-4a34-b39b-602ca84cf4bd/task-scheduler-hidden-powershell-with-no-popup?forum=winserverpowershell)，使用以下VBS脚本执行PowerShell代码，这样就不会弹窗了\n\n```powershell\ncommand = \"powershell.exe -nologo -command C:\\Scripts\\YourScript.ps1\"\n set shell = CreateObject(\"WScript.Shell\")\n shell.Run command,0\n```\n\n\n\n","slug":"2020-09-05-通过路由器监控家中是否停电","published":1,"updated":"2020-09-23T03:02:35.512Z","_id":"cl8vdlqnd002r3oo28v3f9hqd","comments":1,"photos":[],"link":"","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>由于不常在家，而最近家中的漏电保护器又有点问题；因为跳闸，冰箱中的东西损失惨重；因此开发这样一个小工具监控家中的电路通断状态。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>要在断电后得知家中的情况是不可能的，因为此时路由器无法工作；但是可以采用变通方案：在通电时定时记录通电状态，并定期检查这个状态；一旦一段时间未收到通电日志，即时发送消息告警。</p>\n<p>因此，整体的方案就有了；创建一个记录路由器在线状态的服务<code>LogPower</code>和定时检查日志判断通电状态的服务<code>CheckPowerAndSendMsg</code>；在路由器中使用定时任务调用<code>LogPower</code>服务定时记录状态</p>\n<p>通知的方式我选择的是微信，如果你常用企业微信，那你可以参考<a href=\"https://work.weixin.qq.com/api/doc/90000/90136/91770\">这篇文章</a>配置群机器人得到通知消息，如果不常用企业微信，那可以用<a href=\"http://sc.ftqq.com/3.version\">Server酱</a>，登录后把脚本中的Key替换成自己的就能收到通知了</p>\n<h4 id=\"在腾讯云开发（CloudBase）中创建云函数和云数据库并添加云接入\"><a href=\"#在腾讯云开发（CloudBase）中创建云函数和云数据库并添加云接入\" class=\"headerlink\" title=\"在腾讯云开发（CloudBase）中创建云函数和云数据库并添加云接入\"></a>在腾讯云开发（CloudBase）中创建云函数和云数据库并添加云接入</h4><p>在<a href=\"https://console.cloud.tencent.com/tcb\">腾讯云开发</a>中创建<a href=\"https://console.cloud.tencent.com/tcb/scf\">云函数</a><code>LogPower</code>，选择<code>Nodejs 10.15</code>的运行环境，其中，函数代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-meta\">&#x27;use strict&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> tcb = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;@cloudbase/node-sdk&#x27;</span>)<br><br><span class=\"hljs-keyword\">const</span> app = tcb.<span class=\"hljs-title function_\">init</span>(&#123;<br>    <span class=\"hljs-attr\">env</span>: <span class=\"hljs-string\">&#x27;[]&#x27;</span><span class=\"hljs-comment\">//环境Id</span><br>&#125;)<br><span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">main</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">event, context, callback</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">//console.log(&quot;Hello World&quot;)</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(event)<br>    <span class=\"hljs-comment\">//console.log(event[&quot;non-exist&quot;])</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(context)<br>    <span class=\"hljs-comment\">// 1. 获取数据库引用</span><br>    <span class=\"hljs-keyword\">var</span> db = app.<span class=\"hljs-title function_\">database</span>()<br><br>    db.<span class=\"hljs-title function_\">collection</span>(<span class=\"hljs-string\">&#x27;PowerLog&#x27;</span>)<br>        .<span class=\"hljs-title function_\">add</span>(&#123;<br>            <span class=\"hljs-comment\">// _id: &#x27;todo-identifiant-aleatoire&#x27;, // 可选自定义 _id，在此处场景下用数据库自动分配的就可以了            </span><br>            <span class=\"hljs-title class_\">LogTime</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>() ,<br>            <span class=\"hljs-title class_\">DeviceName</span>:<span class=\"hljs-string\">&quot;&quot;</span>          <br>        &#125;)<br>        .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;保存成功&quot;</span>)<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res)<br>        &#125;)<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>            <span class=\"hljs-title class_\">Msg</span>:<span class=\"hljs-string\">&quot;LogSuccess!&quot;</span><br>        &#125;<br>    <span class=\"hljs-comment\">//callback(null, event);</span><br>&#125;;<br><br></code></pre></td></tr></table></figure>\n\n<p>添加一个<code>package.json</code>文件，并输入以下内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;app&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;1.0.0&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;description&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;main&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;index.js&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;author&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;license&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ISC&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;dependencies&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;@cloudbase/node-sdk&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;latest&quot;</span><br>  <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>点击<code>保存并安装依赖</code></p>\n<p><img src=\"/img/blog_qcloud_cloudBase_CreateHttp.png\"></p>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li>脚本的执行方式</li>\n</ul>\n<p>由于我登录的用户只有一般的权限，所以我使用任务计划（Task scheduler），创建一个每次连接到用户（虽然我期望的是登录用户执行我的脚本，但其实这里触发器的触发条件应该用连接用户)就执行的计划来执行这个脚本</p>\n<ul>\n<li>连接到用户后弹出命令行执行窗口</li>\n</ul>\n<p>如果你选择连接到用户后执行上述的PowerShell脚本，那会弹出一个一闪而过的命令行黑窗，参考<a href=\"https://social.technet.microsoft.com/Forums/windows/en-US/24d1b052-b56d-4a34-b39b-602ca84cf4bd/task-scheduler-hidden-powershell-with-no-popup?forum=winserverpowershell\">这个文章</a>，使用以下VBS脚本执行PowerShell代码，这样就不会弹窗了</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">command = <span class=\"hljs-string\">&quot;powershell.exe -nologo -command C:\\Scripts\\YourScript.ps1&quot;</span><br> <span class=\"hljs-built_in\">set</span> shell = CreateObject(<span class=\"hljs-string\">&quot;WScript.Shell&quot;</span>)<br> shell.Run command,<span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>由于不常在家，而最近家中的漏电保护器又有点问题；因为跳闸，冰箱中的东西损失惨重；因此开发这样一个小工具监控家中的电路通断状态。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>要在断电后得知家中的情况是不可能的，因为此时路由器无法工作；但是可以采用变通方案：在通电时定时记录通电状态，并定期检查这个状态；一旦一段时间未收到通电日志，即时发送消息告警。</p>\n<p>因此，整体的方案就有了；创建一个记录路由器在线状态的服务<code>LogPower</code>和定时检查日志判断通电状态的服务<code>CheckPowerAndSendMsg</code>；在路由器中使用定时任务调用<code>LogPower</code>服务定时记录状态</p>\n<p>通知的方式我选择的是微信，如果你常用企业微信，那你可以参考<a href=\"https://work.weixin.qq.com/api/doc/90000/90136/91770\">这篇文章</a>配置群机器人得到通知消息，如果不常用企业微信，那可以用<a href=\"http://sc.ftqq.com/3.version\">Server酱</a>，登录后把脚本中的Key替换成自己的就能收到通知了</p>\n<h4 id=\"在腾讯云开发（CloudBase）中创建云函数和云数据库并添加云接入\"><a href=\"#在腾讯云开发（CloudBase）中创建云函数和云数据库并添加云接入\" class=\"headerlink\" title=\"在腾讯云开发（CloudBase）中创建云函数和云数据库并添加云接入\"></a>在腾讯云开发（CloudBase）中创建云函数和云数据库并添加云接入</h4><p>在<a href=\"https://console.cloud.tencent.com/tcb\">腾讯云开发</a>中创建<a href=\"https://console.cloud.tencent.com/tcb/scf\">云函数</a><code>LogPower</code>，选择<code>Nodejs 10.15</code>的运行环境，其中，函数代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-meta\">&#x27;use strict&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> tcb = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;@cloudbase/node-sdk&#x27;</span>)<br><br><span class=\"hljs-keyword\">const</span> app = tcb.<span class=\"hljs-title function_\">init</span>(&#123;<br>    <span class=\"hljs-attr\">env</span>: <span class=\"hljs-string\">&#x27;[]&#x27;</span><span class=\"hljs-comment\">//环境Id</span><br>&#125;)<br><span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">main</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">event, context, callback</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">//console.log(&quot;Hello World&quot;)</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(event)<br>    <span class=\"hljs-comment\">//console.log(event[&quot;non-exist&quot;])</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(context)<br>    <span class=\"hljs-comment\">// 1. 获取数据库引用</span><br>    <span class=\"hljs-keyword\">var</span> db = app.<span class=\"hljs-title function_\">database</span>()<br><br>    db.<span class=\"hljs-title function_\">collection</span>(<span class=\"hljs-string\">&#x27;PowerLog&#x27;</span>)<br>        .<span class=\"hljs-title function_\">add</span>(&#123;<br>            <span class=\"hljs-comment\">// _id: &#x27;todo-identifiant-aleatoire&#x27;, // 可选自定义 _id，在此处场景下用数据库自动分配的就可以了            </span><br>            <span class=\"hljs-title class_\">LogTime</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>() ,<br>            <span class=\"hljs-title class_\">DeviceName</span>:<span class=\"hljs-string\">&quot;&quot;</span>          <br>        &#125;)<br>        .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;保存成功&quot;</span>)<br>            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res)<br>        &#125;)<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>            <span class=\"hljs-title class_\">Msg</span>:<span class=\"hljs-string\">&quot;LogSuccess!&quot;</span><br>        &#125;<br>    <span class=\"hljs-comment\">//callback(null, event);</span><br>&#125;;<br><br></code></pre></td></tr></table></figure>\n\n<p>添加一个<code>package.json</code>文件，并输入以下内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;app&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;1.0.0&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;description&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;main&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;index.js&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;author&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;license&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ISC&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;dependencies&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;@cloudbase/node-sdk&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;latest&quot;</span><br>  <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>点击<code>保存并安装依赖</code></p>\n<p><img src=\"/img/blog_qcloud_cloudBase_CreateHttp.png\"></p>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><ul>\n<li>脚本的执行方式</li>\n</ul>\n<p>由于我登录的用户只有一般的权限，所以我使用任务计划（Task scheduler），创建一个每次连接到用户（虽然我期望的是登录用户执行我的脚本，但其实这里触发器的触发条件应该用连接用户)就执行的计划来执行这个脚本</p>\n<ul>\n<li>连接到用户后弹出命令行执行窗口</li>\n</ul>\n<p>如果你选择连接到用户后执行上述的PowerShell脚本，那会弹出一个一闪而过的命令行黑窗，参考<a href=\"https://social.technet.microsoft.com/Forums/windows/en-US/24d1b052-b56d-4a34-b39b-602ca84cf4bd/task-scheduler-hidden-powershell-with-no-popup?forum=winserverpowershell\">这个文章</a>，使用以下VBS脚本执行PowerShell代码，这样就不会弹窗了</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">command = <span class=\"hljs-string\">&quot;powershell.exe -nologo -command C:\\Scripts\\YourScript.ps1&quot;</span><br> <span class=\"hljs-built_in\">set</span> shell = CreateObject(<span class=\"hljs-string\">&quot;WScript.Shell&quot;</span>)<br> shell.Run command,<span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n\n\n"},{"layout":"post","title":"fastreport每页显示固定行数","subtitle":"多余行移动到下一页","date":"2021-03-17T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\n最近遇到客户提的一个需求，他要一页只显示20行明细数据；一番Google之后找到了官方博客介绍相关解决办法:[How to display an estimated number of records on a report page](https://www.fast-report.com/en/blog/148/show/)于是我写了下面的代码\n\n```c#\nint counter = 0;\n \n private void Data1_BeforePrint(object sender, EventArgs e)\n {\n     if (counter >= 20)\n     {\n         Engine.StartNewPage();//打印到新的页面\n         counter = 0;\n     }\n     counter++;\n }\n```\n\n但是我预览出来，一页却只有18行；而且从设计器打印和直接打印预览的结果还不一样；\n\n一番思考之后，我认为此处是`Report.DoublePass`设置导致的，在[Report settings](https://www.fast-report.com/documentation/UserMan/index.html?report_options.htm)的官方教程中有说明；为解决这个问题，才有了这篇文章\n\n### 解决方案\n\n由于`BeforePrint`事件的问题，我查看官方文档，找到一个`Report.Engine.RowNo`属性，于是我这样写\n\n```c#\nif (Report.Engine.RowNo%20==0)\n    Engine.StartNewPage();\n```\n\n测试发现还是不行，每页数量依旧不对\n\n多次预览调整后找到正确的条件判断：\n\n```c#\nif (Report.Engine.RowNo>20&& Report.Engine.RowNo%20==1)\n    Engine.StartNewPage();\n```\n\n### 参考资料\n\n* [How to display an estimated number of records on a report page](https://www.fast-report.com/en/blog/148/show/)\n\n* [FastReport.Documentation](https://fastreports.github.io/FastReport.Documentation/ClassReference/api/FastReport.Engine.ReportEngine.html)","source":"_posts/2021-03-18-fastreport每页显示固定行数.md","raw":"---\nlayout:     post\ntitle:      fastreport每页显示固定行数\nsubtitle:   多余行移动到下一页\ndate:       2021-3-18\nauthor:     王帅\ncatalog: true\ntags:\n    - fastreport\n    - winfrom\ntypora-root-url: ..\n---\n\n### 引言\n最近遇到客户提的一个需求，他要一页只显示20行明细数据；一番Google之后找到了官方博客介绍相关解决办法:[How to display an estimated number of records on a report page](https://www.fast-report.com/en/blog/148/show/)于是我写了下面的代码\n\n```c#\nint counter = 0;\n \n private void Data1_BeforePrint(object sender, EventArgs e)\n {\n     if (counter >= 20)\n     {\n         Engine.StartNewPage();//打印到新的页面\n         counter = 0;\n     }\n     counter++;\n }\n```\n\n但是我预览出来，一页却只有18行；而且从设计器打印和直接打印预览的结果还不一样；\n\n一番思考之后，我认为此处是`Report.DoublePass`设置导致的，在[Report settings](https://www.fast-report.com/documentation/UserMan/index.html?report_options.htm)的官方教程中有说明；为解决这个问题，才有了这篇文章\n\n### 解决方案\n\n由于`BeforePrint`事件的问题，我查看官方文档，找到一个`Report.Engine.RowNo`属性，于是我这样写\n\n```c#\nif (Report.Engine.RowNo%20==0)\n    Engine.StartNewPage();\n```\n\n测试发现还是不行，每页数量依旧不对\n\n多次预览调整后找到正确的条件判断：\n\n```c#\nif (Report.Engine.RowNo>20&& Report.Engine.RowNo%20==1)\n    Engine.StartNewPage();\n```\n\n### 参考资料\n\n* [How to display an estimated number of records on a report page](https://www.fast-report.com/en/blog/148/show/)\n\n* [FastReport.Documentation](https://fastreports.github.io/FastReport.Documentation/ClassReference/api/FastReport.Engine.ReportEngine.html)","slug":"2021-03-18-fastreport每页显示固定行数","published":1,"updated":"2021-03-29T02:58:03.097Z","_id":"cl8vdlqng002x3oo2a4bmdpb7","comments":1,"photos":[],"link":"","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>最近遇到客户提的一个需求，他要一页只显示20行明细数据；一番Google之后找到了官方博客介绍相关解决办法:<a href=\"https://www.fast-report.com/en/blog/148/show/\">How to display an estimated number of records on a report page</a>于是我写了下面的代码</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span> counter = <span class=\"hljs-number\">0</span>;<br> <br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Data1_BeforePrint</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, EventArgs e</span>)</span><br> &#123;<br>     <span class=\"hljs-keyword\">if</span> (counter &gt;= <span class=\"hljs-number\">20</span>)<br>     &#123;<br>         Engine.StartNewPage();<span class=\"hljs-comment\">//打印到新的页面</span><br>         counter = <span class=\"hljs-number\">0</span>;<br>     &#125;<br>     counter++;<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>但是我预览出来，一页却只有18行；而且从设计器打印和直接打印预览的结果还不一样；</p>\n<p>一番思考之后，我认为此处是<code>Report.DoublePass</code>设置导致的，在<a href=\"https://www.fast-report.com/documentation/UserMan/index.html?report_options.htm\">Report settings</a>的官方教程中有说明；为解决这个问题，才有了这篇文章</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>由于<code>BeforePrint</code>事件的问题，我查看官方文档，找到一个<code>Report.Engine.RowNo</code>属性，于是我这样写</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-keyword\">if</span> (Report.Engine.RowNo%<span class=\"hljs-number\">20</span>==<span class=\"hljs-number\">0</span>)<br>    Engine.StartNewPage();<br></code></pre></td></tr></table></figure>\n\n<p>测试发现还是不行，每页数量依旧不对</p>\n<p>多次预览调整后找到正确的条件判断：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-keyword\">if</span> (Report.Engine.RowNo&gt;<span class=\"hljs-number\">20</span>&amp;&amp; Report.Engine.RowNo%<span class=\"hljs-number\">20</span>==<span class=\"hljs-number\">1</span>)<br>    Engine.StartNewPage();<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><p><a href=\"https://www.fast-report.com/en/blog/148/show/\">How to display an estimated number of records on a report page</a></p>\n</li>\n<li><p><a href=\"https://fastreports.github.io/FastReport.Documentation/ClassReference/api/FastReport.Engine.ReportEngine.html\">FastReport.Documentation</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>最近遇到客户提的一个需求，他要一页只显示20行明细数据；一番Google之后找到了官方博客介绍相关解决办法:<a href=\"https://www.fast-report.com/en/blog/148/show/\">How to display an estimated number of records on a report page</a>于是我写了下面的代码</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span> counter = <span class=\"hljs-number\">0</span>;<br> <br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Data1_BeforePrint</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, EventArgs e</span>)</span><br> &#123;<br>     <span class=\"hljs-keyword\">if</span> (counter &gt;= <span class=\"hljs-number\">20</span>)<br>     &#123;<br>         Engine.StartNewPage();<span class=\"hljs-comment\">//打印到新的页面</span><br>         counter = <span class=\"hljs-number\">0</span>;<br>     &#125;<br>     counter++;<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>但是我预览出来，一页却只有18行；而且从设计器打印和直接打印预览的结果还不一样；</p>\n<p>一番思考之后，我认为此处是<code>Report.DoublePass</code>设置导致的，在<a href=\"https://www.fast-report.com/documentation/UserMan/index.html?report_options.htm\">Report settings</a>的官方教程中有说明；为解决这个问题，才有了这篇文章</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>由于<code>BeforePrint</code>事件的问题，我查看官方文档，找到一个<code>Report.Engine.RowNo</code>属性，于是我这样写</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-keyword\">if</span> (Report.Engine.RowNo%<span class=\"hljs-number\">20</span>==<span class=\"hljs-number\">0</span>)<br>    Engine.StartNewPage();<br></code></pre></td></tr></table></figure>\n\n<p>测试发现还是不行，每页数量依旧不对</p>\n<p>多次预览调整后找到正确的条件判断：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-keyword\">if</span> (Report.Engine.RowNo&gt;<span class=\"hljs-number\">20</span>&amp;&amp; Report.Engine.RowNo%<span class=\"hljs-number\">20</span>==<span class=\"hljs-number\">1</span>)<br>    Engine.StartNewPage();<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><p><a href=\"https://www.fast-report.com/en/blog/148/show/\">How to display an estimated number of records on a report page</a></p>\n</li>\n<li><p><a href=\"https://fastreports.github.io/FastReport.Documentation/ClassReference/api/FastReport.Engine.ReportEngine.html\">FastReport.Documentation</a></p>\n</li>\n</ul>\n"},{"layout":"post","title":"devexpress使用模板打印报表","subtitle":"使用XtraReports从repx模板文件打印报表","date":"2021-05-26T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\n\n\n\n\n### 参考资料\n\n* https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts\n* https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner\n\n* 设计器demo地址：\n\n","source":"_posts/2021-05-27-devexpress使用模板打印报表.md","raw":"---\nlayout:     post\ntitle:      devexpress使用模板打印报表\nsubtitle:   使用XtraReports从repx模板文件打印报表\ndate:       2021-5-27\nauthor:     王帅\ncatalog: true\ntags:\n    - devexpress\n    - winfrom\n    - report\n    - XtraReport\ntypora-root-url: ..\n---\n\n### 引言\n\n\n\n\n### 参考资料\n\n* https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts\n* https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner\n\n* 设计器demo地址：\n\n","slug":"2021-05-27-devexpress使用模板打印报表","published":1,"updated":"2021-05-31T07:37:54.286Z","_id":"cl8vdlqo900303oo29rf8fjp8","comments":1,"photos":[],"link":"","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><p><a href=\"https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts\">https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts</a></p>\n</li>\n<li><p><a href=\"https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner\">https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner</a></p>\n</li>\n<li><p>设计器demo地址：</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><p><a href=\"https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts\">https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts</a></p>\n</li>\n<li><p><a href=\"https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner\">https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner</a></p>\n</li>\n<li><p>设计器demo地址：</p>\n</li>\n</ul>\n"},{"layout":"post","title":"devexpress使用设计器编辑报表模板","subtitle":"ReportDesigner.exe的自实现","date":"2021-04-15T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\nfastreport由于是单独的报表解决方案，因此原生支持报表模板修改，如果遇到改字体颜色这种小的需求，客户可以自己打开设计器编辑报表搞定；而devexpress的报表如果是在visual studio里面创建的话默认为带设计器的cs文件，如果要让客户可以直接修改报表模板，需要额外做一些操作。\n\n以下示例所用devexpress的版本为18.1\n\n### 解决方案\n\n##### 1.准备repx模板文件\n\n首先需要准备报表模板文件，devexpress的模板文件类型为repx，可以从设计器里面新建或者另存为也可以在visual studio中把cs设计文件导出\n\n![image-20210416094435696](/img/devexpress_saveCSToRepx.png)\n\nrepx文件其实是一个xml，它保存了界面布局\n\n##### 2.准备报表编辑器\n\nfastreport在安装程序之后会自动有一个Report Designer.exe的报表编辑器，但是devexpress（版本18.1）却没有这样的设计器，所以还需要新建一个项目来编辑模板（如果你用的旧版如12.1，在安装的DemoCenter目录`\"C:\\Users\\Public\\Documents\\DXperience 12.1 Demos\\XtraReports\\Bin\\ReportDesigner.exe\"`会有一个自带的设计器，也可以用这个exe来编辑报表）\n\n设计器启动代码如下，完整demo见文末\n\n```c#\nprivate string repxPath = \"\";\nprivate void Form1_Load(object sender, EventArgs e)\n{\n    this.Hide();\n\n    var rpt = new XtraReport();\n    if (File.Exists(repxPath))\n        rpt.LoadLayout(repxPath);\n    ReportDesignTool designTool = new ReportDesignTool(rpt);\n\n    // Access the standard or ribbon-based Designer form and its MDI Controller.\n    // IDesignForm designForm = designTool.DesignForm;\n    XRDesignRibbonForm designForm = designTool.DesignRibbonForm as XRDesignRibbonForm;\n    if (designForm != null)\n    {\n        designForm.OpenReport(rpt);\n        if (File.Exists(repxPath))\n        {\n            var fileInfo = new FileInfo(repxPath);\n            designForm.RibbonControl.AutoSaveLayoutToXmlPath = repxPath;\n            designForm.Text = fileInfo.Name;\n        } \n\n        designForm.ShowDialog();\n    }\n\n    this.Close();\n}\n```\n\n##### 3.界面效果\n\n编译好后打开生成的exe文件，打开之前导出的repx文件，这样就有了报表编辑功能，界面如图所示：\n\n![report](/img/devexpress_DevReportDesigner_v18.1.4.0.png)\n\n此设计器已发布，下载地址：[DevReportDesigner_v18.1.4.0](https://github.com/wangshuai-007/BlogsSample/releases/tag/DevReportDesigner_v18.1.4.0)\n\n对于repx文件，`右键`→`打开方式`→`在这台电脑上查找其它应用`→`选择DevReportDesigner.exe`\n\n\n\n如果要直接使用repx文件打印出报表，请参考官方文章：\n\n[Loads the report definition from the specified REPX file.](https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XtraReport.FromFile(System.String-System.Boolean))\n\n数据绑定方法可查看官方问答：\n\n[Binding Datatable to XRTable in XtraReport](https://supportcenter.devexpress.com/ticket/details/t369657/binding-datatable-to-xrtable-in-xtrareport)\n\n### 参考资料\n\n* [https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts](https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts)\n* [https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner](https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner)\n* 设计器demo地址：[https://github.com/wangshuai-007/BlogsSample/tree/master/DevReportDesigner](https://github.com/wangshuai-007/BlogsSample/tree/master/DevReportDesigner)\n* 设计器下载地址：[DevReportDesigner_v18.1.4.0](https://github.com/wangshuai-007/BlogsSample/releases/tag/DevReportDesigner_v18.1.4.0)\n\n","source":"_posts/2021-04-16-devexpress使用设计器编辑报表模板.md","raw":"---\nlayout:     post\ntitle:      devexpress使用设计器编辑报表模板\nsubtitle:   ReportDesigner.exe的自实现\ndate:       2021-4-16\nauthor:     王帅\ncatalog: true\ntags:\n    - devexpress\n    - winfrom\n    - report\n    - XtraReport\ntypora-root-url: ..\n---\n\n### 引言\nfastreport由于是单独的报表解决方案，因此原生支持报表模板修改，如果遇到改字体颜色这种小的需求，客户可以自己打开设计器编辑报表搞定；而devexpress的报表如果是在visual studio里面创建的话默认为带设计器的cs文件，如果要让客户可以直接修改报表模板，需要额外做一些操作。\n\n以下示例所用devexpress的版本为18.1\n\n### 解决方案\n\n##### 1.准备repx模板文件\n\n首先需要准备报表模板文件，devexpress的模板文件类型为repx，可以从设计器里面新建或者另存为也可以在visual studio中把cs设计文件导出\n\n![image-20210416094435696](/img/devexpress_saveCSToRepx.png)\n\nrepx文件其实是一个xml，它保存了界面布局\n\n##### 2.准备报表编辑器\n\nfastreport在安装程序之后会自动有一个Report Designer.exe的报表编辑器，但是devexpress（版本18.1）却没有这样的设计器，所以还需要新建一个项目来编辑模板（如果你用的旧版如12.1，在安装的DemoCenter目录`\"C:\\Users\\Public\\Documents\\DXperience 12.1 Demos\\XtraReports\\Bin\\ReportDesigner.exe\"`会有一个自带的设计器，也可以用这个exe来编辑报表）\n\n设计器启动代码如下，完整demo见文末\n\n```c#\nprivate string repxPath = \"\";\nprivate void Form1_Load(object sender, EventArgs e)\n{\n    this.Hide();\n\n    var rpt = new XtraReport();\n    if (File.Exists(repxPath))\n        rpt.LoadLayout(repxPath);\n    ReportDesignTool designTool = new ReportDesignTool(rpt);\n\n    // Access the standard or ribbon-based Designer form and its MDI Controller.\n    // IDesignForm designForm = designTool.DesignForm;\n    XRDesignRibbonForm designForm = designTool.DesignRibbonForm as XRDesignRibbonForm;\n    if (designForm != null)\n    {\n        designForm.OpenReport(rpt);\n        if (File.Exists(repxPath))\n        {\n            var fileInfo = new FileInfo(repxPath);\n            designForm.RibbonControl.AutoSaveLayoutToXmlPath = repxPath;\n            designForm.Text = fileInfo.Name;\n        } \n\n        designForm.ShowDialog();\n    }\n\n    this.Close();\n}\n```\n\n##### 3.界面效果\n\n编译好后打开生成的exe文件，打开之前导出的repx文件，这样就有了报表编辑功能，界面如图所示：\n\n![report](/img/devexpress_DevReportDesigner_v18.1.4.0.png)\n\n此设计器已发布，下载地址：[DevReportDesigner_v18.1.4.0](https://github.com/wangshuai-007/BlogsSample/releases/tag/DevReportDesigner_v18.1.4.0)\n\n对于repx文件，`右键`→`打开方式`→`在这台电脑上查找其它应用`→`选择DevReportDesigner.exe`\n\n\n\n如果要直接使用repx文件打印出报表，请参考官方文章：\n\n[Loads the report definition from the specified REPX file.](https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XtraReport.FromFile(System.String-System.Boolean))\n\n数据绑定方法可查看官方问答：\n\n[Binding Datatable to XRTable in XtraReport](https://supportcenter.devexpress.com/ticket/details/t369657/binding-datatable-to-xrtable-in-xtrareport)\n\n### 参考资料\n\n* [https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts](https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts)\n* [https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner](https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner)\n* 设计器demo地址：[https://github.com/wangshuai-007/BlogsSample/tree/master/DevReportDesigner](https://github.com/wangshuai-007/BlogsSample/tree/master/DevReportDesigner)\n* 设计器下载地址：[DevReportDesigner_v18.1.4.0](https://github.com/wangshuai-007/BlogsSample/releases/tag/DevReportDesigner_v18.1.4.0)\n\n","slug":"2021-04-16-devexpress使用设计器编辑报表模板","published":1,"updated":"2021-10-12T08:42:01.068Z","_id":"cl8vdlqoa00313oo2h67ah62q","comments":1,"photos":[],"link":"","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>fastreport由于是单独的报表解决方案，因此原生支持报表模板修改，如果遇到改字体颜色这种小的需求，客户可以自己打开设计器编辑报表搞定；而devexpress的报表如果是在visual studio里面创建的话默认为带设计器的cs文件，如果要让客户可以直接修改报表模板，需要额外做一些操作。</p>\n<p>以下示例所用devexpress的版本为18.1</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h5 id=\"1-准备repx模板文件\"><a href=\"#1-准备repx模板文件\" class=\"headerlink\" title=\"1.准备repx模板文件\"></a>1.准备repx模板文件</h5><p>首先需要准备报表模板文件，devexpress的模板文件类型为repx，可以从设计器里面新建或者另存为也可以在visual studio中把cs设计文件导出</p>\n<p><img src=\"/img/devexpress_saveCSToRepx.png\" alt=\"image-20210416094435696\"></p>\n<p>repx文件其实是一个xml，它保存了界面布局</p>\n<h5 id=\"2-准备报表编辑器\"><a href=\"#2-准备报表编辑器\" class=\"headerlink\" title=\"2.准备报表编辑器\"></a>2.准备报表编辑器</h5><p>fastreport在安装程序之后会自动有一个Report Designer.exe的报表编辑器，但是devexpress（版本18.1）却没有这样的设计器，所以还需要新建一个项目来编辑模板（如果你用的旧版如12.1，在安装的DemoCenter目录<code>&quot;C:\\Users\\Public\\Documents\\DXperience 12.1 Demos\\XtraReports\\Bin\\ReportDesigner.exe&quot;</code>会有一个自带的设计器，也可以用这个exe来编辑报表）</p>\n<p>设计器启动代码如下，完整demo见文末</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span> repxPath = <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Form1_Load</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">this</span>.Hide();<br><br>    <span class=\"hljs-keyword\">var</span> rpt = <span class=\"hljs-keyword\">new</span> XtraReport();<br>    <span class=\"hljs-keyword\">if</span> (File.Exists(repxPath))<br>        rpt.LoadLayout(repxPath);<br>    ReportDesignTool designTool = <span class=\"hljs-keyword\">new</span> ReportDesignTool(rpt);<br><br>    <span class=\"hljs-comment\">// Access the standard or ribbon-based Designer form and its MDI Controller.</span><br>    <span class=\"hljs-comment\">// IDesignForm designForm = designTool.DesignForm;</span><br>    XRDesignRibbonForm designForm = designTool.DesignRibbonForm <span class=\"hljs-keyword\">as</span> XRDesignRibbonForm;<br>    <span class=\"hljs-keyword\">if</span> (designForm != <span class=\"hljs-literal\">null</span>)<br>    &#123;<br>        designForm.OpenReport(rpt);<br>        <span class=\"hljs-keyword\">if</span> (File.Exists(repxPath))<br>        &#123;<br>            <span class=\"hljs-keyword\">var</span> fileInfo = <span class=\"hljs-keyword\">new</span> FileInfo(repxPath);<br>            designForm.RibbonControl.AutoSaveLayoutToXmlPath = repxPath;<br>            designForm.Text = fileInfo.Name;<br>        &#125; <br><br>        designForm.ShowDialog();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">this</span>.Close();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"3-界面效果\"><a href=\"#3-界面效果\" class=\"headerlink\" title=\"3.界面效果\"></a>3.界面效果</h5><p>编译好后打开生成的exe文件，打开之前导出的repx文件，这样就有了报表编辑功能，界面如图所示：</p>\n<p><img src=\"/img/devexpress_DevReportDesigner_v18.1.4.0.png\" alt=\"report\"></p>\n<p>此设计器已发布，下载地址：<a href=\"https://github.com/wangshuai-007/BlogsSample/releases/tag/DevReportDesigner_v18.1.4.0\">DevReportDesigner_v18.1.4.0</a></p>\n<p>对于repx文件，<code>右键</code>→<code>打开方式</code>→<code>在这台电脑上查找其它应用</code>→<code>选择DevReportDesigner.exe</code></p>\n<p>如果要直接使用repx文件打印出报表，请参考官方文章：</p>\n<p><a href=\"https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XtraReport.FromFile(System.String-System.Boolean)\">Loads the report definition from the specified REPX file.</a></p>\n<p>数据绑定方法可查看官方问答：</p>\n<p><a href=\"https://supportcenter.devexpress.com/ticket/details/t369657/binding-datatable-to-xrtable-in-xtrareport\">Binding Datatable to XRTable in XtraReport</a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts\">https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts</a></li>\n<li><a href=\"https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner\">https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner</a></li>\n<li>设计器demo地址：<a href=\"https://github.com/wangshuai-007/BlogsSample/tree/master/DevReportDesigner\">https://github.com/wangshuai-007/BlogsSample/tree/master/DevReportDesigner</a></li>\n<li>设计器下载地址：<a href=\"https://github.com/wangshuai-007/BlogsSample/releases/tag/DevReportDesigner_v18.1.4.0\">DevReportDesigner_v18.1.4.0</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>fastreport由于是单独的报表解决方案，因此原生支持报表模板修改，如果遇到改字体颜色这种小的需求，客户可以自己打开设计器编辑报表搞定；而devexpress的报表如果是在visual studio里面创建的话默认为带设计器的cs文件，如果要让客户可以直接修改报表模板，需要额外做一些操作。</p>\n<p>以下示例所用devexpress的版本为18.1</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h5 id=\"1-准备repx模板文件\"><a href=\"#1-准备repx模板文件\" class=\"headerlink\" title=\"1.准备repx模板文件\"></a>1.准备repx模板文件</h5><p>首先需要准备报表模板文件，devexpress的模板文件类型为repx，可以从设计器里面新建或者另存为也可以在visual studio中把cs设计文件导出</p>\n<p><img src=\"/img/devexpress_saveCSToRepx.png\" alt=\"image-20210416094435696\"></p>\n<p>repx文件其实是一个xml，它保存了界面布局</p>\n<h5 id=\"2-准备报表编辑器\"><a href=\"#2-准备报表编辑器\" class=\"headerlink\" title=\"2.准备报表编辑器\"></a>2.准备报表编辑器</h5><p>fastreport在安装程序之后会自动有一个Report Designer.exe的报表编辑器，但是devexpress（版本18.1）却没有这样的设计器，所以还需要新建一个项目来编辑模板（如果你用的旧版如12.1，在安装的DemoCenter目录<code>&quot;C:\\Users\\Public\\Documents\\DXperience 12.1 Demos\\XtraReports\\Bin\\ReportDesigner.exe&quot;</code>会有一个自带的设计器，也可以用这个exe来编辑报表）</p>\n<p>设计器启动代码如下，完整demo见文末</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span> repxPath = <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Form1_Load</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">this</span>.Hide();<br><br>    <span class=\"hljs-keyword\">var</span> rpt = <span class=\"hljs-keyword\">new</span> XtraReport();<br>    <span class=\"hljs-keyword\">if</span> (File.Exists(repxPath))<br>        rpt.LoadLayout(repxPath);<br>    ReportDesignTool designTool = <span class=\"hljs-keyword\">new</span> ReportDesignTool(rpt);<br><br>    <span class=\"hljs-comment\">// Access the standard or ribbon-based Designer form and its MDI Controller.</span><br>    <span class=\"hljs-comment\">// IDesignForm designForm = designTool.DesignForm;</span><br>    XRDesignRibbonForm designForm = designTool.DesignRibbonForm <span class=\"hljs-keyword\">as</span> XRDesignRibbonForm;<br>    <span class=\"hljs-keyword\">if</span> (designForm != <span class=\"hljs-literal\">null</span>)<br>    &#123;<br>        designForm.OpenReport(rpt);<br>        <span class=\"hljs-keyword\">if</span> (File.Exists(repxPath))<br>        &#123;<br>            <span class=\"hljs-keyword\">var</span> fileInfo = <span class=\"hljs-keyword\">new</span> FileInfo(repxPath);<br>            designForm.RibbonControl.AutoSaveLayoutToXmlPath = repxPath;<br>            designForm.Text = fileInfo.Name;<br>        &#125; <br><br>        designForm.ShowDialog();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">this</span>.Close();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"3-界面效果\"><a href=\"#3-界面效果\" class=\"headerlink\" title=\"3.界面效果\"></a>3.界面效果</h5><p>编译好后打开生成的exe文件，打开之前导出的repx文件，这样就有了报表编辑功能，界面如图所示：</p>\n<p><img src=\"/img/devexpress_DevReportDesigner_v18.1.4.0.png\" alt=\"report\"></p>\n<p>此设计器已发布，下载地址：<a href=\"https://github.com/wangshuai-007/BlogsSample/releases/tag/DevReportDesigner_v18.1.4.0\">DevReportDesigner_v18.1.4.0</a></p>\n<p>对于repx文件，<code>右键</code>→<code>打开方式</code>→<code>在这台电脑上查找其它应用</code>→<code>选择DevReportDesigner.exe</code></p>\n<p>如果要直接使用repx文件打印出报表，请参考官方文章：</p>\n<p><a href=\"https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.XtraReport.FromFile(System.String-System.Boolean)\">Loads the report definition from the specified REPX file.</a></p>\n<p>数据绑定方法可查看官方问答：</p>\n<p><a href=\"https://supportcenter.devexpress.com/ticket/details/t369657/binding-datatable-to-xrtable-in-xtrareport\">Binding Datatable to XRTable in XtraReport</a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts\">https://docs.devexpress.com/XtraReports/2666/detailed-guide-to-devexpress-reporting/store-and-distribute-reports/store-report-layouts-and-documents/load-report-layouts</a></li>\n<li><a href=\"https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner\">https://docs.devexpress.com/XtraReports/DevExpress.XtraReports.UI.ReportDesignTool.ShowRibbonDesigner</a></li>\n<li>设计器demo地址：<a href=\"https://github.com/wangshuai-007/BlogsSample/tree/master/DevReportDesigner\">https://github.com/wangshuai-007/BlogsSample/tree/master/DevReportDesigner</a></li>\n<li>设计器下载地址：<a href=\"https://github.com/wangshuai-007/BlogsSample/releases/tag/DevReportDesigner_v18.1.4.0\">DevReportDesigner_v18.1.4.0</a></li>\n</ul>\n"},{"layout":"post","title":"devexpress如何使用PropertyGridControl编辑字典(Dictionary)","subtitle":"add/remove dictionary item in devexpress PropertyGridControl","date":"2021-09-23T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\n\n[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)默认使用[`PropertyGrid`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid)的集合编辑器，对于一个Dictionary对象是不能添加和删除的\n\n如下图所示：\n\n![image-20210924163519947](/img/dev_PropertyGridControl_defaultDictionaryEditor.png)\n\n要想实现添加/删除功能，需要继承[`UITypeEditor`](https://docs.microsoft.com/en-us/dotnet/api/system.drawing.design.uitypeeditor?view=netframework-4.7.2&f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(System.Drawing.Design.UITypeEditor);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)%26rd%3Dtrue)实现一个自定义编辑器\n\n### 解决方案\n\nGoogle之后发现已经有人实现了这一功能：[GenericDictUiTypeEditor](https://github.com/TechSmith/GenericDictUiTypeEditor)\n\n由于[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)继承自[`PropertyGrid`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid)，因此[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)的大部分需求可参照[`PropertyGrid`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid)实现\n\n参考[Github](https://github.com/TechSmith/GenericDictUiTypeEditor)为项目添加[Nuget](https://www.nuget.org/packages/GenDictEdit/)引用然后使用`EditorAttribute(typeof(GenericDictionaryEditor<string,string>), typeof(System.Drawing.Design.UITypeEditor))`即有增删功能\n\n![image-20210924165415825](/img/dev_PropertyGridControl_GenericDictUiTypeEditor.png)\n\n\n\n### 参考资料\n\n* [Using a Dictionary in a propertygrid](https://stackoverflow.com/a/13107534/7960551)\n* [https://github.com/TechSmith/GenericDictUiTypeEditor](https://github.com/TechSmith/GenericDictUiTypeEditor)\n\n","source":"_posts/2021-09-24-devexpress如何使用PropertyGridControl编辑字典(Dictionary).md","raw":"---\nlayout:     post\ntitle:      devexpress如何使用PropertyGridControl编辑字典(Dictionary)\nsubtitle:   add/remove dictionary item in devexpress PropertyGridControl\ndate:       2021-9-24\nauthor:     王帅\ncatalog: true\ntags:\n    - devexpress\n    - winfrom\n    - propertyGridControl\n    - propertyGrid\ntypora-root-url: ..\n---\n\n### 引言\n\n[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)默认使用[`PropertyGrid`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid)的集合编辑器，对于一个Dictionary对象是不能添加和删除的\n\n如下图所示：\n\n![image-20210924163519947](/img/dev_PropertyGridControl_defaultDictionaryEditor.png)\n\n要想实现添加/删除功能，需要继承[`UITypeEditor`](https://docs.microsoft.com/en-us/dotnet/api/system.drawing.design.uitypeeditor?view=netframework-4.7.2&f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(System.Drawing.Design.UITypeEditor);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)%26rd%3Dtrue)实现一个自定义编辑器\n\n### 解决方案\n\nGoogle之后发现已经有人实现了这一功能：[GenericDictUiTypeEditor](https://github.com/TechSmith/GenericDictUiTypeEditor)\n\n由于[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)继承自[`PropertyGrid`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid)，因此[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)的大部分需求可参照[`PropertyGrid`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid)实现\n\n参考[Github](https://github.com/TechSmith/GenericDictUiTypeEditor)为项目添加[Nuget](https://www.nuget.org/packages/GenDictEdit/)引用然后使用`EditorAttribute(typeof(GenericDictionaryEditor<string,string>), typeof(System.Drawing.Design.UITypeEditor))`即有增删功能\n\n![image-20210924165415825](/img/dev_PropertyGridControl_GenericDictUiTypeEditor.png)\n\n\n\n### 参考资料\n\n* [Using a Dictionary in a propertygrid](https://stackoverflow.com/a/13107534/7960551)\n* [https://github.com/TechSmith/GenericDictUiTypeEditor](https://github.com/TechSmith/GenericDictUiTypeEditor)\n\n","slug":"2021-09-24-devexpress如何使用PropertyGridControl编辑字典(Dictionary)","published":1,"updated":"2021-09-26T09:15:30.940Z","_id":"cl8vdlqpa003g3oo2aufugu0s","comments":1,"photos":[],"link":"","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p><a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>默认使用<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid\"><code>PropertyGrid</code></a>的集合编辑器，对于一个Dictionary对象是不能添加和删除的</p>\n<p>如下图所示：</p>\n<p><img src=\"/img/dev_PropertyGridControl_defaultDictionaryEditor.png\" alt=\"image-20210924163519947\"></p>\n<p>要想实现添加/删除功能，需要继承<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.drawing.design.uitypeeditor?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=EN-US&k=k(System.Drawing.Design.UITypeEditor);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true\"><code>UITypeEditor</code></a>实现一个自定义编辑器</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>Google之后发现已经有人实现了这一功能：<a href=\"https://github.com/TechSmith/GenericDictUiTypeEditor\">GenericDictUiTypeEditor</a></p>\n<p>由于<a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>继承自<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid\"><code>PropertyGrid</code></a>，因此<a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>的大部分需求可参照<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid\"><code>PropertyGrid</code></a>实现</p>\n<p>参考<a href=\"https://github.com/TechSmith/GenericDictUiTypeEditor\">Github</a>为项目添加<a href=\"https://www.nuget.org/packages/GenDictEdit/\">Nuget</a>引用然后使用<code>EditorAttribute(typeof(GenericDictionaryEditor&lt;string,string&gt;), typeof(System.Drawing.Design.UITypeEditor))</code>即有增删功能</p>\n<p><img src=\"/img/dev_PropertyGridControl_GenericDictUiTypeEditor.png\" alt=\"image-20210924165415825\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://stackoverflow.com/a/13107534/7960551\">Using a Dictionary in a propertygrid</a></li>\n<li><a href=\"https://github.com/TechSmith/GenericDictUiTypeEditor\">https://github.com/TechSmith/GenericDictUiTypeEditor</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p><a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>默认使用<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid\"><code>PropertyGrid</code></a>的集合编辑器，对于一个Dictionary对象是不能添加和删除的</p>\n<p>如下图所示：</p>\n<p><img src=\"/img/dev_PropertyGridControl_defaultDictionaryEditor.png\" alt=\"image-20210924163519947\"></p>\n<p>要想实现添加/删除功能，需要继承<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.drawing.design.uitypeeditor?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=EN-US&k=k(System.Drawing.Design.UITypeEditor);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true\"><code>UITypeEditor</code></a>实现一个自定义编辑器</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>Google之后发现已经有人实现了这一功能：<a href=\"https://github.com/TechSmith/GenericDictUiTypeEditor\">GenericDictUiTypeEditor</a></p>\n<p>由于<a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>继承自<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid\"><code>PropertyGrid</code></a>，因此<a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>的大部分需求可参照<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid\"><code>PropertyGrid</code></a>实现</p>\n<p>参考<a href=\"https://github.com/TechSmith/GenericDictUiTypeEditor\">Github</a>为项目添加<a href=\"https://www.nuget.org/packages/GenDictEdit/\">Nuget</a>引用然后使用<code>EditorAttribute(typeof(GenericDictionaryEditor&lt;string,string&gt;), typeof(System.Drawing.Design.UITypeEditor))</code>即有增删功能</p>\n<p><img src=\"/img/dev_PropertyGridControl_GenericDictUiTypeEditor.png\" alt=\"image-20210924165415825\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://stackoverflow.com/a/13107534/7960551\">Using a Dictionary in a propertygrid</a></li>\n<li><a href=\"https://github.com/TechSmith/GenericDictUiTypeEditor\">https://github.com/TechSmith/GenericDictUiTypeEditor</a></li>\n</ul>\n"},{"layout":"post","title":"devexpress如何在PropertyGridControl中直接编辑集合成员","subtitle":"在 devexpress PropertyGridControl中展开(expand)集合(collection)成员(item)","date":"2021-09-25T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\n\n[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)默认使用[`PropertyGrid`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid)的集合编辑器，如果你要编辑集合中的项，必须点击按钮打开集合编辑器\n\n如下图所示：\n\n![default collection editor](/img/dev_PropertyGridControl_defaultCollectionExpand.png)\n\n从图中不难发现，List是可以直接编辑`Capacity`属性的，那可以直接把`Course`对象变成List的成员脱离集合编辑器来编辑吗？\n\n### 解决方案\n\n答案当然是可以的，通过观察可以发现，[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)可展开编辑的就是Object，所以只需把集合中的成员映射为List中的Object即可，[`PropertyGrid`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid)已经有相应的解决方案了。\n\n使用中间类型`CourseCollection`然后实现[`ICustomTypeDescriptor`](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.icustomtypedescriptor?view=netframework-4.7.2&f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(System.ComponentModel.ICustomTypeDescriptor);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)%26rd%3Dtrue)接口和[PropertyDescriptor](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.propertydescriptor?view=netframework-4.7.2&f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(System.ComponentModel.PropertyDescriptor);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)%26rd%3Dtrue)即可完成此需求，完整代码在文末\n\n![expand collection as property](/img/dev_PropertyGridControl_customCollectionExpand.png)\n\n假如你想要自定义类型名称可继承[`ExpandableObjectConverter`](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.expandableobjectconverter?view=netframework-4.7.2&f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(System.ComponentModel.ExpandableObjectConverter);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)%26rd%3Dtrue)\n\n![custom property name](/img/dev_PropertyGridControl_customExpandableObjectConverter.png)\n\n### 参考资料\n\n* [Customized Display of Collection Data in a PropertyGrid](https://www.codeproject.com/Articles/4448/Customized-Display-of-Collection-Data-in-a-Propert#_articleTop)\n\n* 示例项目源码：[DevPropertyGridControlExpandCollection](https://github.com/wangshuai-007/BlogsSample/tree/master/DevPropertyGridControlExpandCollection)\n","source":"_posts/2021-09-26-devexpress如何在PropertyGridControl中直接编辑集合成员 .md","raw":"---\nlayout:     post\ntitle:      devexpress如何在PropertyGridControl中直接编辑集合成员\nsubtitle:   在 devexpress PropertyGridControl中展开(expand)集合(collection)成员(item)\ndate:       2021-9-26\nauthor:     王帅\ncatalog: true\ntags:\n    - devexpress\n    - winfrom\n    - propertyGridControl\n    - propertyGrid\ntypora-root-url: ..\n---\n\n### 引言\n\n[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)默认使用[`PropertyGrid`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid)的集合编辑器，如果你要编辑集合中的项，必须点击按钮打开集合编辑器\n\n如下图所示：\n\n![default collection editor](/img/dev_PropertyGridControl_defaultCollectionExpand.png)\n\n从图中不难发现，List是可以直接编辑`Capacity`属性的，那可以直接把`Course`对象变成List的成员脱离集合编辑器来编辑吗？\n\n### 解决方案\n\n答案当然是可以的，通过观察可以发现，[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)可展开编辑的就是Object，所以只需把集合中的成员映射为List中的Object即可，[`PropertyGrid`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid)已经有相应的解决方案了。\n\n使用中间类型`CourseCollection`然后实现[`ICustomTypeDescriptor`](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.icustomtypedescriptor?view=netframework-4.7.2&f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(System.ComponentModel.ICustomTypeDescriptor);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)%26rd%3Dtrue)接口和[PropertyDescriptor](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.propertydescriptor?view=netframework-4.7.2&f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(System.ComponentModel.PropertyDescriptor);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)%26rd%3Dtrue)即可完成此需求，完整代码在文末\n\n![expand collection as property](/img/dev_PropertyGridControl_customCollectionExpand.png)\n\n假如你想要自定义类型名称可继承[`ExpandableObjectConverter`](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.expandableobjectconverter?view=netframework-4.7.2&f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(System.ComponentModel.ExpandableObjectConverter);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)%26rd%3Dtrue)\n\n![custom property name](/img/dev_PropertyGridControl_customExpandableObjectConverter.png)\n\n### 参考资料\n\n* [Customized Display of Collection Data in a PropertyGrid](https://www.codeproject.com/Articles/4448/Customized-Display-of-Collection-Data-in-a-Propert#_articleTop)\n\n* 示例项目源码：[DevPropertyGridControlExpandCollection](https://github.com/wangshuai-007/BlogsSample/tree/master/DevPropertyGridControlExpandCollection)\n","slug":"2021-09-26-devexpress如何在PropertyGridControl中直接编辑集合成员 ","published":1,"updated":"2021-09-26T09:15:46.046Z","_id":"cl8vdlqpm003n3oo21qt5ez2u","comments":1,"photos":[],"link":"","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p><a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>默认使用<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid\"><code>PropertyGrid</code></a>的集合编辑器，如果你要编辑集合中的项，必须点击按钮打开集合编辑器</p>\n<p>如下图所示：</p>\n<p><img src=\"/img/dev_PropertyGridControl_defaultCollectionExpand.png\" alt=\"default collection editor\"></p>\n<p>从图中不难发现，List是可以直接编辑<code>Capacity</code>属性的，那可以直接把<code>Course</code>对象变成List的成员脱离集合编辑器来编辑吗？</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>答案当然是可以的，通过观察可以发现，<a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>可展开编辑的就是Object，所以只需把集合中的成员映射为List中的Object即可，<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid\"><code>PropertyGrid</code></a>已经有相应的解决方案了。</p>\n<p>使用中间类型<code>CourseCollection</code>然后实现<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.icustomtypedescriptor?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=EN-US&k=k(System.ComponentModel.ICustomTypeDescriptor);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true\"><code>ICustomTypeDescriptor</code></a>接口和<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.propertydescriptor?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=EN-US&k=k(System.ComponentModel.PropertyDescriptor);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true\">PropertyDescriptor</a>即可完成此需求，完整代码在文末</p>\n<p><img src=\"/img/dev_PropertyGridControl_customCollectionExpand.png\" alt=\"expand collection as property\"></p>\n<p>假如你想要自定义类型名称可继承<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.expandableobjectconverter?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=EN-US&k=k(System.ComponentModel.ExpandableObjectConverter);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true\"><code>ExpandableObjectConverter</code></a></p>\n<p><img src=\"/img/dev_PropertyGridControl_customExpandableObjectConverter.png\" alt=\"custom property name\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><p><a href=\"https://www.codeproject.com/Articles/4448/Customized-Display-of-Collection-Data-in-a-Propert#_articleTop\">Customized Display of Collection Data in a PropertyGrid</a></p>\n</li>\n<li><p>示例项目源码：<a href=\"https://github.com/wangshuai-007/BlogsSample/tree/master/DevPropertyGridControlExpandCollection\">DevPropertyGridControlExpandCollection</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p><a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>默认使用<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid\"><code>PropertyGrid</code></a>的集合编辑器，如果你要编辑集合中的项，必须点击按钮打开集合编辑器</p>\n<p>如下图所示：</p>\n<p><img src=\"/img/dev_PropertyGridControl_defaultCollectionExpand.png\" alt=\"default collection editor\"></p>\n<p>从图中不难发现，List是可以直接编辑<code>Capacity</code>属性的，那可以直接把<code>Course</code>对象变成List的成员脱离集合编辑器来编辑吗？</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>答案当然是可以的，通过观察可以发现，<a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>可展开编辑的就是Object，所以只需把集合中的成员映射为List中的Object即可，<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.propertygrid\"><code>PropertyGrid</code></a>已经有相应的解决方案了。</p>\n<p>使用中间类型<code>CourseCollection</code>然后实现<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.icustomtypedescriptor?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=EN-US&k=k(System.ComponentModel.ICustomTypeDescriptor);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true\"><code>ICustomTypeDescriptor</code></a>接口和<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.propertydescriptor?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=EN-US&k=k(System.ComponentModel.PropertyDescriptor);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true\">PropertyDescriptor</a>即可完成此需求，完整代码在文末</p>\n<p><img src=\"/img/dev_PropertyGridControl_customCollectionExpand.png\" alt=\"expand collection as property\"></p>\n<p>假如你想要自定义类型名称可继承<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.expandableobjectconverter?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=EN-US&k=k(System.ComponentModel.ExpandableObjectConverter);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true\"><code>ExpandableObjectConverter</code></a></p>\n<p><img src=\"/img/dev_PropertyGridControl_customExpandableObjectConverter.png\" alt=\"custom property name\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><p><a href=\"https://www.codeproject.com/Articles/4448/Customized-Display-of-Collection-Data-in-a-Propert#_articleTop\">Customized Display of Collection Data in a PropertyGrid</a></p>\n</li>\n<li><p>示例项目源码：<a href=\"https://github.com/wangshuai-007/BlogsSample/tree/master/DevPropertyGridControlExpandCollection\">DevPropertyGridControlExpandCollection</a></p>\n</li>\n</ul>\n"},{"layout":"post","title":"devexpress如何隐藏PropertyGridControl中的行","subtitle":"hide row in devexpress PropertyGridControl(VerticalGrid)","date":"2021-09-26T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\n\n[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)实际是[Vertical Grid](https://docs.devexpress.com/WindowsForms/2449/controls-and-libraries/vertical-grid)，它的每一行对应的是[PropertyGridControl.SelectedObject](https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.PropertyGridControl.SelectedObject)中的属性，如果我想根据值隐藏行应该怎么做呢？\n\n### 解决方案\n\n假如我现在只需要显示`Course.Id=2`的`DicClassRoomId_Name`栏位，查看[Tree Traversal](https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal)可知,可以通过[VGridRowsIterator.DoOperation](https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.Rows.VGridRowsIterator.DoOperation(DevExpress.XtraVerticalGrid.Rows.RowOperation)) 方法遍历整个树达到自定义行内容的功能。\n\n为此需要实现一个[RowOperation](https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.Rows.RowOperation) (完整代码在文末)\n\n```c#\npublic class SetDicRowVisibleRowOperation : DevExpress.XtraVerticalGrid.Rows.RowOperation\n{\n    public override void Execute(DevExpress.XtraVerticalGrid.Rows.BaseRow row)\n    {\n        Console.WriteLine(row.Properties.Caption);   \n        if (row.Tag is Course course)\n        {\n            var fieldName = nameof(Student.ListCourses) + \".\" + course.IndexName + \".\" +\n                               nameof(Course.DicClassRoomId_Name);\n            if (row.Properties.FieldName == fieldName)\n                row.Visible = course.Id == 2;\n        }\n    }\n}\n```\n\n在遍历之前，还需为Row保存相关信息\n\n```c#\nprivate void Form1_Load(object sender, EventArgs e)\n{\n    var student = GetTestStudent();\n    propertyGridControl1.SelectedObject = student;\n    propertyGridControl1.OptionsBehavior.PropertySort = DevExpress.XtraVerticalGrid.PropertySort.NoSort;\n    propertyGridControl1.ExpandAllRows();\n\n    //set row Tag info\n    student.ListCourses.ForEach(x =>\n                {\n                    //IndexName set by CourseCollectionPropertyDescriptor constructor\n                    var fieldName = nameof(Student.ListCourses) + \".\" + x.IndexName + \".\" +\n                    nameof(Course.DicClassRoomId_Name);\n                    var row = propertyGridControl1.GetRowByFieldName(fieldName);\n                    row.Tag = x;\n                });\n\n    propertyGridControl1.RowsIterator.DoOperation(new SetDicRowVisibleRowOperation());\n}\n```\n\n由于上一篇文章[devexpress如何在PropertyGridControl中直接编辑集合成员](/2021/09/26/devexpress如何在PropertyGridControl中直接编辑集合成员/)的影响，`FieldName`发生了变化，此处根据`PropertyDescriptor`的逻辑生成了`FieldName`。\n\n![hide dic row](/img/dev_PropertyGridControl_hideDicRow.png)\n\n\n\n### 参考资料\n\n* [PropertyGridControl custom RowOperation doesn't retrieve all properties](https://supportcenter.devexpress.com/ticket/details/t432094/propertygridcontrol-custom-rowoperation-doesn-t-retrieve-all-properties)\n* [Tree Traversal](https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal)\n* 示例项目源码：[DevPropertyGridControlExpandCollection_HideDicRow](https://github.com/wangshuai-007/BlogsSample/tree/HideDicRow/DevPropertyGridControlExpandCollection)\n\n","source":"_posts/2021-09-27-devexpress如何隐藏PropertyGridControl中的行.md","raw":"---\nlayout:     post\ntitle:      devexpress如何隐藏PropertyGridControl中的行\nsubtitle:   hide row in devexpress PropertyGridControl(VerticalGrid)\ndate:       2021-9-27\nauthor:     王帅\ncatalog: true\ntags:\n    - devexpress\n    - winfrom\n    - propertyGridControl\n    - propertyGrid\n    - VerticalGrid\ntypora-root-url: ..\n---\n\n### 引言\n\n[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)实际是[Vertical Grid](https://docs.devexpress.com/WindowsForms/2449/controls-and-libraries/vertical-grid)，它的每一行对应的是[PropertyGridControl.SelectedObject](https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.PropertyGridControl.SelectedObject)中的属性，如果我想根据值隐藏行应该怎么做呢？\n\n### 解决方案\n\n假如我现在只需要显示`Course.Id=2`的`DicClassRoomId_Name`栏位，查看[Tree Traversal](https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal)可知,可以通过[VGridRowsIterator.DoOperation](https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.Rows.VGridRowsIterator.DoOperation(DevExpress.XtraVerticalGrid.Rows.RowOperation)) 方法遍历整个树达到自定义行内容的功能。\n\n为此需要实现一个[RowOperation](https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.Rows.RowOperation) (完整代码在文末)\n\n```c#\npublic class SetDicRowVisibleRowOperation : DevExpress.XtraVerticalGrid.Rows.RowOperation\n{\n    public override void Execute(DevExpress.XtraVerticalGrid.Rows.BaseRow row)\n    {\n        Console.WriteLine(row.Properties.Caption);   \n        if (row.Tag is Course course)\n        {\n            var fieldName = nameof(Student.ListCourses) + \".\" + course.IndexName + \".\" +\n                               nameof(Course.DicClassRoomId_Name);\n            if (row.Properties.FieldName == fieldName)\n                row.Visible = course.Id == 2;\n        }\n    }\n}\n```\n\n在遍历之前，还需为Row保存相关信息\n\n```c#\nprivate void Form1_Load(object sender, EventArgs e)\n{\n    var student = GetTestStudent();\n    propertyGridControl1.SelectedObject = student;\n    propertyGridControl1.OptionsBehavior.PropertySort = DevExpress.XtraVerticalGrid.PropertySort.NoSort;\n    propertyGridControl1.ExpandAllRows();\n\n    //set row Tag info\n    student.ListCourses.ForEach(x =>\n                {\n                    //IndexName set by CourseCollectionPropertyDescriptor constructor\n                    var fieldName = nameof(Student.ListCourses) + \".\" + x.IndexName + \".\" +\n                    nameof(Course.DicClassRoomId_Name);\n                    var row = propertyGridControl1.GetRowByFieldName(fieldName);\n                    row.Tag = x;\n                });\n\n    propertyGridControl1.RowsIterator.DoOperation(new SetDicRowVisibleRowOperation());\n}\n```\n\n由于上一篇文章[devexpress如何在PropertyGridControl中直接编辑集合成员](/2021/09/26/devexpress如何在PropertyGridControl中直接编辑集合成员/)的影响，`FieldName`发生了变化，此处根据`PropertyDescriptor`的逻辑生成了`FieldName`。\n\n![hide dic row](/img/dev_PropertyGridControl_hideDicRow.png)\n\n\n\n### 参考资料\n\n* [PropertyGridControl custom RowOperation doesn't retrieve all properties](https://supportcenter.devexpress.com/ticket/details/t432094/propertygridcontrol-custom-rowoperation-doesn-t-retrieve-all-properties)\n* [Tree Traversal](https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal)\n* 示例项目源码：[DevPropertyGridControlExpandCollection_HideDicRow](https://github.com/wangshuai-007/BlogsSample/tree/HideDicRow/DevPropertyGridControlExpandCollection)\n\n","slug":"2021-09-27-devexpress如何隐藏PropertyGridControl中的行","published":1,"updated":"2021-09-29T08:59:59.320Z","_id":"cl8vdlqqf003s3oo2fai9digr","comments":1,"photos":[],"link":"","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p><a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>实际是<a href=\"https://docs.devexpress.com/WindowsForms/2449/controls-and-libraries/vertical-grid\">Vertical Grid</a>，它的每一行对应的是<a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.PropertyGridControl.SelectedObject\">PropertyGridControl.SelectedObject</a>中的属性，如果我想根据值隐藏行应该怎么做呢？</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>假如我现在只需要显示<code>Course.Id=2</code>的<code>DicClassRoomId_Name</code>栏位，查看<a href=\"https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal\">Tree Traversal</a>可知,可以通过<a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.Rows.VGridRowsIterator.DoOperation(DevExpress.XtraVerticalGrid.Rows.RowOperation)\">VGridRowsIterator.DoOperation</a> 方法遍历整个树达到自定义行内容的功能。</p>\n<p>为此需要实现一个<a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.Rows.RowOperation\">RowOperation</a> (完整代码在文末)</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SetDicRowVisibleRowOperation</span> : <span class=\"hljs-title\">DevExpress.XtraVerticalGrid.Rows.RowOperation</span><br>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Execute</span>(<span class=\"hljs-params\">DevExpress.XtraVerticalGrid.Rows.BaseRow row</span>)</span><br>    &#123;<br>        Console.WriteLine(row.Properties.Caption);   <br>        <span class=\"hljs-keyword\">if</span> (row.Tag <span class=\"hljs-keyword\">is</span> Course course)<br>        &#123;<br>            <span class=\"hljs-keyword\">var</span> fieldName = <span class=\"hljs-keyword\">nameof</span>(Student.ListCourses) + <span class=\"hljs-string\">&quot;.&quot;</span> + course.IndexName + <span class=\"hljs-string\">&quot;.&quot;</span> +<br>                               <span class=\"hljs-keyword\">nameof</span>(Course.DicClassRoomId_Name);<br>            <span class=\"hljs-keyword\">if</span> (row.Properties.FieldName == fieldName)<br>                row.Visible = course.Id == <span class=\"hljs-number\">2</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在遍历之前，还需为Row保存相关信息</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Form1_Load</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">var</span> student = GetTestStudent();<br>    propertyGridControl1.SelectedObject = student;<br>    propertyGridControl1.OptionsBehavior.PropertySort = DevExpress.XtraVerticalGrid.PropertySort.NoSort;<br>    propertyGridControl1.ExpandAllRows();<br><br>    <span class=\"hljs-comment\">//set row Tag info</span><br>    student.ListCourses.ForEach(x =&gt;<br>                &#123;<br>                    <span class=\"hljs-comment\">//IndexName set by CourseCollectionPropertyDescriptor constructor</span><br>                    <span class=\"hljs-keyword\">var</span> fieldName = <span class=\"hljs-keyword\">nameof</span>(Student.ListCourses) + <span class=\"hljs-string\">&quot;.&quot;</span> + x.IndexName + <span class=\"hljs-string\">&quot;.&quot;</span> +<br>                    <span class=\"hljs-keyword\">nameof</span>(Course.DicClassRoomId_Name);<br>                    <span class=\"hljs-keyword\">var</span> row = propertyGridControl1.GetRowByFieldName(fieldName);<br>                    row.Tag = x;<br>                &#125;);<br><br>    propertyGridControl1.RowsIterator.DoOperation(<span class=\"hljs-keyword\">new</span> SetDicRowVisibleRowOperation());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>由于上一篇文章<a href=\"/2021/09/26/devexpress%E5%A6%82%E4%BD%95%E5%9C%A8PropertyGridControl%E4%B8%AD%E7%9B%B4%E6%8E%A5%E7%BC%96%E8%BE%91%E9%9B%86%E5%90%88%E6%88%90%E5%91%98/\">devexpress如何在PropertyGridControl中直接编辑集合成员</a>的影响，<code>FieldName</code>发生了变化，此处根据<code>PropertyDescriptor</code>的逻辑生成了<code>FieldName</code>。</p>\n<p><img src=\"/img/dev_PropertyGridControl_hideDicRow.png\" alt=\"hide dic row\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://supportcenter.devexpress.com/ticket/details/t432094/propertygridcontrol-custom-rowoperation-doesn-t-retrieve-all-properties\">PropertyGridControl custom RowOperation doesn’t retrieve all properties</a></li>\n<li><a href=\"https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal\">Tree Traversal</a></li>\n<li>示例项目源码：<a href=\"https://github.com/wangshuai-007/BlogsSample/tree/HideDicRow/DevPropertyGridControlExpandCollection\">DevPropertyGridControlExpandCollection_HideDicRow</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p><a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>实际是<a href=\"https://docs.devexpress.com/WindowsForms/2449/controls-and-libraries/vertical-grid\">Vertical Grid</a>，它的每一行对应的是<a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.PropertyGridControl.SelectedObject\">PropertyGridControl.SelectedObject</a>中的属性，如果我想根据值隐藏行应该怎么做呢？</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>假如我现在只需要显示<code>Course.Id=2</code>的<code>DicClassRoomId_Name</code>栏位，查看<a href=\"https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal\">Tree Traversal</a>可知,可以通过<a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.Rows.VGridRowsIterator.DoOperation(DevExpress.XtraVerticalGrid.Rows.RowOperation)\">VGridRowsIterator.DoOperation</a> 方法遍历整个树达到自定义行内容的功能。</p>\n<p>为此需要实现一个<a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.Rows.RowOperation\">RowOperation</a> (完整代码在文末)</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SetDicRowVisibleRowOperation</span> : <span class=\"hljs-title\">DevExpress.XtraVerticalGrid.Rows.RowOperation</span><br>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Execute</span>(<span class=\"hljs-params\">DevExpress.XtraVerticalGrid.Rows.BaseRow row</span>)</span><br>    &#123;<br>        Console.WriteLine(row.Properties.Caption);   <br>        <span class=\"hljs-keyword\">if</span> (row.Tag <span class=\"hljs-keyword\">is</span> Course course)<br>        &#123;<br>            <span class=\"hljs-keyword\">var</span> fieldName = <span class=\"hljs-keyword\">nameof</span>(Student.ListCourses) + <span class=\"hljs-string\">&quot;.&quot;</span> + course.IndexName + <span class=\"hljs-string\">&quot;.&quot;</span> +<br>                               <span class=\"hljs-keyword\">nameof</span>(Course.DicClassRoomId_Name);<br>            <span class=\"hljs-keyword\">if</span> (row.Properties.FieldName == fieldName)<br>                row.Visible = course.Id == <span class=\"hljs-number\">2</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在遍历之前，还需为Row保存相关信息</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Form1_Load</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">var</span> student = GetTestStudent();<br>    propertyGridControl1.SelectedObject = student;<br>    propertyGridControl1.OptionsBehavior.PropertySort = DevExpress.XtraVerticalGrid.PropertySort.NoSort;<br>    propertyGridControl1.ExpandAllRows();<br><br>    <span class=\"hljs-comment\">//set row Tag info</span><br>    student.ListCourses.ForEach(x =&gt;<br>                &#123;<br>                    <span class=\"hljs-comment\">//IndexName set by CourseCollectionPropertyDescriptor constructor</span><br>                    <span class=\"hljs-keyword\">var</span> fieldName = <span class=\"hljs-keyword\">nameof</span>(Student.ListCourses) + <span class=\"hljs-string\">&quot;.&quot;</span> + x.IndexName + <span class=\"hljs-string\">&quot;.&quot;</span> +<br>                    <span class=\"hljs-keyword\">nameof</span>(Course.DicClassRoomId_Name);<br>                    <span class=\"hljs-keyword\">var</span> row = propertyGridControl1.GetRowByFieldName(fieldName);<br>                    row.Tag = x;<br>                &#125;);<br><br>    propertyGridControl1.RowsIterator.DoOperation(<span class=\"hljs-keyword\">new</span> SetDicRowVisibleRowOperation());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>由于上一篇文章<a href=\"/2021/09/26/devexpress%E5%A6%82%E4%BD%95%E5%9C%A8PropertyGridControl%E4%B8%AD%E7%9B%B4%E6%8E%A5%E7%BC%96%E8%BE%91%E9%9B%86%E5%90%88%E6%88%90%E5%91%98/\">devexpress如何在PropertyGridControl中直接编辑集合成员</a>的影响，<code>FieldName</code>发生了变化，此处根据<code>PropertyDescriptor</code>的逻辑生成了<code>FieldName</code>。</p>\n<p><img src=\"/img/dev_PropertyGridControl_hideDicRow.png\" alt=\"hide dic row\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://supportcenter.devexpress.com/ticket/details/t432094/propertygridcontrol-custom-rowoperation-doesn-t-retrieve-all-properties\">PropertyGridControl custom RowOperation doesn’t retrieve all properties</a></li>\n<li><a href=\"https://docs.devexpress.com/WindowsForms/479/controls-and-libraries/vertical-grid/data-layout-records-rows-and-cells/rows/tree-traversal\">Tree Traversal</a></li>\n<li>示例项目源码：<a href=\"https://github.com/wangshuai-007/BlogsSample/tree/HideDicRow/DevPropertyGridControlExpandCollection\">DevPropertyGridControlExpandCollection_HideDicRow</a></li>\n</ul>\n"},{"layout":"post","title":"devexpress如何隐藏PropertyGridControl中的编辑器(Editor)","subtitle":"hide row value cell(editor) in devexpress PropertyGridControl(VerticalGrid)","date":"2021-09-28T16:00:00.000Z","author":"王帅","catalog":true,"typora-root-url":"..","_content":"\n### 引言\n\n[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)有两种视图模式([ActiveViewType](https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.PropertyGridControl.ActiveViewType))，经典和office\n\n如果使用office视图（经典视图为Grid展示方式，因此无法隐藏，只能自定义[ExpandableObjectConverter](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.expandableobjectconverter?view=netframework-4.7.2&f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(System.ComponentModel.ExpandableObjectConverter);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)%26rd%3Dtrue)，具体可参考[CourseConverter](https://github.com/wangshuai-007/BlogsSample/blob/daf39bab640c7fdd4b8a5504ed64c4d9b1368f97/DevPropertyGridControlExpandCollection/DevPropertyGridControlExpandCollection/Student.cs#L123)）绑定一个前文：[devexpress如何在PropertyGridControl中直接编辑集合成员](/2021/09/26/devexpress如何在PropertyGridControl中直接编辑集合成员/)中的对象结果就是这样:\n\n![office view](/img/dev_PropertyGridControl_customCollectionExpand_officeView.png)\n\n现在,`ListCourses`这个对象已经被展开了,所以它的集合编辑器没那么必要,如果我想要把这个`Editor`去掉,有什么办法吗?\n\n### 解决方案\n\n官方并没有针对这个问题提供简单的解决方案,但是它有[CustomDrawRowValueCell](https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell)事件\n\n这个事件可以自定义Editor\n\n所以,问题就比较简单了;只需要不绘制Cell即可达到隐藏控件的目的\n\n```c#\nprivate void PropertyGridControl1_CustomDrawRowValueCell(object sender, DevExpress.XtraVerticalGrid.Events.CustomDrawRowValueCellEventArgs e)\n{\n    if(e.Row.Properties.FieldName== nameof(Student.ListCourses))\n    {\n        e.Properties.AllowEdit = false;//解决点击编辑框位置时Editor出现的问题\n        e.Handled = true;//不执行绘制操作即可隐藏编辑器\n    }\n}\n```\n\n效果如图:\n\n![hide collection editor](/img/dev_PropertyGridControl_hideCollection_officeView.png)\n\n### 参考资料\n\n* [CustomDrawRowValueCell](https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell)Event\n\n","source":"_posts/2021-09-29-devexpress如何隐藏PropertyGridControl中的编辑器(Editor).md","raw":"---\nlayout:     post\ntitle:      devexpress如何隐藏PropertyGridControl中的编辑器(Editor)\nsubtitle:   hide row value cell(editor) in devexpress PropertyGridControl(VerticalGrid)\ndate:       2021-9-29\nauthor:     王帅\ncatalog: true\ntags:\n    - devexpress\n    - winfrom\n    - propertyGridControl\n    - propertyGrid\n    - VerticalGrid\ntypora-root-url: ..\n---\n\n### 引言\n\n[`PropertyGridControl`](https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid)有两种视图模式([ActiveViewType](https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.PropertyGridControl.ActiveViewType))，经典和office\n\n如果使用office视图（经典视图为Grid展示方式，因此无法隐藏，只能自定义[ExpandableObjectConverter](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.expandableobjectconverter?view=netframework-4.7.2&f1url=%3FappId%3DDev16IDEF1%26l%3DEN-US%26k%3Dk(System.ComponentModel.ExpandableObjectConverter);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)%26rd%3Dtrue)，具体可参考[CourseConverter](https://github.com/wangshuai-007/BlogsSample/blob/daf39bab640c7fdd4b8a5504ed64c4d9b1368f97/DevPropertyGridControlExpandCollection/DevPropertyGridControlExpandCollection/Student.cs#L123)）绑定一个前文：[devexpress如何在PropertyGridControl中直接编辑集合成员](/2021/09/26/devexpress如何在PropertyGridControl中直接编辑集合成员/)中的对象结果就是这样:\n\n![office view](/img/dev_PropertyGridControl_customCollectionExpand_officeView.png)\n\n现在,`ListCourses`这个对象已经被展开了,所以它的集合编辑器没那么必要,如果我想要把这个`Editor`去掉,有什么办法吗?\n\n### 解决方案\n\n官方并没有针对这个问题提供简单的解决方案,但是它有[CustomDrawRowValueCell](https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell)事件\n\n这个事件可以自定义Editor\n\n所以,问题就比较简单了;只需要不绘制Cell即可达到隐藏控件的目的\n\n```c#\nprivate void PropertyGridControl1_CustomDrawRowValueCell(object sender, DevExpress.XtraVerticalGrid.Events.CustomDrawRowValueCellEventArgs e)\n{\n    if(e.Row.Properties.FieldName== nameof(Student.ListCourses))\n    {\n        e.Properties.AllowEdit = false;//解决点击编辑框位置时Editor出现的问题\n        e.Handled = true;//不执行绘制操作即可隐藏编辑器\n    }\n}\n```\n\n效果如图:\n\n![hide collection editor](/img/dev_PropertyGridControl_hideCollection_officeView.png)\n\n### 参考资料\n\n* [CustomDrawRowValueCell](https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell)Event\n\n","slug":"2021-09-29-devexpress如何隐藏PropertyGridControl中的编辑器(Editor)","published":1,"updated":"2021-09-29T09:09:35.461Z","_id":"cl8vdlqs2003z3oo28gw975jf","comments":1,"photos":[],"link":"","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p><a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>有两种视图模式(<a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.PropertyGridControl.ActiveViewType\">ActiveViewType</a>)，经典和office</p>\n<p>如果使用office视图（经典视图为Grid展示方式，因此无法隐藏，只能自定义<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.expandableobjectconverter?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=EN-US&k=k(System.ComponentModel.ExpandableObjectConverter);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true\">ExpandableObjectConverter</a>，具体可参考<a href=\"https://github.com/wangshuai-007/BlogsSample/blob/daf39bab640c7fdd4b8a5504ed64c4d9b1368f97/DevPropertyGridControlExpandCollection/DevPropertyGridControlExpandCollection/Student.cs#L123\">CourseConverter</a>）绑定一个前文：<a href=\"/2021/09/26/devexpress%E5%A6%82%E4%BD%95%E5%9C%A8PropertyGridControl%E4%B8%AD%E7%9B%B4%E6%8E%A5%E7%BC%96%E8%BE%91%E9%9B%86%E5%90%88%E6%88%90%E5%91%98/\">devexpress如何在PropertyGridControl中直接编辑集合成员</a>中的对象结果就是这样:</p>\n<p><img src=\"/img/dev_PropertyGridControl_customCollectionExpand_officeView.png\" alt=\"office view\"></p>\n<p>现在,<code>ListCourses</code>这个对象已经被展开了,所以它的集合编辑器没那么必要,如果我想要把这个<code>Editor</code>去掉,有什么办法吗?</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>官方并没有针对这个问题提供简单的解决方案,但是它有<a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell\">CustomDrawRowValueCell</a>事件</p>\n<p>这个事件可以自定义Editor</p>\n<p>所以,问题就比较简单了;只需要不绘制Cell即可达到隐藏控件的目的</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PropertyGridControl1_CustomDrawRowValueCell</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, DevExpress.XtraVerticalGrid.Events.CustomDrawRowValueCellEventArgs e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(e.Row.Properties.FieldName== <span class=\"hljs-keyword\">nameof</span>(Student.ListCourses))<br>    &#123;<br>        e.Properties.AllowEdit = <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//解决点击编辑框位置时Editor出现的问题</span><br>        e.Handled = <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//不执行绘制操作即可隐藏编辑器</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>效果如图:</p>\n<p><img src=\"/img/dev_PropertyGridControl_hideCollection_officeView.png\" alt=\"hide collection editor\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell\">CustomDrawRowValueCell</a>Event</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p><a href=\"https://docs.devexpress.com/WindowsForms/119885/controls-and-libraries/property-grid\"><code>PropertyGridControl</code></a>有两种视图模式(<a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.PropertyGridControl.ActiveViewType\">ActiveViewType</a>)，经典和office</p>\n<p>如果使用office视图（经典视图为Grid展示方式，因此无法隐藏，只能自定义<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.expandableobjectconverter?view=netframework-4.7.2&f1url=?appId=Dev16IDEF1&l=EN-US&k=k(System.ComponentModel.ExpandableObjectConverter);k(TargetFrameworkMoniker-.NETFramework,Version%253Dv4.7.2);k(DevLang-csharp)&rd=true\">ExpandableObjectConverter</a>，具体可参考<a href=\"https://github.com/wangshuai-007/BlogsSample/blob/daf39bab640c7fdd4b8a5504ed64c4d9b1368f97/DevPropertyGridControlExpandCollection/DevPropertyGridControlExpandCollection/Student.cs#L123\">CourseConverter</a>）绑定一个前文：<a href=\"/2021/09/26/devexpress%E5%A6%82%E4%BD%95%E5%9C%A8PropertyGridControl%E4%B8%AD%E7%9B%B4%E6%8E%A5%E7%BC%96%E8%BE%91%E9%9B%86%E5%90%88%E6%88%90%E5%91%98/\">devexpress如何在PropertyGridControl中直接编辑集合成员</a>中的对象结果就是这样:</p>\n<p><img src=\"/img/dev_PropertyGridControl_customCollectionExpand_officeView.png\" alt=\"office view\"></p>\n<p>现在,<code>ListCourses</code>这个对象已经被展开了,所以它的集合编辑器没那么必要,如果我想要把这个<code>Editor</code>去掉,有什么办法吗?</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>官方并没有针对这个问题提供简单的解决方案,但是它有<a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell\">CustomDrawRowValueCell</a>事件</p>\n<p>这个事件可以自定义Editor</p>\n<p>所以,问题就比较简单了;只需要不绘制Cell即可达到隐藏控件的目的</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PropertyGridControl1_CustomDrawRowValueCell</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span> sender, DevExpress.XtraVerticalGrid.Events.CustomDrawRowValueCellEventArgs e</span>)</span><br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(e.Row.Properties.FieldName== <span class=\"hljs-keyword\">nameof</span>(Student.ListCourses))<br>    &#123;<br>        e.Properties.AllowEdit = <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//解决点击编辑框位置时Editor出现的问题</span><br>        e.Handled = <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//不执行绘制操作即可隐藏编辑器</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>效果如图:</p>\n<p><img src=\"/img/dev_PropertyGridControl_hideCollection_officeView.png\" alt=\"hide collection editor\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://docs.devexpress.com/WindowsForms/DevExpress.XtraVerticalGrid.VGridControlBase.CustomDrawRowValueCell\">CustomDrawRowValueCell</a>Event</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl8vash8v0001jko2e7925311","tag_id":"cl8vash9g0003jko2blwi48th","_id":"cl8vash9n0008jko2gdcsfnjl"},{"post_id":"cl8vash8v0001jko2e7925311","tag_id":"cl8vash9k0004jko2d3x7brm3","_id":"cl8vash9n0009jko20sacg9ra"},{"post_id":"cl8vash8v0001jko2e7925311","tag_id":"cl8vash9k0005jko2cooy0lbq","_id":"cl8vash9n000bjko27n2lai42"},{"post_id":"cl8vash8v0001jko2e7925311","tag_id":"cl8vash9m0006jko20xm01hgo","_id":"cl8vash9n000cjko274vegc39"},{"post_id":"cl8vash9d0002jko24i8m13jh","tag_id":"cl8vash9m0007jko20xcof6th","_id":"cl8vash9p000fjko244ghh6e0"},{"post_id":"cl8vash9d0002jko24i8m13jh","tag_id":"cl8vash9n000ajko2gc28afro","_id":"cl8vash9q000gjko26v9f0fwu"},{"post_id":"cl8vash9d0002jko24i8m13jh","tag_id":"cl8vash9n000djko23474gbvd","_id":"cl8vash9q000hjko2d7q03np4"},{"post_id":"cl8vash9d0002jko24i8m13jh","tag_id":"cl8vash9o000ejko2fbm99oif","_id":"cl8vash9q000ijko2agpa9n4m"},{"post_id":"cl8vaxdua00005oo20b71djcs","tag_id":"cl8vaxdui00015oo28rdi92md","_id":"cl8vaxdul00035oo20z39fjmk"},{"post_id":"cl8vaxdua00005oo20b71djcs","tag_id":"cl8vaxduk00025oo2fkred0pt","_id":"cl8vaxdul00045oo26tdx2coa"},{"post_id":"cl8vdlqfl00003oo2d7px4uw2","tag_id":"cl8vdlqfq00013oo2bnh3aiip","_id":"cl8vdlqfu00063oo25l0tgo19"},{"post_id":"cl8vdlqfl00003oo2d7px4uw2","tag_id":"cl8vdlqfr00023oo27shu1pwe","_id":"cl8vdlqfv00073oo22lanfn74"},{"post_id":"cl8vdlqfl00003oo2d7px4uw2","tag_id":"cl8vdlqfr00033oo2hszi0497","_id":"cl8vdlqfv00083oo2434p83hh"},{"post_id":"cl8vdlqfl00003oo2d7px4uw2","tag_id":"cl8vdlqfs00043oo29gqk2pqf","_id":"cl8vdlqfv00093oo23myzfhlk"},{"post_id":"cl8vdlqfl00003oo2d7px4uw2","tag_id":"cl8vdlqft00053oo262935tqp","_id":"cl8vdlqfv000a3oo2af0z4eva"},{"post_id":"cl8vdlqgb000b3oo2dv34dq6e","tag_id":"cl8vdlqgd000c3oo2frpe9yda","_id":"cl8vdlqgg000f3oo2fqgyemtx"},{"post_id":"cl8vdlqgb000b3oo2dv34dq6e","tag_id":"cl8vdlqgd000d3oo2dk7w3ig6","_id":"cl8vdlqgg000g3oo21x2f0got"},{"post_id":"cl8vdlqgb000b3oo2dv34dq6e","tag_id":"cl8vdlqgf000e3oo2c1gehsg4","_id":"cl8vdlqgg000h3oo2d0xv07l2"},{"post_id":"cl8vdlqh5000i3oo233vbbcye","tag_id":"cl8vdlqh7000j3oo23pc12u22","_id":"cl8vdlqh9000m3oo20t1d5tjd"},{"post_id":"cl8vdlqh5000i3oo233vbbcye","tag_id":"cl8vdlqh8000k3oo2b61k3yoy","_id":"cl8vdlqh9000n3oo2d4uy5izg"},{"post_id":"cl8vdlqh5000i3oo233vbbcye","tag_id":"cl8vdlqh8000l3oo27fep5t12","_id":"cl8vdlqh9000o3oo22bfxf70x"},{"post_id":"cl8vdlqhp000p3oo25euse1qs","tag_id":"cl8vdlqh7000j3oo23pc12u22","_id":"cl8vdlqhs000r3oo2h8ap0ch6"},{"post_id":"cl8vdlqhp000p3oo25euse1qs","tag_id":"cl8vdlqhr000q3oo26jc5fnwh","_id":"cl8vdlqhs000s3oo2afv2hy25"},{"post_id":"cl8vdlqhp000p3oo25euse1qs","tag_id":"cl8vdlqh8000l3oo27fep5t12","_id":"cl8vdlqhs000t3oo26iyla9x3"},{"post_id":"cl8vdlqhz000u3oo2eqki3y3v","tag_id":"cl8vdlqgd000c3oo2frpe9yda","_id":"cl8vdlqi600103oo2bxyrbc36"},{"post_id":"cl8vdlqhz000u3oo2eqki3y3v","tag_id":"cl8vdlqi1000v3oo2c30zaxr8","_id":"cl8vdlqi600113oo2czcz821d"},{"post_id":"cl8vdlqhz000u3oo2eqki3y3v","tag_id":"cl8vdlqi2000w3oo2eae40cnp","_id":"cl8vdlqi600123oo28yrt5dio"},{"post_id":"cl8vdlqhz000u3oo2eqki3y3v","tag_id":"cl8vdlqi3000x3oo22y24f2zm","_id":"cl8vdlqi600133oo2ctdy45kp"},{"post_id":"cl8vdlqhz000u3oo2eqki3y3v","tag_id":"cl8vdlqi4000y3oo279oh2mbk","_id":"cl8vdlqi600143oo2bl7m3nlw"},{"post_id":"cl8vdlqhz000u3oo2eqki3y3v","tag_id":"cl8vdlqi4000z3oo211skaloq","_id":"cl8vdlqi600153oo2a2xueytv"},{"post_id":"cl8vdlqin00173oo2gafu4zja","tag_id":"cl8vdlqgd000c3oo2frpe9yda","_id":"cl8vdlqio00193oo2a49d32g8"},{"post_id":"cl8vdlqin00173oo2gafu4zja","tag_id":"cl8vdlqi2000w3oo2eae40cnp","_id":"cl8vdlqio001a3oo211b336u2"},{"post_id":"cl8vdlqin00173oo2gafu4zja","tag_id":"cl8vdlqi4000z3oo211skaloq","_id":"cl8vdlqip001c3oo29u7fbjgq"},{"post_id":"cl8vdlqij00163oo2erc9hmyr","tag_id":"cl8vdlqio00183oo271585v18","_id":"cl8vdlqip001d3oo22sfra7kh"},{"post_id":"cl8vdlqij00163oo2erc9hmyr","tag_id":"cl8vdlqio001b3oo2bp0z5qxs","_id":"cl8vdlqip001e3oo2dolfe5z6"},{"post_id":"cl8vdlqj0001f3oo2devwa05j","tag_id":"cl8vdlqj2001g3oo2638h1u9t","_id":"cl8vdlqj6001j3oo26a326s2c"},{"post_id":"cl8vdlqj0001f3oo2devwa05j","tag_id":"cl8vdlqj4001h3oo2gt8tbsq9","_id":"cl8vdlqj7001k3oo2ger1c8l3"},{"post_id":"cl8vdlqj0001f3oo2devwa05j","tag_id":"cl8vdlqj5001i3oo20g5ahvh4","_id":"cl8vdlqj7001l3oo2b6pu69pn"},{"post_id":"cl8vdlqjn001m3oo2bbtyhl0p","tag_id":"cl8vdlqj2001g3oo2638h1u9t","_id":"cl8vdlqjp001o3oo2eufea1gm"},{"post_id":"cl8vdlqjn001m3oo2bbtyhl0p","tag_id":"cl8vdlqj4001h3oo2gt8tbsq9","_id":"cl8vdlqjp001p3oo25nxph2og"},{"post_id":"cl8vdlqjn001m3oo2bbtyhl0p","tag_id":"cl8vdlqjo001n3oo2ccu914kg","_id":"cl8vdlqjp001q3oo2896m1hqy"},{"post_id":"cl8vdlqkn001r3oo2a1uc3dd1","tag_id":"cl8vdlqj2001g3oo2638h1u9t","_id":"cl8vdlqkt001s3oo27x0b9p7j"},{"post_id":"cl8vdlqkn001r3oo2a1uc3dd1","tag_id":"cl8vdlqj4001h3oo2gt8tbsq9","_id":"cl8vdlqkt001t3oo27zy38xeo"},{"post_id":"cl8vdlqlf001u3oo23a6q6kge","tag_id":"cl8vdlqlg001v3oo28oy99j34","_id":"cl8vdlqli001y3oo28xr131zx"},{"post_id":"cl8vdlqlf001u3oo23a6q6kge","tag_id":"cl8vdlqlh001w3oo2f0l353uk","_id":"cl8vdlqli001z3oo2accp0xfi"},{"post_id":"cl8vdlqlf001u3oo23a6q6kge","tag_id":"cl8vdlqlh001x3oo27wom0ggs","_id":"cl8vdlqli00203oo2gebn92ty"},{"post_id":"cl8vdlqlj00213oo25nlhalm6","tag_id":"cl8vdlqgd000c3oo2frpe9yda","_id":"cl8vdlqll00223oo2a1id3w40"},{"post_id":"cl8vdlqlj00213oo25nlhalm6","tag_id":"cl8vdlqgd000d3oo2dk7w3ig6","_id":"cl8vdlqll00233oo2dd2vfghl"},{"post_id":"cl8vdlqlj00213oo25nlhalm6","tag_id":"cl8vdlqgf000e3oo2c1gehsg4","_id":"cl8vdlqll00243oo2do6x2cjc"},{"post_id":"cl8vdlqm400253oo23jf2bv0t","tag_id":"cl8vdlqm700273oo29stadfiu","_id":"cl8vdlqma002c3oo2divkcp4j"},{"post_id":"cl8vdlqm400253oo23jf2bv0t","tag_id":"cl8vdlqm800283oo21o8w88hg","_id":"cl8vdlqmb002d3oo2ca0fdfuj"},{"post_id":"cl8vdlqm400253oo23jf2bv0t","tag_id":"cl8vdlqm900293oo2azclgg23","_id":"cl8vdlqmb002f3oo2avpd26bv"},{"post_id":"cl8vdlqm400253oo23jf2bv0t","tag_id":"cl8vdlqm9002a3oo2gulfbic0","_id":"cl8vdlqmb002g3oo29el36szr"},{"post_id":"cl8vdlqm600263oo2b4jef16m","tag_id":"cl8vdlqma002b3oo29fslhsp4","_id":"cl8vdlqmh002l3oo25bba92qy"},{"post_id":"cl8vdlqm600263oo2b4jef16m","tag_id":"cl8vdlqmb002e3oo23vemfrk8","_id":"cl8vdlqmh002m3oo2glza57hr"},{"post_id":"cl8vdlqm600263oo2b4jef16m","tag_id":"cl8vdlqmc002h3oo21akub0vg","_id":"cl8vdlqmh002n3oo2f50datbz"},{"post_id":"cl8vdlqm600263oo2b4jef16m","tag_id":"cl8vdlqmd002i3oo298ve6wz9","_id":"cl8vdlqmi002o3oo24i01efpy"},{"post_id":"cl8vdlqm600263oo2b4jef16m","tag_id":"cl8vdlqmf002j3oo24o5pate0","_id":"cl8vdlqmi002p3oo22ezb9ji0"},{"post_id":"cl8vdlqm600263oo2b4jef16m","tag_id":"cl8vdlqmg002k3oo2evuq4gmx","_id":"cl8vdlqmi002q3oo27l1iglim"},{"post_id":"cl8vdlqnd002r3oo28v3f9hqd","tag_id":"cl8vdlqne002s3oo224lgctla","_id":"cl8vdlqnf002u3oo2fcbg1bxy"},{"post_id":"cl8vdlqnd002r3oo28v3f9hqd","tag_id":"cl8vdlqnf002t3oo208orhx7t","_id":"cl8vdlqnf002v3oo29w4c3dro"},{"post_id":"cl8vdlqnd002r3oo28v3f9hqd","tag_id":"cl8vdlqm9002a3oo2gulfbic0","_id":"cl8vdlqnf002w3oo246hu87rp"},{"post_id":"cl8vdlqng002x3oo2a4bmdpb7","tag_id":"cl8vdlqj2001g3oo2638h1u9t","_id":"cl8vdlqnh002y3oo2hi2oap78"},{"post_id":"cl8vdlqng002x3oo2a4bmdpb7","tag_id":"cl8vdlqj4001h3oo2gt8tbsq9","_id":"cl8vdlqnh002z3oo227dvblx2"},{"post_id":"cl8vdlqo900303oo29rf8fjp8","tag_id":"cl8vdlqob00323oo219os4jx7","_id":"cl8vdlqoi00363oo2a2d39sn0"},{"post_id":"cl8vdlqo900303oo29rf8fjp8","tag_id":"cl8vdlqj4001h3oo2gt8tbsq9","_id":"cl8vdlqoi00373oo28nwy74si"},{"post_id":"cl8vdlqo900303oo29rf8fjp8","tag_id":"cl8vdlqob00333oo2afi88pzt","_id":"cl8vdlqon00393oo2hmgl9o08"},{"post_id":"cl8vdlqo900303oo29rf8fjp8","tag_id":"cl8vdlqoe00343oo2gh0tfck5","_id":"cl8vdlqon003a3oo2hbinfjem"},{"post_id":"cl8vdlqoa00313oo2h67ah62q","tag_id":"cl8vdlqob00323oo219os4jx7","_id":"cl8vdlqop003c3oo2h24y5woj"},{"post_id":"cl8vdlqoa00313oo2h67ah62q","tag_id":"cl8vdlqj4001h3oo2gt8tbsq9","_id":"cl8vdlqop003d3oo24nwgabgo"},{"post_id":"cl8vdlqoa00313oo2h67ah62q","tag_id":"cl8vdlqob00333oo2afi88pzt","_id":"cl8vdlqop003e3oo213fcaybk"},{"post_id":"cl8vdlqoa00313oo2h67ah62q","tag_id":"cl8vdlqoe00343oo2gh0tfck5","_id":"cl8vdlqop003f3oo22jw2aokz"},{"post_id":"cl8vdlqpa003g3oo2aufugu0s","tag_id":"cl8vdlqob00323oo219os4jx7","_id":"cl8vdlqpi003j3oo26fww8igi"},{"post_id":"cl8vdlqpa003g3oo2aufugu0s","tag_id":"cl8vdlqj4001h3oo2gt8tbsq9","_id":"cl8vdlqpi003k3oo2g5o90uwi"},{"post_id":"cl8vdlqpa003g3oo2aufugu0s","tag_id":"cl8vdlqpc003h3oo2b7rj3tnd","_id":"cl8vdlqpi003l3oo2e8ik0u2v"},{"post_id":"cl8vdlqpa003g3oo2aufugu0s","tag_id":"cl8vdlqpd003i3oo259p51foe","_id":"cl8vdlqpj003m3oo2ey8w16it"},{"post_id":"cl8vdlqpm003n3oo21qt5ez2u","tag_id":"cl8vdlqob00323oo219os4jx7","_id":"cl8vdlqpn003o3oo228i9ehtj"},{"post_id":"cl8vdlqpm003n3oo21qt5ez2u","tag_id":"cl8vdlqj4001h3oo2gt8tbsq9","_id":"cl8vdlqpo003p3oo24yfk16yk"},{"post_id":"cl8vdlqpm003n3oo21qt5ez2u","tag_id":"cl8vdlqpc003h3oo2b7rj3tnd","_id":"cl8vdlqpo003q3oo20o6whpcl"},{"post_id":"cl8vdlqpm003n3oo21qt5ez2u","tag_id":"cl8vdlqpd003i3oo259p51foe","_id":"cl8vdlqpo003r3oo2830ler2l"},{"post_id":"cl8vdlqqf003s3oo2fai9digr","tag_id":"cl8vdlqob00323oo219os4jx7","_id":"cl8vdlqqh003u3oo2e5is7uex"},{"post_id":"cl8vdlqqf003s3oo2fai9digr","tag_id":"cl8vdlqj4001h3oo2gt8tbsq9","_id":"cl8vdlqqh003v3oo2hikr2tfg"},{"post_id":"cl8vdlqqf003s3oo2fai9digr","tag_id":"cl8vdlqpc003h3oo2b7rj3tnd","_id":"cl8vdlqqi003w3oo202e696fb"},{"post_id":"cl8vdlqqf003s3oo2fai9digr","tag_id":"cl8vdlqpd003i3oo259p51foe","_id":"cl8vdlqqi003x3oo21zcz8jao"},{"post_id":"cl8vdlqqf003s3oo2fai9digr","tag_id":"cl8vdlqqg003t3oo2dxaj7qzs","_id":"cl8vdlqqi003y3oo2gww7ba6h"},{"post_id":"cl8vdlqs2003z3oo28gw975jf","tag_id":"cl8vdlqob00323oo219os4jx7","_id":"cl8vdlqs500403oo236p344zj"},{"post_id":"cl8vdlqs2003z3oo28gw975jf","tag_id":"cl8vdlqj4001h3oo2gt8tbsq9","_id":"cl8vdlqs500413oo28hamdf24"},{"post_id":"cl8vdlqs2003z3oo28gw975jf","tag_id":"cl8vdlqpc003h3oo2b7rj3tnd","_id":"cl8vdlqs500423oo28ztveu1y"},{"post_id":"cl8vdlqs2003z3oo28gw975jf","tag_id":"cl8vdlqpd003i3oo259p51foe","_id":"cl8vdlqs500433oo26qb6hw18"},{"post_id":"cl8vdlqs2003z3oo28gw975jf","tag_id":"cl8vdlqqg003t3oo2dxaj7qzs","_id":"cl8vdlqs500443oo2134mf1wz"}],"Tag":[{"name":"powershell","_id":"cl8vash9g0003jko2blwi48th"},{"name":"server","_id":"cl8vash9k0004jko2d3x7brm3"},{"name":"dotnet","_id":"cl8vash9k0005jko2cooy0lbq"},{"name":"tye","_id":"cl8vash9m0006jko20xm01hgo"},{"name":"octopus","_id":"cl8vash9m0007jko20xcof6th"},{"name":"nlog","_id":"cl8vash9n000ajko2gc28afro"},{"name":"config","_id":"cl8vash9n000djko23474gbvd"},{"name":"xml","_id":"cl8vash9o000ejko2fbm99oif"},{"name":"devextreme","_id":"cl8vaxdui00015oo28rdi92md"},{"name":"angular","_id":"cl8vaxduk00025oo2fkred0pt"},{"name":"weixin","_id":"cl8vdlqfq00013oo2bnh3aiip"},{"name":"cloudflare","_id":"cl8vdlqfr00023oo27shu1pwe"},{"name":"workers","_id":"cl8vdlqfr00033oo2hszi0497"},{"name":"javascript","_id":"cl8vdlqfs00043oo29gqk2pqf"},{"name":"frp","_id":"cl8vdlqft00053oo262935tqp"},{"name":"docker","_id":"cl8vdlqgd000c3oo2frpe9yda"},{"name":"Tags","_id":"cl8vdlqgd000d3oo2dk7w3ig6"},{"name":"images","_id":"cl8vdlqgf000e3oo2c1gehsg4"},{"name":"Devexpress","_id":"cl8vdlqh7000j3oo23pc12u22"},{"name":"Excel","_id":"cl8vdlqh8000k3oo2b61k3yoy"},{"name":"winform","_id":"cl8vdlqh8000l3oo27fep5t12"},{"name":"Print","_id":"cl8vdlqhr000q3oo26jc5fnwh"},{"name":"Azure Devops","_id":"cl8vdlqi1000v3oo2c30zaxr8"},{"name":"mirror","_id":"cl8vdlqi2000w3oo2eae40cnp"},{"name":"tag","_id":"cl8vdlqi3000x3oo22y24f2zm"},{"name":"travis-ci","_id":"cl8vdlqi4000y3oo279oh2mbk"},{"name":"docker-images","_id":"cl8vdlqi4000z3oo211skaloq"},{"name":"nintendo","_id":"cl8vdlqio00183oo271585v18"},{"name":"nintendo switch online","_id":"cl8vdlqio001b3oo2bp0z5qxs"},{"name":"fastreport","_id":"cl8vdlqj2001g3oo2638h1u9t"},{"name":"winfrom","_id":"cl8vdlqj4001h3oo2gt8tbsq9"},{"name":"Brackets","_id":"cl8vdlqj5001i3oo20g5ahvh4"},{"name":"Debug","_id":"cl8vdlqjo001n3oo2ccu914kg"},{"name":"CommandLineUtils","_id":"cl8vdlqlg001v3oo28oy99j34"},{"name":"UnitTests","_id":"cl8vdlqlh001w3oo2f0l353uk"},{"name":"dotnet tool","_id":"cl8vdlqlh001x3oo27wom0ggs"},{"name":"RDP","_id":"cl8vdlqm700273oo29stadfiu"},{"name":"mstsc","_id":"cl8vdlqm800283oo21o8w88hg"},{"name":"ip","_id":"cl8vdlqm900293oo2azclgg23"},{"name":"PowerShell","_id":"cl8vdlqm9002a3oo2gulfbic0"},{"name":"Zxing.Net","_id":"cl8vdlqma002b3oo29fslhsp4"},{"name":"QR code","_id":"cl8vdlqmb002e3oo23vemfrk8"},{"name":"Transparent background","_id":"cl8vdlqmc002h3oo21akub0vg"},{"name":"透明背景","_id":"cl8vdlqmd002i3oo298ve6wz9"},{"name":"艺术二维码","_id":"cl8vdlqmf002j3oo24o5pate0"},{"name":"C#","_id":"cl8vdlqmg002k3oo2evuq4gmx"},{"name":"merlin","_id":"cl8vdlqne002s3oo224lgctla"},{"name":"CloudBase","_id":"cl8vdlqnf002t3oo208orhx7t"},{"name":"devexpress","_id":"cl8vdlqob00323oo219os4jx7"},{"name":"report","_id":"cl8vdlqob00333oo2afi88pzt"},{"name":"XtraReport","_id":"cl8vdlqoe00343oo2gh0tfck5"},{"name":"propertyGridControl","_id":"cl8vdlqpc003h3oo2b7rj3tnd"},{"name":"propertyGrid","_id":"cl8vdlqpd003i3oo259p51foe"},{"name":"VerticalGrid","_id":"cl8vdlqqg003t3oo2dxaj7qzs"}]}}